{"version":3,"sources":["hooks/useHeaderContext.tsx","domain/utils/goBack.ts","domain/DateDay.ts","components/buttons/CloseButton.tsx","hooks/useBudgetsStore.tsx","domain/date.ts","hooks/useCategoriesStore.tsx","domain/NestedTotal.ts","domain/utils/applyRate.ts","hooks/useCategories.tsx","components/VersusInfo.tsx","domain/ExpenseModel.ts","components/budgets/BudgetQuickStats.tsx","components/stats/charts/Pie.tsx","components/stats/GraphByCategory.tsx","domain/stats/getTotalsByCategory.ts","components/stats/GraphByCountry.tsx","domain/stats/getTotalsByCountry.ts","components/stats/charts/TimeLine.tsx","components/stats/GraphExpensesTimeLine.tsx","components/stats/GraphDaysPerCountry.tsx","domain/stats/getTotalDaysByCountry.ts","components/stats/charts/Bar.tsx","components/stats/GraphDailyAverageByCountry.tsx","domain/stats/getAverageDailyExpensesPerCountry.ts","components/stats/BudgetStats.tsx","domain/ExpensesYearMap.ts","domain/BudgetModelImpl.ts","domain/BudgetModelCombined.ts","views/budgets/BudgetCombined.tsx"],"names":["useHeaderContext","title","actions","props","useEffect","onTitleChange","onActions","undefined","goBack","history","path","length","replace","DateDay","date","Date","_date","this","getFullYear","getMonth","getDate","days","setDate","months","setMonth","years","setFullYear","getTime","isToday","Intl","DateTimeFormat","day","month","year","format","timestampMs","now","CloseButton","color","aria-label","onClick","CloseButtonHistory","to","useBudgetsStore","useState","store","setStore","btApp","useAppContext","a","getBudgetsStore","isSubscribed","fetchStore","observer","onStorageDataChanged","storage","addObserver","deleteObserver","DAY_MS","dateDiff","from","Math","floor","getISODateString","toISOString","slice","monthToString","monthYearToString","useCategoriesStore","getCategoriesStore","NestedTotal","_total","_subTotals","n","subTotalIndexes","subTotal","_getSubTotal","add","index","shift","indexes","getSubtotal","total","getAverage","avg","Object","keys","applyRate","amount","rate","useCategories","categories","setCategories","getCategories","cs","fetchCategories","percentage","spent","FieldDataView","variant","noWrap","text","secondary","VersusInfo","exceeded","container","justify","direction","round","value","ExpenseModel","info","amountBaseCurrency","currency","categoryId","countryCode","description","identifier","when","budgetId","splitInDays","validate","budget","fromMs","toMs","totals","split","em","dateParts","subtract","fieldErrors","push","Error","join","expenses","i","fromTimeMs","addDays","timeMs","JSON","stringify","values","map","e","reduce","b","BudgetQuickStats","loc","useLoc","style","marginBottom","totalBudget","totalSpent","marginTop","totalDays","passedDays","dailyAverage","expectedDailyAverage","urlStats","size","component","Link","PieChart","type","onDataSelect","event","onSelect","label","maxSlices","data","labels","datasets","GraphByCategory","React","expense","getTotalsByCategory","forEach","k","name","getCategoryName","console","log","CircularProgress","GraphByCountry","min","inDates","getTotalsByCountry","TimeLineChart","lineOptions","hideDots","areaFill","heatline","dotSize","hideLine","regionFill","axisOptions","xAxisMode","yAxisMode","xIsSeries","d","shortString","GraphExpensesTimeLine","today","nestedTotalExpenses","average","expectedAvg","expectedDailyExpensesAverage","GraphDaysPerCountry","daysByCountry","budgetModel","expenseGroups","todayMs","fromDay","countriesInADay","Set","getExpenses","clear","c","getTotalDaysByCountry","entries","country","BarChart","GraphDailyAverageByCountry","prevCountry","fromYMD","dailyAvg","getAverageDailyExpensesPerCountry","v","BudgetStatsComponents","Grid","spacing","item","xs","sm","ExpensesYearMap","get","ExpensesMonthMap","set","addExpense","deleteExpense","delete","ExpensesDayMap","m","addDailyExpensesByDate","dayExpenses","addExpensesByDate","inputDays","output","input","expensesMap","Map","BudgetModelImpl","_info","_expenses","_expenseGroups","_nestedTotalExpenses","_days","_totalDays","getAllGroupedByDate","newExpense","oldExpense","_subtractTotal","_addToTotal","oldExpenses","oe","_updateTotalExpenses","ne","expenseId","rates","newTotals","_getBaseAmount","addToTotals","inBudgetDates","subtractTotal","_updateExpensesBaseAmount","Promise","resolve","id","budgets","lastTimeSaved","daysUntilToday","totalExpenses","eg","splitExpense","base","BudgetModelCombined","budgetModels","combine","combineExpenses","max","BudgetCombinedView","params","URLSearchParams","location","search","setBudgetModel","getBudgetModel","bm","fetchModels","Fragment","BudgetStats"],"mappings":"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","file":"static/js/11.faec7185.chunk.js","sourcesContent":["import { useEffect, ReactNode } from \"react\";\nimport { HeaderNotifierProps } from \"../routes\";\n\nexport function useHeaderContext(title: string, actions: ReactNode, props: HeaderNotifierProps) {\n    useEffect(() => {\n        props.onTitleChange(title);\n        props.onActions(actions);\n        return function () {\n            props.onTitleChange('');\n            props.onActions(undefined);\n        }\n    // eslint-disable-next-line\n    }, []);\n}\n","import { History } from \"history\";\n\n/** \n * It navigates back in history if there are enough elements in it to do so. \n * If it can't go back, it will navigate to @param path\n * */\nexport const goBack = (history: History, path = '/') => {\n    if (history.length > 2) {\n        history.goBack();\n    } else {\n        history.replace(path);\n    }\n}\n","import { YMD } from \"../api\";\n\nexport class DateDay implements YMD {\n    private readonly _date: Date;\n\n    constructor(date = new Date()) {\n        this._date = new Date(\n            date.getFullYear(), \n            date.getMonth(), \n            date.getDate());\n    }\n\n    clone() {\n        return new DateDay(this._date);\n    }\n\n    get year () {\n        return this._date.getFullYear();\n    }\n\n    get month () {\n        return this._date.getMonth();\n    }\n\n    get day () {\n        return this._date.getDate();\n    }\n\n    static fromTimeMs (timestampMs: number) {\n        return new DateDay(new Date(timestampMs));\n    }\n\n    static fromYMD (date: YMD) {\n        return new DateDay(new Date(date.year, date.month, date.day));\n    }\n\n    get timeMs () {\n        return this._date.getTime();\n    }\n    \n    get isToday() {\n        return DateDay.isToday(this);\n    }\n\n    /**\n     * @returns current object instance with days added to previous date\n     */\n    addDays (days: number) {\n        this._date.setDate(this._date.getDate() + days);\n        return this;\n    }\n\n    /**\n     * @returns current object instance with months added to previous date\n     */\n    addMonths (months: number) {\n        this._date.setMonth(this._date.getMonth() + months);\n        return this;\n    }\n\n    /**\n     * @returns current object instance with years added to previous date\n     */\n    addYears (years: number) {\n        this._date.setFullYear(this._date.getFullYear() + years);\n        return this;\n    }\n\n    static isToday(date: YMD) {\n        const now = new Date();\n        return date.day === now.getDate() && \n            date.month === now.getMonth() && \n            date.year === now.getFullYear();\n    }\n\n    get shortString () {\n        const dt = new Intl.DateTimeFormat(\n            undefined, \n            {day: 'numeric', month: 'long', year: 'numeric'});\n        return dt.format(this._date);\n    }\n\n    equals(date: DateDay) {\n        return this._date.getTime() === date._date.getTime();\n    }\n}","\nimport * as React from 'react';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { goBack } from '../../domain/utils/goBack';\nimport { History } from 'history';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport const CloseButton: React.FC<{onClick: () => void}> = (props) => (\n    <IconButton \n        color='inherit'\n        aria-label='Close' \n        {...props} \n        onClick={props.onClick}>\n        <CloseIcon/>\n    </IconButton>\n);\n\nexport const CloseButtonHistory: React.FC<{history: History, to?: string}> = (props) => {\n    \n    function handleBack () {\n        goBack(props.history, props.to);\n    }\n\n    return (\n        <CloseButton onClick={handleBack}/>\n    );\n}\n","import { useState, useEffect } from 'react';\nimport { BudgetsStore } from '../domain/stores/interfaces';\nimport { StorageObserver } from '../services/storage/StorageApi';\nimport { useAppContext } from '../contexts/AppContext';\n\nexport function useBudgetsStore() {\n    const [store, setStore] = useState<BudgetsStore>();\n    const btApp = useAppContext();\n\n    useEffect(() => {\n        async function fetchStore () {\n            setStore(await btApp.getBudgetsStore());\n        }\n\n        let isSubscribed = true;\n        if (isSubscribed) {\n            fetchStore();\n        }\n\n        return () => { isSubscribed = false };\n        \n    }, [store, btApp]);\n\n    useEffect(() => {\n        let isSubscribed = true;\n        const observer: StorageObserver = {onStorageDataChanged: () => {\n            setStore(undefined);\n        }};\n\n        if (isSubscribed) {\n            btApp.storage.addObserver(observer);\n        }\n\n        return () => {\n            isSubscribed = false;\n            btApp.storage.deleteObserver(observer);\n        };\n    }, [btApp]);\n\n    return store;\n}","\nconst DAY_MS = 1000*60*60*24;\n\n/**\n * Get difference between 2 dates in days, including from and to dates.\n * @param from - Starting period timestamp\n * @param to - Ending period timestamp\n */\nexport function dateDiff(from: number, to: number) {\n    return Math.floor((to - from)/DAY_MS) + 1;\n}\n\n/** \n * @returns Date (without time) as string type in ISO format\n */\nexport function getISODateString (date = new Date()) {\n    return date.toISOString().slice(0,10);\n}\n\n/** \n * @returns month name from Date input\n */\nexport function monthToString (month: number) {\n    const dt = new Intl.DateTimeFormat(undefined, {month: 'long'});\n    return dt.format(new Date(2000, month, 1));\n}\n\n/** \n * @returns month and year name from Date input\n */\nexport function monthYearToString (year: number, month: number) {\n    const dt = new Intl.DateTimeFormat(undefined, {month: 'long', year: 'numeric'});\n    return dt.format(new Date(year, month, 1));\n}\n","import { useState, useEffect } from 'react';\nimport { CategoriesStore } from '../domain/stores/interfaces';\nimport { useAppContext } from '../contexts/AppContext';\n\nexport function useCategoriesStore () {\n    const btApp = useAppContext();\n    const [store, setStore] = useState<CategoriesStore>();\n\n    useEffect(() => {\n        async function fetchStore () {\n            setStore(await btApp.getCategoriesStore());\n        }\n\n        let isSubscribed = true;\n        if (isSubscribed) {\n            fetchStore();\n        }\n\n        return () => { isSubscribed = false };\n        \n    }, [btApp, store]);\n\n    return store;\n}\n","import { ObjectMap } from \"../api\";\n\ndeclare type IndexType = number|string;\n\nexport class NestedTotal {\n    private _total: number;\n    private _subTotals: ObjectMap<NestedTotal>;\n\n    constructor(){\n        this._total = 0;\n        this._subTotals = {};\n    }\n\n    add(n: number, subTotalIndexes?: IndexType[]): number{\n        this._total += n;\n        const subTotal = this._getSubTotal(subTotalIndexes);\n        subTotal && subTotal.add(n, subTotalIndexes);\n        return this._total;\n    }\n\n    subtract(n: number, subTotalIndexes?: IndexType[]): number {\n        return this.add(-n, subTotalIndexes);\n    }\n\n    private _getSubTotal(subTotalIndexes?: IndexType[]): NestedTotal|undefined {\n        if (subTotalIndexes !== undefined) {\n            const index = subTotalIndexes.shift();\n            if (index !== undefined) {\n                if (!(index in this._subTotals)) {\n                    this._subTotals[index] = new NestedTotal();\n                }\n                return this._subTotals[index];\n            }\n        }\n        return undefined;\n    }\n\n    get total() {\n        return this._total;\n    }\n\n    get avg() {\n        return this._total / Object.keys(this._subTotals).length;\n    }\n\n    getSubtotal(indexes: IndexType[]): number {\n        const index = indexes.shift();\n        if (index !== undefined) {\n            if (index in this._subTotals) {\n                return this._subTotals[index].getSubtotal(indexes);\n            } else {\n                return 0;\n            }\n        }\n        return this.total;\n    }\n\n    getAverage(indexes: IndexType[]): number {\n        const index = indexes.shift();\n        if (index !== undefined) {\n            if (index in this._subTotals) {\n                return this._subTotals[index].getAverage(indexes);\n            } else {\n                return 0;\n            }\n        }\n        return this.avg;\n    }\n\n    get indexes () {\n        return Object.keys(this._subTotals);\n    }\n}\n","\nexport default function applyRate (amount: number, rate: number) {\n    return amount / rate;\n}\n","import { useState, useEffect } from 'react';\nimport { CategoriesMap } from '../api';\nimport { useCategoriesStore } from './useCategoriesStore';\nimport { CategoriesStore } from '../domain/stores/interfaces';\n\nexport function useCategories() {\n    const [categories, setCategories] = useState<CategoriesMap>();\n    const store = useCategoriesStore();\n\n    useEffect(() => {\n        \n        async function fetchCategories (store: CategoriesStore) {\n            const cs = await store.getCategories();\n            setCategories(cs);\n        }\n\n        store && fetchCategories(store);\n    }, [store]);\n\n    return categories;\n}\n","import * as React from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\ninterface VersusInfoProps {\n    total: number;\n    spent: number;\n    title: string;\n}\n\nfunction percentage (spent: number, total: number) {\n    if (total) {\n        return (spent / total) * 100;\n    }\n    return 0;\n}\n\ndeclare type FType = number|string;\n\nconst FieldDataView: React.FC<{text:FType, secondary?: FType}> = (props) => (\n        <Typography variant='body2' noWrap>\n            {props.text} \n            { props.secondary && \n                <Typography variant='caption' color='textSecondary'>\n                    {props.secondary}</Typography> }\n        </Typography>\n\n);\n\nexport const VersusInfo: React.FC<VersusInfoProps> = (props) => {\n    const {spent, total, title} = props;\n\n    const exceeded = spent > total;\n\n    return (<React.Fragment>\n        <Grid container justify='space-between' direction='row'>\n            <FieldDataView text={Math.round(spent)}/>\n            <FieldDataView text={title} secondary={` (${Math.round(total)})`}/>\n            <FieldDataView text={Math.round(total - spent)}/>\n        </Grid>\n        <LinearProgress \n            color={exceeded ? 'secondary' : 'primary'}\n            variant='determinate' \n            value={ exceeded ? 100 : percentage(spent, total) }/>\n    </React.Fragment>);\n}\n","import { Budget, Expense } from \"../api\";\nimport { NestedTotal } from \"./NestedTotal\";\nimport { DateDay } from \"./DateDay\";\n\nexport class ExpenseModel implements Expense {\n\n    private _date?: DateDay;\n    readonly amount: number;\n    amountBaseCurrency: number;\n    readonly currency: string;\n    readonly categoryId: string;\n    readonly countryCode: string;\n    readonly description?: string;\n    readonly identifier: string;\n    readonly when: number;\n    readonly budgetId: string;\n    readonly splitInDays: number;\n\n    constructor (info: Expense) {\n        this.identifier = info.identifier;\n        this.amountBaseCurrency = info.amountBaseCurrency;\n        this.amount = info.amount;\n        this.currency = info.currency;\n        this.categoryId = info.categoryId;\n        this.countryCode = info.countryCode;\n        this.description = info.description;\n        this.when = info.when;\n        this.budgetId = info.budgetId;\n        this.splitInDays = info.splitInDays > 0 ? info.splitInDays : 1;\n        this.validate();\n    }\n\n    get info (): Expense {\n        const { amount, amountBaseCurrency, categoryId, countryCode, currency, description, identifier, when, budgetId, splitInDays} = this;\n        return { amount, amountBaseCurrency, categoryId, description, identifier, when, countryCode, currency, budgetId, splitInDays};\n    }\n\n    get json (): string {\n        return JSON.stringify(this.info);\n    }\n\n    get date () {\n        if (!this._date) {\n            this._date = DateDay.fromTimeMs(this.when);\n        }\n        return this._date;\n    }\n\n    get day () {\n        return this.date.day;\n    }\n\n    get month () {\n        return this.date.month;\n    }\n\n    get year () {\n        return this.date.year;\n    }\n\n    get dateParts (): number[] {\n        return [this.year, this.month, this.day];\n    }\n\n    static sum(expenses: Iterable<Expense>){\n        return Object.values(expenses)\n            .map(e => e.amountBaseCurrency)\n            .reduce((a, b) => a + b);\n    }\n\n    inBudgetDates (budget: Budget) {\n        return this.when <= budget.to && this.when >= budget.from;\n    }\n\n    inDates (fromMs: number, toMs: number) {\n        return this.when <= toMs && this.when >= fromMs;\n    }\n\n    addToTotals(totals: NestedTotal) {\n        for (const em of this.split()) {\n            totals.add(em.amountBaseCurrency, em.dateParts);\n        }\n    }\n\n    subtractTotal(totals: NestedTotal) {\n        for (const em of this.split()) {\n            totals.subtract(em.amountBaseCurrency, em.dateParts);\n        }\n    }\n\n    validate () {\n        const fieldErrors = [];\n        if (this.budgetId === undefined) {\n            fieldErrors.push('budget identifier');\n        }\n        if (this.amountBaseCurrency === undefined) {\n            fieldErrors.push('amount in base currency');\n        }\n        if (this.countryCode.length !== 2) {\n            fieldErrors.push('country code');\n        }\n        if (this.currency.length !== 3) {\n            fieldErrors.push('currency code');\n        }\n        if (fieldErrors.length > 0) {\n            throw Error(`Invalid expense (${this.identifier}) fields: ${fieldErrors.join(', ')}`);\n        }\n    }\n\n    /** \n     * @returns List of split expenses, first element will be current split expense\n     */\n    split(): ExpenseModel[] {\n        if (this.splitInDays < 1) {\n            throw Error('You cannot split an expense in less than one piece');\n        } else if (this.splitInDays === 1) {\n            return [this];\n        } else {\n            const amountBaseCurrency =  this.amountBaseCurrency / this.splitInDays;\n            const amount = this.amount / this.splitInDays;\n            const expenses = [new ExpenseModel({...this, amount, amountBaseCurrency})];\n            for (let i=1; i<this.splitInDays; i++) {\n                expenses.push(new ExpenseModel({\n                    ...this,\n                    amount, \n                    amountBaseCurrency,\n                    when: DateDay.fromTimeMs(this.when).addDays(i).timeMs,\n                }));\n            }\n            return expenses;\n        }\n    }\n}\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { VersusInfo } from '../VersusInfo';\nimport CardActions from '@material-ui/core/CardActions';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport { useLoc } from '../../hooks/useLoc';\n\ninterface BudgetQuickStatsProps {\n    totalBudget: number,\n    totalSpent: number,\n    totalDays: number,\n    passedDays: number,\n    expectedDailyAverage: number,\n    dailyAverage?: number,\n    urlStats?: string;\n}\n\nconst spacing = '0.5rem';\n\nexport const BudgetQuickStats: React.FC<BudgetQuickStatsProps> = (props) => {\n    const loc = useLoc();\n    \n    return <Card style={{ marginBottom: '1rem' }}>\n        <CardContent>\n            <VersusInfo\n                total={props.totalBudget}\n                spent={props.totalSpent}\n                title={loc('Spent')} />\n            <Box marginTop={spacing}>\n                <VersusInfo\n                    total={props.totalDays}\n                    spent={props.passedDays}\n                    title={loc('Days')} /></Box>\n            {props.dailyAverage !== undefined &&\n                <Box marginTop={spacing}>\n                    <VersusInfo\n                        total={props.expectedDailyAverage}\n                        spent={props.dailyAverage}\n                        title={loc('Daily Average')} /></Box>}\n        </CardContent>\n        {props.urlStats && <CardActions>\n            <Button\n                size='small'\n                component={Link}\n                color='primary'\n                to={props.urlStats}>\n                {loc('More Stats')}\n            </Button>\n        </CardActions>}\n    </Card>;\n}","import * as React from \"react\";\nimport ReactFrappeChart from \"react-frappe-charts\";\n\ninterface PieChartProps {\n    title: string;\n    labels: string[];\n    values: number[];\n    maxSlices?: number;\n    onSelect?: (identifier: string) => void;\n}\n\nexport const PieChart: React.FC<PieChartProps> = (props) => {\n    function handleSelect (event: {label: string}) {\n        props.onSelect && props.onSelect(event.label);\n    }\n\n    return <ReactFrappeChart type='percentage' title={props.title} onDataSelect={handleSelect}\n        maxSlices={props.maxSlices||8}\n        data={{\n            labels: props.labels,\n            datasets: [{ values: props.values }], \n        }}\n    />;\n}\n","import * as React from \"react\";\nimport { BudgetModel } from \"../../domain/BudgetModel\";\nimport { CategoriesMap } from \"../../api\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { getTotalsByCategory } from \"../../domain/stats/getTotalsByCategory\";\nimport { PieChart } from \"./charts/Pie\";\nimport { useLoc } from \"../../hooks/useLoc\";\n\ninterface GraphByCategoryProps {\n    budget: BudgetModel, \n    categories: CategoriesMap;\n}\n\n// It might happen that an expense has a category that was already deleted\nfunction getCategoryName (index: string, categories: CategoriesMap) {\n    return categories[index] ? categories[index].name : index;\n}\n\nexport const GraphByCategory: React.FC<GraphByCategoryProps> = (props) => {\n    const loc = useLoc();\n    const {budget, categories} = props;\n\n\n    const data = React.useMemo(() => {\n        if (categories && Object.keys(categories).length > 0) {\n            const labels: string[] = [];\n            const values: number[] = [];\n            const totals = getTotalsByCategory(budget);\n            const indexes = totals.indexes;\n            indexes.forEach((k) => {\n                labels.push(getCategoryName(k, categories));\n                values.push(Math.round(totals.getSubtotal([k,])));\n            });\n            return {labels, values};\n        }\n    }, [budget, categories]);\n\n    function handleCategory (categoryId: string) {\n        console.log(categoryId);\n    }\n\n    if (data) {\n        return <PieChart title={loc('By category')} {...data} onSelect={handleCategory} />;\n    } else {\n        return <CircularProgress/>;\n    }\n}","import { BudgetModel } from \"../BudgetModel\";\nimport { NestedTotal } from \"../NestedTotal\";\n\nexport function getTotalsByCategory (budget: BudgetModel) {\n    const totals = new NestedTotal();\n    for (const expense of budget.expenses) {\n        totals.add(expense.amountBaseCurrency, [expense.categoryId,]);\n    }\n    return totals;\n}\n","import * as React from \"react\";\nimport { BudgetModel } from \"../../domain/BudgetModel\";\nimport { getTotalsByCountry } from \"../../domain/stats/getTotalsByCountry\";\nimport { PieChart } from \"./charts/Pie\";\nimport { useLoc } from \"../../hooks/useLoc\";\n\ninterface GraphByCountryProps {\n    budget: BudgetModel\n}\n\nexport const GraphByCountry: React.FC<GraphByCountryProps> = (props) => {\n    const {budget} = props;\n    const loc = useLoc();\n\n    const data = React.useMemo(() => {\n        const totals = getTotalsByCountry(budget);\n        const indexes = totals.indexes;\n        const labels: string[] = [];\n        const values: number[] = [];\n        indexes.forEach(k => {\n            labels.push(k);\n            values.push(Math.round(totals.getSubtotal([k,])));\n        });\n        return {labels, values};\n    }, [budget]);\n\n    return <PieChart title={loc('By country')} {...data} />;\n}\n","import { BudgetModel } from \"../BudgetModel\";\nimport { NestedTotal } from \"../NestedTotal\";\nimport { DateDay } from \"../DateDay\";\n\nexport function getTotalsByCountry(budget: BudgetModel) {\n    const totals = new NestedTotal();\n    const toMs = Math.min(new DateDay().timeMs, budget.to);\n    for (const expense  of budget.expenses) {\n        if (expense.inDates(budget.from, toMs)) {\n            totals.add(expense.amountBaseCurrency, [expense.countryCode,]);\n        }\n    }\n    return totals;\n}\n","import React from 'react';\nimport ReactFrappeChart from \"react-frappe-charts\";\nimport { DateDay } from \"../../../domain/DateDay\";\n\ninterface TimeLineChartProps {\n    title: string;\n    avg: number;\n    expectedAvg: number;\n    labels: DateDay[];\n    values: number[];\n}\n\nexport const TimeLineChart: React.FC<TimeLineChartProps> = (props) => (\n    <ReactFrappeChart\n        title={props.title}\n        lineOptions={{\n            hideDots: 1, \n            areaFill: 1, \n            heatline: 1, \n            dotSize: 0, \n            hideLine: 0, \n            regionFill: 1 }}\n        type='line'\n        axisOptions={{ xAxisMode: 'tick', yAxisMode: 'tick', xIsSeries: 1}}\n        data={{\n            labels: props.labels.map(d => d.shortString),\n            datasets: [{ \n                values: props.values,\n            }], \n        }}\n    />\n);","import * as React from \"react\";\nimport { BudgetModel } from \"../../domain/BudgetModel\";\nimport { DateDay } from \"../../domain/DateDay\";\nimport { TimeLineChart } from \"./charts/TimeLine\";\nimport { useLoc } from \"../../hooks/useLoc\";\n\ninterface GraphExpensesTimeLineProps {\n    budget: BudgetModel;\n}\n\nexport const GraphExpensesTimeLine: React.FC<GraphExpensesTimeLineProps> = (props) => {\n    const {budget} = props;\n    const loc = useLoc();\n    \n    const data = React.useMemo(() => {\n        const {from, to} = budget;\n        const today = Date.now();\n        const fromDate = new Date(from);\n        const labels = [];\n        const values = [];\n        for (let date=fromDate; date.getTime() <= to && date.getTime() <= today; date.setDate(date.getDate() + 1)) {\n            const {year, month, day} = new DateDay(date);\n            const total = budget.nestedTotalExpenses.getSubtotal([year, month, day]);\n            labels.push(new DateDay(date));\n            values.push(Math.round(total));\n        }\n        return {labels, values};\n    }, [budget]);\n\n    return <TimeLineChart \n        title={loc('By date')} \n        {...data}\n        avg={budget.average}\n        expectedAvg={budget.expectedDailyExpensesAverage}\n         />;\n}","import * as React from \"react\";\nimport { BudgetModel } from \"../../domain/BudgetModel\";\nimport { getTotalDaysByCountry } from \"../../domain/stats/getTotalDaysByCountry\";\nimport { PieChart } from \"./charts/Pie\";\nimport { useLoc } from \"../../hooks/useLoc\";\n\ninterface GraphDaysPerCountryProps {\n    budget: BudgetModel\n}\n\nexport const GraphDaysPerCountry: React.FC<GraphDaysPerCountryProps> = (props) => {\n    const {budget} = props;\n    const loc = useLoc();\n\n    const data = React.useMemo(() => {\n        const daysByCountry = getTotalDaysByCountry(budget);\n        const labels: string[] = [];\n        const values: number[] = [];\n        Object\n            .entries(daysByCountry)\n            .forEach(([country, total]) => {\n                labels.push(country);\n                values.push(Math.round(total));\n            });\n        return {labels, values};\n    }, [budget]);\n\n    return <PieChart title={loc('Days in a country')} {...data} />;\n}\n","import { BudgetModel } from \"../BudgetModel\";\nimport { DateDay } from \"../DateDay\";\nimport { ObjectMap } from \"../../api\";\n\nexport function getTotalDaysByCountry (budgetModel: BudgetModel) {\n    const daysByCountry: ObjectMap<number> = {};\n    const {expenseGroups, from} = budgetModel;\n    const todayMs = Date.now();\n    const fromDay = DateDay.fromTimeMs(from);\n    const countriesInADay = new Set<string>();\n\n    do {\n        const expenses = expenseGroups.getExpenses(fromDay);\n        if (expenses) {\n            countriesInADay.clear();\n            expenses.forEach(e => countriesInADay.add(e.countryCode));\n            countriesInADay.forEach(c => daysByCountry[c] = (daysByCountry[c] || 0) + 1);\n        }\n        fromDay.addDays(1);\n    } while (fromDay.timeMs <= todayMs);\n    return daysByCountry;\n}\n","import React from 'react';\nimport ReactFrappeChart from 'react-frappe-charts';\n\ninterface BarChartProps {\n    title: string;\n    labels: string[];\n    values: number[];\n}\n\nexport const BarChart: React.FC<BarChartProps> = (props) => (\n    <ReactFrappeChart\n        title={props.title}\n        type='bar'\n        data={{\n            labels: props.labels,\n            datasets: [{ values: props.values }], \n        }}\n    />\n);\n","import * as React from \"react\";\nimport { BudgetModel } from \"../../domain/BudgetModel\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { getAverageDailyExpensesPerCountry } from \"../../domain/stats/getAverageDailyExpensesPerCountry\";\nimport { BarChart } from \"./charts/Bar\";\nimport { useLoc } from \"../../hooks/useLoc\";\n\ninterface GraphByCategoryProps {\n    budget: BudgetModel, \n}\n\nexport const GraphDailyAverageByCountry: React.FC<GraphByCategoryProps> = (props) => {\n    const {budget} = props;\n    const loc = useLoc();\n\n    const data = React.useMemo(() => {\n            const totals = getAverageDailyExpensesPerCountry(budget);\n            return {\n                labels: Object.keys(totals), \n                values: Object.values(totals).map(v => Math.round(v))};\n    }, [budget]);\n\n    if (data) {\n        return <BarChart title={loc('Daily avg country')} {...data} />;\n    } else {\n        return <CircularProgress/>;\n    }\n}","import { BudgetModel } from \"../BudgetModel\";\nimport { NestedTotal } from \"../NestedTotal\";\nimport { DateDay } from \"../DateDay\";\nimport { ObjectMap } from \"../../api\";\n\nexport function getAverageDailyExpensesPerCountry(budget: BudgetModel) {\n    const totals = new NestedTotal();\n    const toMs = Math.min(new DateDay().timeMs, budget.to);\n    const {from, expenseGroups} = budget;\n    \n    for (const [year, months] of expenseGroups) {\n        for (const [month, days] of months) {\n            for (const [day, expenses] of days) {\n                let prevCountry;\n                let total = 0;\n                for (const em of expenses.values()) {\n                    const {countryCode, amountBaseCurrency} = em;\n                    if (!em.inDates(from, toMs) || (prevCountry && prevCountry !== countryCode)) {\n                        total = 0;\n                        break;\n                    } else {\n                        prevCountry = countryCode;\n                        total = total + amountBaseCurrency;\n                    }    \n                }\n                total && prevCountry && totals.add(\n                    total, \n                    [prevCountry, DateDay.fromYMD({year,month,day}).shortString])\n            }\n        }\n    }\n    const dailyAvg: ObjectMap<number> = {};\n    totals.indexes.forEach(country => (dailyAvg[country] = totals.getAverage([country])));\n    return dailyAvg;\n}\n","import * as React from \"react\";\nimport { GraphByCategory } from \"./GraphByCategory\";\nimport { GraphByCountry } from \"./GraphByCountry\";\nimport { GraphExpensesTimeLine } from \"./GraphExpensesTimeLine\";\nimport { GraphDaysPerCountry } from \"./GraphDaysPerCountry\";\nimport { BudgetModel } from \"../../domain/BudgetModel\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { GraphDailyAverageByCountry } from \"./GraphDailyAverageByCountry\";\nimport { CategoriesMap } from \"../../api\";\n\ninterface BudgetStatsComponentProps {\n    budget: BudgetModel;\n    categories?: CategoriesMap;\n}\n\nexport const BudgetStatsComponents: React.FC<BudgetStatsComponentProps> = (props) => {\n    const {budget, categories} = props;\n\n    return <Grid container spacing={3}>\n        <Grid item xs={12} sm={6}>{categories && <GraphByCategory budget={budget} categories={categories} />}</Grid>\n        <Grid item xs={12} sm={6}><GraphDailyAverageByCountry budget={budget}/></Grid>\n        <Grid item xs={12} sm={6}><GraphByCountry budget={budget}/></Grid>\n        <Grid item xs={12} sm={6}><GraphDaysPerCountry budget={budget}/></Grid>\n        <Grid item xs={12} sm={12}><GraphExpensesTimeLine budget={budget}/></Grid>\n    </Grid>;\n}\n","import { ExpenseModel } from \"./ExpenseModel\";\nimport { YMD } from \"../api\";\n\nexport class ExpensesYearMap extends Map<number, ExpensesMonthMap> {\n\n    addExpense(expense: ExpenseModel) {\n        const { year } = expense;\n        let months = this.get(year);\n        if (months === undefined) {\n            months = new ExpensesMonthMap();\n            this.set(year, months);\n        }\n        months.addExpense(expense);\n    }\n\n    deleteExpense(expense: ExpenseModel) {\n        const {year} = expense;\n        const months = this.get(year);\n        if (months && months.deleteExpense(expense)) {\n            if (months.size === 0) {\n                this.delete(year);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    getExpenses({year, month, day}: YMD) {\n        const months = this.get(year);\n        if (months) {\n            const days = months.get(month);\n            if (days) {\n                return days.get(day);\n            }\n        }\n    }\n\n    private static addDailyExpensesByDate (inputDays: ExpensesDayMap, output: ExpensesDayMap) {\n        for (const d of inputDays.values()) {\n            ExpensesYearMap.addExpensesByDate(d.values(), output);\n        }\n    }\n\n    static addExpensesByDate (input: Iterable<ExpenseModel>, output: ExpensesDayMap = new ExpensesDayMap()) {\n        for (const e of input) {\n            let expensesMap = output.get(e.when);\n            if (!expensesMap) {\n                expensesMap = new Map();\n                output.set(e.when, expensesMap);\n            }\n            expensesMap.set(e.identifier, e);\n        }\n        return output;\n    }\n\n    getAllGroupedByDate(year: number, month?: number, day?: number): ExpensesDayMap | undefined {\n        const expenses: ExpensesDayMap = new ExpensesDayMap();\n        if (month === undefined) {\n            const months = this.get(year);\n            if (months) {\n                for (const m of months.values()) {\n                    ExpensesYearMap.addDailyExpensesByDate(m, expenses);\n                }    \n            }\n        } else if (day === undefined) {\n            const months = this.get(year);\n            if (months) {\n                const days = months.get(month);\n                if (days) {\n                    ExpensesYearMap.addDailyExpensesByDate(days, expenses);\n                }\n            }\n        } else {\n            const dayExpenses = this.getExpenses({year, month, day});\n            dayExpenses && ExpensesYearMap.addExpensesByDate(dayExpenses.values(), expenses);\n        }\n        return expenses;\n    }\n\n    getExpense(date: YMD, identifier: string){\n        const expenses = this.getExpenses(date);\n        if (expenses) {\n            return expenses.get(identifier);\n        }\n    }\n\n    getMonths(year: number): Iterable<number> {\n        const months = this.get(year);\n        return months ? months.keys() : [];\n    }\n\n    getDays(year: number, month: number): Iterable<number> {\n        const months = this.get(year);\n        if (months) {\n            const days = months.get(month);\n            return days ? days.keys() : [];\n        }\n        return [];\n    }\n\n    get years(): Iterable<number> {\n        return this.keys();\n    }\n\n}\n\nexport class ExpensesMonthMap extends Map<number, ExpensesDayMap> { \n    addExpense(expense: ExpenseModel) {\n        const { month } = expense;\n        \n        let days = this.get(month);\n        if (days === undefined) {\n            days = new ExpensesDayMap();\n            this.set(month, days);\n        }\n        days.addExpense(expense);\n    }\n\n    deleteExpense(expense: ExpenseModel) {\n        const {month} = expense;\n        const days = this.get(month);\n        if (days && days.deleteExpense(expense)) {\n            if (days.size === 0) {\n                this.delete(month);\n            }\n            return true;\n        }\n        return false;\n    }\n}\n\nexport class ExpensesDayMap extends Map<number, Map<string, ExpenseModel>> { \n\n    addExpense(expense: ExpenseModel) {\n        const {day} = expense;\n        let expenses = this.get(day);\n        if (expenses === undefined) {\n            expenses = new Map<string, ExpenseModel>();\n            this.set(day, expenses);\n        }\n        expenses.set(expense.identifier, expense);\n    }\n\n    deleteExpense(expense: ExpenseModel) {\n        const {day, identifier} = expense;\n        const expenses = this.get(day);\n        if (expenses && expenses.delete(identifier)) {\n            if (expenses.size === 0) {\n                this.delete(day);\n            }\n            return true;\n        }\n        return false;\n    }\n    \n}","import { Budget, Expense, CategoriesMap, CurrencyRates, ExpensesMap, ExportDataSet } from \"../api\";\nimport { dateDiff } from \"./date\";\nimport { NestedTotal } from \"./NestedTotal\";\nimport { ExpenseModel } from \"./ExpenseModel\";\nimport applyRate from \"./utils/applyRate\";\nimport { BudgetModel } from \"./BudgetModel\";\nimport { ExpensesYearMap, ExpensesDayMap } from \"./ExpensesYearMap\";\n\nexport class BudgetModelImpl implements BudgetModel {\n\n    private readonly _info: Budget;\n    private readonly _expenses: Map<string, ExpenseModel>;\n    private _expenseGroups?: ExpensesYearMap;\n\n    private _nestedTotalExpenses?: NestedTotal;\n\n    private _days?: number;\n    private _totalDays?: number;\n\n    constructor(info: Budget, expenses: Iterable<Expense> = []) {\n        this._info = info;\n        this._expenses = new Map();\n        for (const expense of expenses) {\n            this._expenses.set(\n                expense.identifier, \n                new ExpenseModel(expense));\n        }\n    }\n\n    get numberOfExpenses() {\n        return this._expenses.size;\n    }\n\n    get identifier() {\n        return this._info.identifier;\n    }\n\n    get currency() {\n        return this._info.currency;\n    }\n\n    get from() {\n        return this._info.from;\n    }\n\n    get name() {\n        return this._info.name;\n    }\n\n    get to() {\n        return this._info.to;\n    }\n\n    get total() {\n        return this._info.total;\n    }\n\n    get info() {\n        return this._info;\n    }\n\n    get expenses() {\n        return this._expenses.values();\n    }\n\n    get totalExpenses() {\n        return this.nestedTotalExpenses.total;\n    }\n\n    get nestedTotalExpenses() {\n        if (this._nestedTotalExpenses === undefined) {\n            this._nestedTotalExpenses = new NestedTotal();\n            this._expenses.forEach(e => this._addToTotal(e));\n        }\n        return this._nestedTotalExpenses;\n    }\n\n    getTotalExpenses(year: number, month?: number, day?: number) {\n        const keys = [year];\n        month !== undefined && keys.push(month);\n        day !== undefined && keys.push(day);\n        return this.nestedTotalExpenses.getSubtotal(keys);\n    }\n\n    getExpensesByDay (year?: number, month?: number, day?: number): ExpensesDayMap | undefined {\n        if (year === undefined) {\n            return ExpensesYearMap.addExpensesByDate(this._expenses.values());\n        } else {\n            return this.expenseGroups.getAllGroupedByDate(year, month, day);\n        }\n    }\n\n    private _updateTotalExpenses(newExpense: ExpenseModel, oldExpense?: ExpenseModel) {\n        if (oldExpense === undefined ||\n            oldExpense.splitInDays !== newExpense.splitInDays ||\n            oldExpense.amountBaseCurrency !== newExpense.amountBaseCurrency ||\n            oldExpense.when !== newExpense.when ||\n            oldExpense.categoryId !== newExpense.categoryId ||\n            oldExpense.countryCode !== newExpense.countryCode) {\n            if (oldExpense) {\n                this._subtractTotal(oldExpense);\n            }\n            this._addToTotal(newExpense);\n        }\n    }\n\n    setExpense(expense: Expense) {\n        const newExpense = new ExpenseModel(expense);\n        const oldExpense = this._expenses.get(expense.identifier);\n        if (oldExpense) {\n            const oldExpenses = oldExpense.split();\n            for (const oe of oldExpenses) {\n                this.expenseGroups.deleteExpense(oe);\n            }\n            this._updateTotalExpenses(newExpense, oldExpense);\n        } else {\n            this._updateTotalExpenses(newExpense);\n        }\n        for (const ne of newExpense.split()) {\n            this.expenseGroups.addExpense(ne);\n        }\n        this._expenses.set(expense.identifier, newExpense);\n    }\n\n    getExpense(expenseId: string): ExpenseModel {\n        const expense = this._expenses.get(expenseId);\n        if (expense) {\n            return expense;\n        }\n        throw new Error(`Expense with ID \"${expenseId}\" not found`);\n    }\n\n    get daysUntilToday() {\n        if (!this._days) {\n            this._days = dateDiff(this._info.from, Date.now());\n        }\n        return this._days;\n    }\n\n    get totalDays() {\n        if (!this._totalDays) {\n            this._totalDays = dateDiff(this._info.from, this._info.to);\n        }\n        return this._totalDays;\n    }\n\n    get average() {\n        if (this.daysUntilToday > 0 && this.totalExpenses > 0) {\n            return Math.round(this.totalExpenses / this.daysUntilToday);\n        } else {\n            return 0;\n        }\n    }\n\n    get expectedDailyExpensesAverage() {\n        return Math.round(this._info.total / this.totalDays);\n    }\n\n    deleteExpense(expenseId: string) {\n        const expense = this._expenses.get(expenseId);\n        if (expense && this._expenses.delete(expenseId)) {\n            this._subtractTotal(expense);\n            this.expenseGroups.deleteExpense(expense);\n            return true;\n        }\n        return false;\n    }\n\n    get expenseGroups() {\n        if (!this._expenseGroups) {\n            const eg = new ExpensesYearMap();\n            this._expenses\n                .forEach(expense => expense.split()\n                .forEach(splitExpense => eg.addExpense(splitExpense)));\n            this._expenseGroups = eg;\n        }\n        return this._expenseGroups;\n    }\n\n    private static _getBaseAmount(expense: Expense, rates: CurrencyRates) {\n        const {currency, amount} = expense;\n        if (rates.base === currency) {\n            return amount;\n        } else {\n            const rate = rates.rates[currency];\n            if (rate === undefined) {\n                throw new Error(`Cannot get currency exchange rate from ${rates.base} to ${currency}`);\n            }\n            return applyRate(amount, rate);\n        }\n    }\n\n    private _updateExpensesBaseAmount(rates: CurrencyRates) {\n        const newTotals = new NestedTotal();\n        for (const expense of this._expenses.values()) {\n            expense.amountBaseCurrency = BudgetModelImpl._getBaseAmount(expense, rates);\n            expense.addToTotals(newTotals);\n        }\n        this._nestedTotalExpenses = newTotals;\n    }\n\n    private _addToTotal(expense: ExpenseModel) {\n        if (expense.inBudgetDates(this._info)) {\n            expense.addToTotals(this.nestedTotalExpenses);\n        }\n    }\n\n    private _subtractTotal(expense: ExpenseModel) {\n        if (expense.inBudgetDates(this._info)) {\n            expense.subtractTotal(this.nestedTotalExpenses);\n        }\n    }\n\n    async setBudget(info: Budget, rates?: CurrencyRates) {\n        if (info.identifier !== this.identifier) {\n            throw new Error('Cannot update budget information with different IDs');\n        }\n\n        if (info.currency !== this._info.currency) {\n            if (!rates) {\n                throw new Error('Required conversion rates to update budget currency');\n            }\n            this._updateExpensesBaseAmount(rates);\n            this._info.currency = info.currency;\n        }\n\n        this._info.name = info.name;\n        this._info.total = info.total;\n\n        if (this._info.from !== info.from) {\n            this._days = this._totalDays = undefined;\n            this._info.from = info.from;\n        }\n\n        if (this._info.to !== info.to) {\n            this._days = this._totalDays = undefined;\n            this._info.to = info.to;\n        }\n\n        return Promise.resolve();\n    }\n\n    export(categories: CategoriesMap): ExportDataSet {\n        const expenses: ExpensesMap = {};\n        this._expenses.forEach((e, id) => (expenses[id] = e.info));\n        return {\n            budgets: { [this.identifier]: this.info },\n            expenses,\n            categories,\n            lastTimeSaved: Date.now()\n        };\n    }\n}\n","import { Budget, Expense } from \"../api\";\nimport { BudgetModel } from \"./BudgetModel\";\nimport { BudgetModelImpl } from \"./BudgetModelImpl\";\n\nexport class BudgetModelCombined extends BudgetModelImpl {\n\n    constructor(budgetModels: BudgetModel []) {\n        super(\n            BudgetModelCombined.combine(budgetModels), \n            BudgetModelCombined.combineExpenses(budgetModels.map(b => b.expenses)));\n    }\n\n    private static combine(budgets: Budget[]): Budget {\n        return {\n            identifier: budgets.map(b => b.identifier).join('+'),\n            currency: budgets[0].currency,\n            from: budgets.map(b => b.from).reduce((a, b) => Math.min(a, b)),\n            to: budgets.map(b => b.to).reduce((a, b) => Math.max(a, b)),\n            name: budgets.map(b => b.name).join('+'),\n            total: budgets.map(b => b.total).reduce((a, b) => a + b)\n        };\n    }\n\n    private static combineExpenses(expenses: Iterable<Expense>[]): Iterable<Expense> {\n        return expenses.reduce((a, b) => ([...a, ...b]));\n    }\n\n}\n","import React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { HeaderNotifierProps } from \"../../routes\";\nimport { useBudgetsStore } from \"../../hooks/useBudgetsStore\";\nimport { BudgetsStore } from \"../../domain/stores/interfaces\";\nimport { BudgetModel } from \"../../domain/BudgetModel\";\nimport { BudgetModelCombined } from \"../../domain/BudgetModelCombined\";\nimport { BudgetQuickStats } from \"../../components/budgets/BudgetQuickStats\";\nimport { BudgetStatsComponents } from \"../../components/stats/BudgetStats\";\nimport { CloseButtonHistory } from \"../../components/buttons/CloseButton\";\nimport { useHeaderContext } from \"../../hooks/useHeaderContext\";\nimport { useLoc } from \"../../hooks/useLoc\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useCategories } from \"../../hooks/useCategories\";\n\ninterface BudgetCombinedViewProps extends\n    HeaderNotifierProps,\n    RouteComponentProps<{}> { \n}\n\nexport const BudgetCombinedView: React.FC<BudgetCombinedViewProps> = (props) => {\n    \n    const params = new URLSearchParams(props.location.search);\n    const store = useBudgetsStore();\n    const categories = useCategories();\n\n    const [budgetModel, setBudgetModel] = React.useState<BudgetModel>();\n    const loc = useLoc();\n\n    useHeaderContext(loc('Combined budgets'), <CloseButtonHistory history={props.history}/>, props);\n    \n    React.useEffect(() => {\n        async function fetchModels (store: BudgetsStore) {\n            const budgetModels: BudgetModel[] = [];\n            for (const v of params.values()) {\n                budgetModels.push(await store.getBudgetModel(v));\n            }\n            const bm = new BudgetModelCombined(budgetModels);\n            setBudgetModel(bm);\n        }\n\n        if (store) {\n            fetchModels(store);\n        }\n    // eslint-disable-next-line\n    }, [store]);\n\n    if (budgetModel) {\n        return (\n        <React.Fragment>\n            <BudgetQuickStats \n                dailyAverage={budgetModel.average}\n                expectedDailyAverage={budgetModel.expectedDailyExpensesAverage}\n                passedDays={budgetModel.daysUntilToday}\n                totalDays={budgetModel.totalDays}\n                totalBudget={budgetModel.total}\n                totalSpent={budgetModel.totalExpenses}\n            />\n            <BudgetStatsComponents categories={categories} budget={budgetModel}/>\n        </React.Fragment>);\n    } else {\n        return <CircularProgress/>\n    }\n    \n}\n\nexport default BudgetCombinedView;\n"],"sourceRoot":""}