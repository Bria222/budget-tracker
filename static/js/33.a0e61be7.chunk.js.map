{"version":3,"sources":["services/AuthApiImpl.ts"],"names":["config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","AuthApiImpl","_provider","auth","this","firebase","initializeApp","setPersistence","Auth","Persistence","LOCAL","GoogleAuthProvider","signInWithPopup","result","user","uid","signOut","Promise","resolve","reject","subs","onAuthStateChanged","undefined","error","onAuth"],"mappings":"yOAMMA,G,OAAS,CACXC,OAAQC,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,GACfC,kBAAmB,cACnBC,MAAO,uCAGEC,EAAb,WAKI,aAAe,yBAHEC,eAGH,OAFLC,UAEK,EACVC,KAAKD,KAAOE,IAASC,cAAcd,GAAQW,OAC3CC,KAAKD,KAAKI,eAAeF,IAASF,KAAKK,KAAKC,YAAYC,OACxDN,KAAKF,UAAY,IAAIG,IAASF,KAAKQ,mBAR3C,wLAY6BP,KAAKD,KAAKS,gBAAgBR,KAAKF,WAZ5D,YAYcW,EAZd,QAamBC,KAbnB,yCAcmBD,EAAOC,KAAKC,KAd/B,wQAmBeX,KAAKD,KAAKa,WAnBzB,sRAuBe,IAAIC,SAA0B,SAACC,EAASC,GAC3C,IAAMC,EAAO,EAAKjB,KAAKkB,oBACnB,SAACP,GAAD,OAAkBI,EAAPJ,EAAeA,EAAKC,SAAeO,MAC9C,SAACC,GAAD,OAAYJ,EAAOI,MACnB,kBAAOH,WA3BvB,iIAgCcI,GACN,OAAOpB,KAAKD,KAAKkB,oBAAmB,SAAUP,GACnCU,EAAPV,EAAcA,EAAKC,SAAcO,UAlC7C","file":"static/js/33.a0e61be7.chunk.js","sourcesContent":["// import { Budget, BudgetsMap } from '../interfaces';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { AuthApi } from './AuthApi';\n\n// Configure Firebase.\nconst config = {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: \"budget-tracker-e611b.firebaseapp.com\",\n    databaseURL: \"https://budget-tracker-e611b.firebaseio.com\",\n    projectId: \"budget-tracker-e611b\",\n    storageBucket: \"\",\n    messagingSenderId: \"52933279347\",\n    appId: \"1:52933279347:web:3c02df71353d7cab\"\n};\n\nexport class AuthApiImpl implements AuthApi {\n\n    private readonly _provider: firebase.auth.GoogleAuthProvider;\n    readonly auth: firebase.auth.Auth;\n\n    constructor() {\n        this.auth = firebase.initializeApp(config).auth();\n        this.auth.setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n        this._provider = new firebase.auth.GoogleAuthProvider();\n    }\n\n    async startAuth() {\n        const result = await this.auth.signInWithPopup(this._provider);\n        if (result.user) {\n            return result.user.uid;\n        }\n    }\n\n    async logout() {\n        return this.auth.signOut();\n    }\n\n    async getUserId() {\n        return new Promise<string|undefined>((resolve, reject) => {\n            const subs = this.auth.onAuthStateChanged(\n                (user) => (user ? resolve(user.uid) : resolve(undefined)),\n                (error) => (reject(error)),\n                () => (subs())\n            );\n        });\n    }\n\n    subscribe(onAuth: (uid?: string) => void) {\n        return this.auth.onAuthStateChanged(function (user) {\n            user ? onAuth(user.uid) : onAuth(undefined);\n        });\n    }\n}\n"],"sourceRoot":""}