{"version":3,"sources":["hooks/useHeaderContext.tsx","domain/utils/goBack.ts","components/buttons/buttons.tsx","components/buttons/CloseButton.tsx","components/TextInput.tsx","components/buttons/DeleteButton.tsx","components/buttons/SaveButton.tsx","components/YesNoDialog.tsx","components/categories/CategoryIcon.tsx","hooks/useIcon.tsx","components/categories/CategoryIconButton.tsx","views/categories/CategoryIconSelector.tsx","hooks/useIconNames.tsx","components/categories/CategoryInput.tsx","components/categories/CategoryForm.tsx","views/categories/AddCategory.tsx"],"names":["useHeaderContext","title","actions","props","useEffect","onTitleChange","onActions","undefined","goBack","history","path","length","replace","derivedProps","component","to","Link","onClick","console","warn","AppButton","color","icon","ButtonFab","style","position","bottom","zIndex","right","left","children","CloseButton","aria-label","CloseButtonHistory","TextInput","id","label","margin","DeleteButton","DeleteIcon","SaveButtonFab","YesNoDialog","handleNo","onClose","loc","useLoc","open","aria-labelledby","aria-describedby","question","description","autoFocus","CategoryIcon","name","useState","setIcon","btApp","useAppContext","a","getIconsStore","store","getIcon","isSubscribed","fetchIcon","useIcon","fallback","Icon","CategoryIconButton","Button","variant","CategoryIconDialogSelector","handleItemClick","value","iconNames","setIconNames","fetchIconNames","useIconNames","Dialog","selectedValue","DialogTitle","DialogContent","Grid","container","direction","justify","map","key","CategoryInput","React","dialogOpen","setDialogOpen","showDeleteDialog","setShowDeleteDialog","category","setCategory","wrap","item","onChange","event","preventDefault","target","cat","onDelete","selectedIcon","confirmed","identifier","CategoryForm","uuid","onSubmit","e","stopPropagation","type","disabled","AddCategory","getCategoriesStore","setCategories","CategoryPaths","List"],"mappings":"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","file":"static/js/17.091aac10.chunk.js","sourcesContent":["import { useEffect, ReactNode } from \"react\";\nimport { HeaderNotifierProps } from \"../routes\";\n\nexport function useHeaderContext(title: string, actions: ReactNode, props: HeaderNotifierProps) {\n    useEffect(() => {\n        props.onTitleChange(title);\n        props.onActions(actions);\n        return function () {\n            props.onTitleChange('');\n            props.onActions(undefined);\n        }\n    // eslint-disable-next-line\n    }, []);\n}\n","import { History } from \"history\";\n\n/** \n * It navigates back in history if there are enough elements in it to do so. \n * If it can't go back, it will navigate to @param path\n * */\nexport const goBack = (history: History, path = '/') => {\n    if (history.length > 2) {\n        history.goBack();\n    } else {\n        history.replace(path);\n    }\n}\n","\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { SvgIconProps } from '@material-ui/core/SvgIcon';\nimport Fab from '@material-ui/core/Fab';\nimport IconButton from '@material-ui/core/IconButton';\n\ntype Color = 'inherit' | 'primary' | 'secondary' | 'default';\ntype Type = 'button' | 'submit' | 'reset';\n\nexport interface AppButtonProps {\n    to?: string;\n    icon?: React.ComponentType<SvgIconProps>;\n    color?: Color;\n    disabled?: boolean;\n    type?: 'button' | 'submit' | 'reset';\n    variant?: 'text' | 'outlined' | 'contained';\n    replace?: boolean;\n    onClick?: (e: React.SyntheticEvent) => void;\n}\n\nfunction derivedProps (props: AppButtonProps) {\n    const derivedProps = {\n        component: props.to ? Link : undefined,\n    };\n    if (props.onClick && props.to) {\n        console.warn('Button should not have both onClick and href properties');\n    }\n    return derivedProps;\n}\n\nexport const AppButton: React.FC<AppButtonProps> = (props) => (\n    <IconButton color='inherit' {...props} {...derivedProps(props)}>\n        { props.icon && <props.icon />}\n    </IconButton>\n);\n\nexport interface ButtonFabProps {\n    disabled?: boolean;\n    type?: Type;\n    color?: Color;\n    to?: string;\n}\n\nfunction style (color?: Color) {\n    if (color === 'primary' || color === undefined) {\n        return {right: '1rem'};\n    } else {\n        return {left: '1rem'};\n    }\n}\n\nexport const ButtonFab = (props: ButtonFabProps&{children: React.ReactNode}) => (\n    <Fab style={{position: 'fixed', bottom: '1rem', zIndex: 10, ...style(props.color)}} \n        color={props.color||'secondary'}\n        {...props}\n        {...derivedProps(props)}\n        >\n        {props.children}\n    </Fab>);\n\n","\nimport * as React from 'react';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { goBack } from '../../domain/utils/goBack';\nimport { History } from 'history';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport const CloseButton: React.FC<{onClick: () => void}> = (props) => (\n    <IconButton \n        color='inherit'\n        aria-label='Close' \n        {...props} \n        onClick={props.onClick}>\n        <CloseIcon/>\n    </IconButton>\n);\n\nexport const CloseButtonHistory: React.FC<{history: History, to?: string}> = (props) => {\n    \n    function handleBack () {\n        goBack(props.history, props.to);\n    }\n\n    return (\n        <CloseButton onClick={handleBack}/>\n    );\n}\n","import * as React from 'react';\nimport TextField, { TextFieldProps } from \"@material-ui/core/TextField\";\n\nexport const TextInput = (props: TextFieldProps) => (\n    <TextField\n        id={`input-field-${props.label}`}\n        style={{ margin: 8 }}\n        margin='dense'            \n        {...props}\n    />);","\nimport * as React from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { AppButtonProps, AppButton } from './buttons';\n\nexport const DeleteButton = (props: AppButtonProps) => (\n    <AppButton icon={DeleteIcon} aria-label='Delete' {...props}/>\n);\n","\n\nimport * as React from 'react';\nimport SaveIcon from '@material-ui/icons/Save';\nimport { ButtonFab, ButtonFabProps, AppButtonProps, AppButton } from './buttons';\n\n\nexport const SaveButtonFab: React.FC<ButtonFabProps> = (props) => (\n    <ButtonFab aria-label='Save' {...props} >\n        <SaveIcon />\n    </ButtonFab>\n);\n\nexport const SaveButton: React.FC<AppButtonProps> = (props) => (\n    <AppButton icon={SaveIcon} aria-label='Save' {...props}/>\n);\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { useLoc } from '../hooks/useLoc';\n\ninterface YesNoDialogProps {\n    open: boolean,\n    question: string,\n    description?: string,\n    onClose: (accept: boolean) => void\n};\n\nexport const YesNoDialog: React.FC<YesNoDialogProps> = (props) => {\n    const titleId = 'y-n-dialog-title';\n    const descriptionId = 'y-n-dialog-description';\n\n    const handleNo = () => (props.onClose(false));\n    const handleYes = () => (props.onClose(true));\n    const loc = useLoc();\n\n    return (\n        <Dialog\n            open={props.open}\n            onClose={handleNo}\n            aria-labelledby={titleId}\n            aria-describedby={descriptionId}\n        >\n            <DialogTitle id={titleId}>{props.question}</DialogTitle>\n            {props.description && <DialogContent>\n                <DialogContentText id={descriptionId}>{props.description}</DialogContentText>\n            </DialogContent>}\n            <DialogActions>\n                <Button onClick={handleNo} color=\"primary\">{loc('Disagree')}</Button>\n                <Button onClick={handleYes} color=\"primary\" autoFocus>{loc('Agree')}</Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import * as React from 'react';\nimport { useIcon } from '../../hooks/useIcon';\n\ninterface CategoryIconProp {\n    name: string;\n};\n\nexport const CategoryIcon: React.FC<CategoryIconProp> = (props) => {\n\n    const {name} = props;\n    const icon = useIcon(name);\n\n    return (\n        <React.Suspense fallback={name}>\n            { icon ? <icon.Icon style={{color: icon.color}}/> : null}\n        </React.Suspense>\n    );\n}\n\nexport default CategoryIcon;\n","import { useState, useEffect } from 'react';\nimport { ColoredLazyIcon } from '../domain/stores/interfaces';\nimport { useAppContext } from '../contexts/AppContext';\n\nexport function useIcon(name: string) {\n    const [icon, setIcon] = useState<ColoredLazyIcon>();\n    const btApp = useAppContext();\n\n    useEffect(() => {\n        async function fetchIcon () {\n            const store = await btApp.getIconsStore();\n            setIcon(store.getIcon(name));\n        }\n\n        let isSubscribed = true;\n        if (isSubscribed) {\n            fetchIcon();\n        }\n        \n        return () => {isSubscribed = false};\n    }, [name, btApp]);\n\n    return icon;\n}","import * as React from 'react';\nimport Button from '@material-ui/core/Button';\nimport CategoryIcon from './CategoryIcon';\n\ninterface CategoryIconButtonProp {\n    name: string;\n    onClick: (name: string) => void;\n};\n\nexport const CategoryIconButton: React.FC<CategoryIconButtonProp> = (props) => {\n\n    const {name} = props;\n\n    return (\n        <Button onClick={() => props.onClick(name)} variant='outlined'>\n            <CategoryIcon name={name}/>\n        </Button>\n    );\n}\n\nexport default CategoryIconButton;\n","import * as React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Grid from '@material-ui/core/Grid';\nimport { CategoryIconButton } from '../../components/categories/CategoryIconButton';\nimport { useIconNames } from '../../hooks/useIconNames';\n\ninterface CategoryIconDialogSelectorProps {\n    selectedValue: string;\n    open: boolean;\n    onClose: (selectedValue: string) => void;\n};\n\nconst titleId = 'dialog-title';\n\nexport const CategoryIconDialogSelector: React.FC<CategoryIconDialogSelectorProps> = (props) => {\n\n    function handleClose() {\n        props.onClose(props.selectedValue);\n    }\n\n    function handleItemClick(value: string) {\n        props.onClose(value);\n    }\n\n    const iconNames = useIconNames();\n\n    return (\n        <Dialog\n            onClose={handleClose}\n            aria-labelledby={titleId} open={props.open}>\n            <DialogTitle id={titleId}>Select icon for category</DialogTitle>\n            <DialogContent>\n                <Grid container direction='row' justify='center'>\n                    {iconNames && iconNames.map(name =>\n                        <CategoryIconButton\n                            onClick={handleItemClick}\n                            name={name}\n                            key={`icon-${name}`} />)}\n                </Grid>\n            </DialogContent>\n        </Dialog>\n    );\n}\n\nexport default CategoryIconDialogSelector;\n","import { useState, useEffect } from 'react';\nimport { useAppContext } from '../contexts/AppContext';\n\nexport function useIconNames() {\n    const [iconNames, setIconNames] = useState<string[]>();\n    const btApp = useAppContext();\n    \n    useEffect(() => {\n        async function fetchIconNames () {\n            const store = await btApp.getIconsStore();\n            setIconNames(store.iconNames);\n        }\n\n        let isSubscribed = true;\n        if (isSubscribed) {\n            fetchIconNames();\n        }\n        \n        return () => {isSubscribed = false};\n\n    }, [btApp]);\n\n    return iconNames;\n}","import * as React from 'react';\n\nimport Grid, { GridDirection } from '@material-ui/core/Grid';\nimport { TextInput } from '../TextInput';\nimport CategoryIconButton from './CategoryIconButton';\nimport CategoryIconDialogSelector from '../../views/categories/CategoryIconSelector';\nimport { Category } from '../../api';\nimport { DeleteButton } from '../buttons/DeleteButton';\nimport { YesNoDialog } from '../YesNoDialog';\nimport { useLoc } from '../../hooks/useLoc';\n\ninterface CategoryInputProps {\n    direction?: GridDirection;\n    onDelete?: (id: string) => void;\n    onChange: (category: Category) => void;\n    category: Category;\n}\n\nexport const CategoryInput: React.FC<CategoryInputProps> = (props) => {\n    const [dialogOpen, setDialogOpen] = React.useState(false);\n    const [showDeleteDialog, setShowDeleteDialog] = React.useState(false);\n    const [category, setCategory] = React.useState<Category>(props.category);\n    const loc = useLoc();\n    \n    const handleChangeName = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault();\n        const name = event.target.value;\n        const cat = { ...category, name };\n        setCategory(cat);\n        props.onChange(cat);\n    }\n\n    const handleClickChangeIcon = () => {\n        setDialogOpen(true);\n    }\n\n    const handleCloseDialog = (selectedIcon: string) => {\n        if (category.icon !== selectedIcon) {\n            const cat = {...category, icon: selectedIcon };\n            setCategory(cat);\n            props.onChange(cat);\n        }\n        setDialogOpen(false);        \n    }\n\n    function handleConfirmDelete (confirmed: boolean) {\n        setShowDeleteDialog(false);\n        if (props.onDelete && confirmed) {\n            props.onDelete(props.category.identifier);    \n        }\n    }\n\n    function handleShowDeleteDialog () {\n        setShowDeleteDialog(true);\n    }\n\n    return (\n        <React.Fragment>\n            <Grid container direction={props.direction || 'row'} wrap='nowrap'>\n                <Grid item>\n                    <TextInput \n                        label={ props.direction === 'row' ? '' : loc('Name') }\n                        value={ category.name }\n                        onChange={ handleChangeName }/>\n                </Grid>\n                <Grid item>\n                    <CategoryIconButton \n                        name={ category.icon } \n                        onClick={ handleClickChangeIcon } />\n                </Grid>\n                { props.onDelete && <Grid item><DeleteButton onClick={handleShowDeleteDialog}/></Grid> }\n            </Grid>\n            <CategoryIconDialogSelector \n                onClose={handleCloseDialog} \n                open={dialogOpen} \n                selectedValue={category.icon}/>\n            <YesNoDialog \n                open={showDeleteDialog} \n                onClose={handleConfirmDelete}\n                question={`Do your really want to delete \"${props.category.name}\" category?`}\n                description='The expenses assigned to this category will be assigned to default.'/>\n        </React.Fragment>\n    );\n\n\n}\n\nexport default CategoryInput;","import * as React from 'react';\nimport { Category } from '../../api';\nimport CategoryInput from './CategoryInput';\nimport { SaveButtonFab } from '../buttons/SaveButton';\nimport { uuid } from '../../domain/utils/uuid';\n\ninterface CategoryFormProps {\n    onSubmit: (category: Category) => void,\n    category?: Category;\n}\n\nexport const CategoryForm: React.FC<CategoryFormProps> = (props) => {\n\n    const [category, setCategory] = React.useState<Category>(\n        props.category ||\n        {name: '', icon: 'Label', identifier: uuid()});\n    \n    const handleSave = (e: React.SyntheticEvent) => {\n        e.stopPropagation();\n        e.preventDefault();\n        props.onSubmit(category);\n    }\n    \n    return (\n        <form onSubmit={handleSave}>\n            <CategoryInput category={category} onChange={setCategory} />\n            <SaveButtonFab type='submit' color='primary' disabled={category.name === ''} />\n        </form>);\n}\n","import * as React from 'react';\nimport { RouterProps } from 'react-router';\nimport { Category } from '../../api';\nimport { CategoryForm } from '../../components/categories/CategoryForm';\nimport { goBack } from '../../domain/utils/goBack';\nimport { CategoryPaths } from '../../domain/paths/CategoryPaths';\nimport { CloseButtonHistory } from '../../components/buttons/CloseButton';\nimport { HeaderNotifierProps } from '../../routes';\nimport { useAppContext } from '../../contexts/AppContext';\nimport { useHeaderContext } from '../../hooks/useHeaderContext';\nimport { useLoc } from '../../hooks/useLoc';\n\nexport const AddCategory: React.FC<RouterProps&HeaderNotifierProps> = (props) => {\n    \n    const btApp = useAppContext();\n    const loc = useLoc();\n\n    useHeaderContext(loc('Add category'), <CloseButtonHistory history={props.history}/>, props);\n\n    function close () {\n        goBack(props.history, CategoryPaths.List);\n    }\n\n    async function handleSave (category: Category) {\n        await (await btApp.getCategoriesStore()).setCategories([category]);\n        close();\n    }\n    \n    return <CategoryForm onSubmit={handleSave}/>;\n}\n\nexport default AddCategory;"],"sourceRoot":""}