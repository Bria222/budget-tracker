{"version":3,"sources":["hooks/useHeaderContext.tsx","components/buttons/buttons.tsx","domain/DateDay.ts","hooks/useBudgetsStore.tsx","domain/date.ts","hooks/useBudgetModel.tsx","components/buttons/DeleteButton.tsx","components/YesNoDialog.tsx","components/buttons/AddButton.tsx","components/VersusInfo.tsx","domain/utils/getCurrencyWithSymbol.ts","components/expenses/SubHeader.tsx","components/Link.tsx","components/budgets/BudgetQuickStats.tsx","components/buttons/ImportExportButton.tsx","components/expenses/CalendarDay.tsx","components/expenses/CalendarMonth.tsx","components/expenses/CalendarYear.tsx","components/expenses/ExpensesCalendar.tsx","views/budgets/Budget.tsx"],"names":["useHeaderContext","title","actions","props","useEffect","onTitleChange","onActions","undefined","derivedProps","component","to","Link","onClick","console","warn","AppButton","color","icon","ButtonFab","style","position","bottom","zIndex","right","left","children","DateDay","date","Date","_date","this","getFullYear","getMonth","getDate","days","setDate","months","setMonth","years","setFullYear","getTime","isToday","Intl","DateTimeFormat","day","month","year","format","timestampMs","now","useBudgetsStore","useState","store","setStore","btApp","useAppContext","a","getBudgetsStore","isSubscribed","fetchStore","observer","onStorageDataChanged","storage","addObserver","deleteObserver","DAY_MS","dateDiff","from","Math","floor","getISODateString","toISOString","slice","monthToString","monthYearToString","useBudgetModel","budgetId","budgetModel","setBudgetModel","getBudgetModel","fetchBudget","DeleteButton","DeleteIcon","aria-label","YesNoDialog","handleNo","onClose","loc","useLoc","open","aria-labelledby","aria-describedby","id","question","description","autoFocus","AddButton","percentage","spent","total","FieldDataView","variant","noWrap","text","secondary","VersusInfo","exceeded","container","justify","direction","round","value","formatters","getCurrencyWithSymbol","amount","currency","NumberFormat","getNumberFormatter","SubHeader","leftText","rightText","RouterLink","BudgetQuickStats","marginBottom","totalBudget","totalSpent","marginTop","totalDays","passedDays","dailyAverage","expectedDailyAverage","urlStats","size","ImportExportButton","ImportExportIcon","CalendarDay","buttonRef","React","current","focus","Button","onDaySelected","ref","Box","p","Typography","expected","toFixed","CalendarMonth","totalByMonth","getTotalExpenses","toLocaleString","linkView","montString","path","BudgetPath","identifier","pathExpensesByDay","daysView","reverse","map","expectedDailyExpensesAverage","key","Card","CardHeader","CardContent","CalendarYear","expenseGroups","url","getMonths","getDays","ExpensesCalendar","BudgetView","match","params","showConfirmDialog","setShowConfirmDialog","deletionConfirmed","deleteBudget","history","replace","base","Error","name","EditIcon","pathEdit","pathExport","average","daysUntilToday","info","totalExpenses","pathStats","push","numberOfExpenses","pathAddExpense","CircularProgress"],"mappings":"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","file":"static/js/10.d3b007d2.chunk.js","sourcesContent":["import { useEffect, ReactNode } from \"react\";\nimport { HeaderNotifierProps } from \"../routes\";\n\nexport function useHeaderContext(title: string, actions: ReactNode, props: HeaderNotifierProps) {\n    useEffect(() => {\n        props.onTitleChange(title);\n        props.onActions(actions);\n        return function () {\n            props.onTitleChange('');\n            props.onActions(undefined);\n        }\n    // eslint-disable-next-line\n    }, []);\n}\n","\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { SvgIconProps } from '@material-ui/core/SvgIcon';\nimport Fab from '@material-ui/core/Fab';\nimport IconButton from '@material-ui/core/IconButton';\n\ntype Color = 'inherit' | 'primary' | 'secondary' | 'default';\ntype Type = 'button' | 'submit' | 'reset';\n\nexport interface AppButtonProps {\n    to?: string;\n    icon?: React.ComponentType<SvgIconProps>;\n    color?: Color;\n    disabled?: boolean;\n    type?: 'button' | 'submit' | 'reset';\n    variant?: 'text' | 'outlined' | 'contained';\n    replace?: boolean;\n    onClick?: (e: React.SyntheticEvent) => void;\n}\n\nfunction derivedProps (props: AppButtonProps) {\n    const derivedProps = {\n        component: props.to ? Link : undefined,\n    };\n    if (props.onClick && props.to) {\n        console.warn('Button should not have both onClick and href properties');\n    }\n    return derivedProps;\n}\n\nexport const AppButton: React.FC<AppButtonProps> = (props) => (\n    <IconButton color='inherit' {...props} {...derivedProps(props)}>\n        { props.icon && <props.icon />}\n    </IconButton>\n);\n\nexport interface ButtonFabProps {\n    disabled?: boolean;\n    type?: Type;\n    color?: Color;\n    to?: string;\n}\n\nfunction style (color?: Color) {\n    if (color === 'primary' || color === undefined) {\n        return {right: '1rem'};\n    } else {\n        return {left: '1rem'};\n    }\n}\n\nexport const ButtonFab = (props: ButtonFabProps&{children: React.ReactNode}) => (\n    <Fab style={{position: 'fixed', bottom: '1rem', zIndex: 10, ...style(props.color)}} \n        color={props.color||'secondary'}\n        {...props}\n        {...derivedProps(props)}\n        >\n        {props.children}\n    </Fab>);\n\n","import { YMD } from \"../api\";\n\nexport class DateDay implements YMD {\n    private readonly _date: Date;\n\n    constructor(date = new Date()) {\n        this._date = new Date(\n            date.getFullYear(), \n            date.getMonth(), \n            date.getDate());\n    }\n\n    clone() {\n        return new DateDay(this._date);\n    }\n\n    get year () {\n        return this._date.getFullYear();\n    }\n\n    get month () {\n        return this._date.getMonth();\n    }\n\n    get day () {\n        return this._date.getDate();\n    }\n\n    static fromTimeMs (timestampMs: number) {\n        return new DateDay(new Date(timestampMs));\n    }\n\n    static fromYMD (date: YMD) {\n        return new DateDay(new Date(date.year, date.month, date.day));\n    }\n\n    get timeMs () {\n        return this._date.getTime();\n    }\n    \n    get isToday() {\n        return DateDay.isToday(this);\n    }\n\n    /**\n     * @returns current object instance with days added to previous date\n     */\n    addDays (days: number) {\n        this._date.setDate(this._date.getDate() + days);\n        return this;\n    }\n\n    /**\n     * @returns current object instance with months added to previous date\n     */\n    addMonths (months: number) {\n        this._date.setMonth(this._date.getMonth() + months);\n        return this;\n    }\n\n    /**\n     * @returns current object instance with years added to previous date\n     */\n    addYears (years: number) {\n        this._date.setFullYear(this._date.getFullYear() + years);\n        return this;\n    }\n\n    static isToday(date: YMD) {\n        const now = new Date();\n        return date.day === now.getDate() && \n            date.month === now.getMonth() && \n            date.year === now.getFullYear();\n    }\n\n    get shortString () {\n        const dt = new Intl.DateTimeFormat(\n            undefined, \n            {day: 'numeric', month: 'long', year: 'numeric'});\n        return dt.format(this._date);\n    }\n\n    equals(date: DateDay) {\n        return this._date.getTime() === date._date.getTime();\n    }\n}","import { useState, useEffect } from 'react';\nimport { BudgetsStore } from '../domain/stores/interfaces';\nimport { StorageObserver } from '../services/storage/StorageApi';\nimport { useAppContext } from '../contexts/AppContext';\n\nexport function useBudgetsStore() {\n    const [store, setStore] = useState<BudgetsStore>();\n    const btApp = useAppContext();\n\n    useEffect(() => {\n        async function fetchStore () {\n            setStore(await btApp.getBudgetsStore());\n        }\n\n        let isSubscribed = true;\n        if (isSubscribed) {\n            fetchStore();\n        }\n\n        return () => { isSubscribed = false };\n        \n    }, [store, btApp]);\n\n    useEffect(() => {\n        let isSubscribed = true;\n        const observer: StorageObserver = {onStorageDataChanged: () => {\n            setStore(undefined);\n        }};\n\n        if (isSubscribed) {\n            btApp.storage.addObserver(observer);\n        }\n\n        return () => {\n            isSubscribed = false;\n            btApp.storage.deleteObserver(observer);\n        };\n    }, [btApp]);\n\n    return store;\n}","\nconst DAY_MS = 1000*60*60*24;\n\n/**\n * Get difference between 2 dates in days, including from and to dates.\n * @param from - Starting period timestamp\n * @param to - Ending period timestamp\n */\nexport function dateDiff(from: number, to: number) {\n    return Math.floor((to - from)/DAY_MS) + 1;\n}\n\n/** \n * @returns Date (without time) as string type in ISO format\n */\nexport function getISODateString (date = new Date()) {\n    return date.toISOString().slice(0,10);\n}\n\n/** \n * @returns month name from Date input\n */\nexport function monthToString (month: number) {\n    const dt = new Intl.DateTimeFormat(undefined, {month: 'long'});\n    return dt.format(new Date(2000, month, 1));\n}\n\n/** \n * @returns month and year name from Date input\n */\nexport function monthYearToString (year: number, month: number) {\n    const dt = new Intl.DateTimeFormat(undefined, {month: 'long', year: 'numeric'});\n    return dt.format(new Date(year, month, 1));\n}\n","import { useState, useEffect } from 'react';\nimport { BudgetModel } from '../domain/BudgetModel';\nimport { useBudgetsStore } from './useBudgetsStore';\nimport { BudgetsStore } from '../domain/stores/interfaces';\n\nexport function useBudgetModel(budgetId: string) {\n    const store = useBudgetsStore();\n    const [budgetModel, setBudgetModel] = useState<BudgetModel>();\n\n    useEffect(() => {\n        async function fetchBudget (store: BudgetsStore) {\n            setBudgetModel(await store.getBudgetModel(budgetId));\n        }\n        if (budgetId) {\n            let isSubscribed = true;\n\n            if (isSubscribed) {\n                if (store) {\n                    fetchBudget(store);\n                } else {\n                    setBudgetModel(undefined);\n                }\n            }\n            return () => {isSubscribed = false};\n        }\n        \n    }, [budgetId, store]);\n\n    return budgetModel;\n}","\nimport * as React from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { AppButtonProps, AppButton } from './buttons';\n\nexport const DeleteButton = (props: AppButtonProps) => (\n    <AppButton icon={DeleteIcon} aria-label='Delete' {...props}/>\n);\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { useLoc } from '../hooks/useLoc';\n\ninterface YesNoDialogProps {\n    open: boolean,\n    question: string,\n    description?: string,\n    onClose: (accept: boolean) => void\n};\n\nexport const YesNoDialog: React.FC<YesNoDialogProps> = (props) => {\n    const titleId = 'y-n-dialog-title';\n    const descriptionId = 'y-n-dialog-description';\n\n    const handleNo = () => (props.onClose(false));\n    const handleYes = () => (props.onClose(true));\n    const loc = useLoc();\n\n    return (\n        <Dialog\n            open={props.open}\n            onClose={handleNo}\n            aria-labelledby={titleId}\n            aria-describedby={descriptionId}\n        >\n            <DialogTitle id={titleId}>{props.question}</DialogTitle>\n            {props.description && <DialogContent>\n                <DialogContentText id={descriptionId}>{props.description}</DialogContentText>\n            </DialogContent>}\n            <DialogActions>\n                <Button onClick={handleNo} color=\"primary\">{loc('Disagree')}</Button>\n                <Button onClick={handleYes} color=\"primary\" autoFocus>{loc('Agree')}</Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","\nimport * as React from 'react';\nimport AddIcon from '@material-ui/icons/Add';\nimport { ButtonFabProps, ButtonFab } from './buttons';\n\nexport const AddButton: React.FC<ButtonFabProps> = (props) => (\n    <ButtonFab aria-label='Add' {...props} color='primary'>\n        <AddIcon />\n    </ButtonFab>);","import * as React from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\ninterface VersusInfoProps {\n    total: number;\n    spent: number;\n    title: string;\n}\n\nfunction percentage (spent: number, total: number) {\n    if (total) {\n        return (spent / total) * 100;\n    }\n    return 0;\n}\n\ndeclare type FType = number|string;\n\nconst FieldDataView: React.FC<{text:FType, secondary?: FType}> = (props) => (\n        <Typography variant='body2' noWrap>\n            {props.text} \n            { props.secondary && \n                <Typography variant='caption' color='textSecondary'>\n                    {props.secondary}</Typography> }\n        </Typography>\n\n);\n\nexport const VersusInfo: React.FC<VersusInfoProps> = (props) => {\n    const {spent, total, title} = props;\n\n    const exceeded = spent > total;\n\n    return (<React.Fragment>\n        <Grid container justify='space-between' direction='row'>\n            <FieldDataView text={Math.round(spent)}/>\n            <FieldDataView text={title} secondary={` (${Math.round(total)})`}/>\n            <FieldDataView text={Math.round(total - spent)}/>\n        </Grid>\n        <LinearProgress \n            color={exceeded ? 'secondary' : 'primary'}\n            variant='determinate' \n            value={ exceeded ? 100 : percentage(spent, total) }/>\n    </React.Fragment>);\n}\n","import { ObjectMap } from \"../../api\";\n\nconst formatters: ObjectMap<Intl.NumberFormat> = {};\n\nfunction getNumberFormatter(currency: string) {\n    if (!(currency in formatters)) {\n        formatters[currency] = new Intl.NumberFormat(undefined, { \n            style: 'currency', \n            currency,\n        });\n    }\n    return formatters[currency];\n}\n\nexport function getCurrencyWithSymbol (amount: number, currency: string) {\n    return getNumberFormatter(currency).format(amount);\n}\n","import * as React from 'react';\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\n\ninterface SubHeaderProps {\n    leftText: React.ReactNode;\n    rightText: string|number;\n    variant: 'h3'|'h4'|'h5'|'h6'|'body1';\n}\n\nexport const SubHeader: React.FC<SubHeaderProps> = (props) => (\n    <Grid container justify='space-between'>\n        <Typography variant={props.variant} color='textPrimary'>\n            {props.leftText}\n        </Typography>\n        <Typography variant={props.variant} color='textPrimary'>\n            {props.rightText}\n        </Typography>\n    </Grid>\n);\n","import React from 'react';\nimport {Link as RouterLink} from 'react-router-dom';\nimport MuiLink from '@material-ui/core/Link';\n\nexport const Link: React.FC<{to: string}> = (props) => (\n    <MuiLink component={RouterLink} to={props.to}>{props.children}</MuiLink>\n);\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { VersusInfo } from '../VersusInfo';\nimport CardActions from '@material-ui/core/CardActions';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport { useLoc } from '../../hooks/useLoc';\n\ninterface BudgetQuickStatsProps {\n    totalBudget: number,\n    totalSpent: number,\n    totalDays: number,\n    passedDays: number,\n    expectedDailyAverage: number,\n    dailyAverage?: number,\n    urlStats?: string;\n}\n\nconst spacing = '0.5rem';\n\nexport const BudgetQuickStats: React.FC<BudgetQuickStatsProps> = (props) => {\n    const loc = useLoc();\n    \n    return <Card style={{ marginBottom: '1rem' }}>\n        <CardContent>\n            <VersusInfo\n                total={props.totalBudget}\n                spent={props.totalSpent}\n                title={loc('Spent')} />\n            <Box marginTop={spacing}>\n                <VersusInfo\n                    total={props.totalDays}\n                    spent={props.passedDays}\n                    title={loc('Days')} /></Box>\n            {props.dailyAverage !== undefined &&\n                <Box marginTop={spacing}>\n                    <VersusInfo\n                        total={props.expectedDailyAverage}\n                        spent={props.dailyAverage}\n                        title={loc('Daily Average')} /></Box>}\n        </CardContent>\n        {props.urlStats && <CardActions>\n            <Button\n                size='small'\n                component={Link}\n                color='primary'\n                to={props.urlStats}>\n                {loc('More Stats')}\n            </Button>\n        </CardActions>}\n    </Card>;\n}","\nimport * as React from 'react';\nimport ImportExportIcon from '@material-ui/icons/ImportExport';\nimport { AppButtonProps, AppButton } from './buttons';\n\nexport const ImportExportButton: React.FC<AppButtonProps> = (props) => (\n    <AppButton icon={ImportExportIcon} aria-label='Import' {...props}/>\n);\n","import * as React from \"react\";\nimport { YMD } from \"../../api\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport { DateDay } from \"../../domain/DateDay\";\n\ninterface CalendarDayProps {\n    total: number; \n    expected: number; \n    budgetId: string;\n    onDaySelected: (day: YMD) => void;\n    date: YMD;\n};\n\nexport const CalendarDay: React.FC<CalendarDayProps> = (props) => {\n\n    const isToday = DateDay.isToday(props.date);\n\n    function handleDaySelected () {\n        props.onDaySelected(props.date);\n    }\n\n    const buttonRef = React.useRef<HTMLButtonElement|null>(null);\n\n    React.useEffect(() => {\n        if (buttonRef && buttonRef.current && isToday) {\n            buttonRef.current.focus();\n        }\n    });\n\n    return (\n        <Button \n            variant={isToday ? 'outlined' : 'text'} \n            onClick={handleDaySelected}\n            ref={isToday ? buttonRef : null} \n            >\n            <Box p={1}>\n                <Typography color='textPrimary'>{props.date.day}</Typography>\n                <Typography variant='caption' color={props.total > props.expected ? 'error' : 'textSecondary'}>{props.total.toFixed()}</Typography>\n            </Box>\n        </Button>);\n}","import * as React from \"react\";\nimport { YMD } from \"../../api\";\nimport { monthToString } from \"../../domain/date\";\nimport { BudgetModel } from \"../../domain/BudgetModel\";\nimport { SubHeader } from \"./SubHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Card from \"@material-ui/core/Card\";\nimport { CalendarDay } from \"./CalendarDay\";\nimport { BudgetPath } from \"../../domain/paths/BudgetPath\";\nimport { Link } from \"../Link\";\n\ninterface CalendarMonthProps {\n    days: Iterable<number>;\n    year: number;\n    month: number;\n    onDaySelected: (day: YMD) => void;\n    budgetModel: BudgetModel;\n}\n\nexport const CalendarMonth: React.FC<CalendarMonthProps> = (props) => {\n    const { year, month, budgetModel, days } = props;\n    const total = React.useMemo(() => {\n        const totalByMonth = budgetModel.getTotalExpenses(year, month);\n        return Math.round(totalByMonth).toLocaleString();\n    }, [budgetModel, year, month]);\n\n    const linkView = React.useMemo(() => {\n        const montString = monthToString(month);\n        if (budgetModel) {\n            const path = new BudgetPath(budgetModel.identifier).pathExpensesByDay(year, month);\n            return <Link to={path}>{montString}</Link>;\n        } else {\n            return monthToString;\n        }\n    }, [budgetModel, month, year]);\n\n    const daysView = React.useMemo(() => (\n        [...days]\n            .reverse()\n            .map((day) => (\n                <CalendarDay\n                    onDaySelected={props.onDaySelected}\n                    expected={budgetModel.expectedDailyExpensesAverage}\n                    total={budgetModel.getTotalExpenses(year, month, day)}\n                    budgetId={budgetModel.identifier}\n                    date={{ year, month, day }}\n                    key={`calendar-day-${year}-${month}-${day}`} />))\n    // eslint-disable-next-line\n    ), [days, budgetModel, year, month]);\n\n    return (\n        <Card key={`expenses-month-${year}-${month}`} style={{ marginBottom: '1rem' }}>\n            <CardHeader\n                title={<SubHeader\n                    leftText={linkView}\n                    rightText={total}\n                    variant='h6' />} />\n            <CardContent>\n                { daysView }\n            </CardContent>\n        </Card >);\n}\n","import * as React from \"react\";\nimport { YMD } from \"../../api\";\nimport { BudgetModel } from \"../../domain/BudgetModel\";\nimport { SubHeader } from \"./SubHeader\";\nimport { CalendarMonth } from \"./CalendarMonth\";\nimport { getCurrencyWithSymbol } from \"../../domain/utils/getCurrencyWithSymbol\";\nimport { BudgetPath } from \"../../domain/paths/BudgetPath\";\nimport { Link } from \"../Link\";\n\ninterface CalendarYearProps {\n    year: number;\n    budgetModel: BudgetModel;\n    onDaySelected: (day: YMD) => void;\n}\n\nexport const CalendarYear: React.FC<CalendarYearProps> = (props) => {\n\n    const {budgetModel, year} = props;\n    const {expenseGroups, currency, identifier} = budgetModel;\n    const url = new BudgetPath(identifier);\n\n    return (\n    <React.Fragment>\n        {[...expenseGroups.getMonths(year)].reverse().map((month) => (\n            <CalendarMonth\n                days={expenseGroups.getDays(year, month)}\n                key={`calendar-month-${year}-${month}`} \n                budgetModel={budgetModel}\n                onDaySelected={props.onDaySelected}\n                year={year} month={month}/>    \n        ))}\n        <SubHeader \n            variant='h5' \n            leftText={<Link to={url.pathExpensesByDay(year)}>{year}</Link>} \n            rightText={getCurrencyWithSymbol(budgetModel.getTotalExpenses(year), currency)}/>\n    </React.Fragment>);\n}\n","import * as React from \"react\";\nimport { YMD } from \"../../api\";\nimport { BudgetModel } from \"../../domain/BudgetModel\";\nimport { CalendarYear } from \"./CalendarYear\";\n\ninterface ExpensesCalendarProps {\n    budgetModel: BudgetModel;\n    onDaySelected: (day: YMD) => void;\n}\n\nexport const ExpensesCalendar: React.FC<ExpensesCalendarProps> = (props) => {\n\n    const {budgetModel} = props;\n\n    return <React.Fragment>\n        {\n            [...budgetModel.expenseGroups.years].reverse()\n                .map(year => (\n                    <CalendarYear \n                        budgetModel={budgetModel}\n                        key={`calendar-year-${year}`}\n                        year={year} \n                        onDaySelected={props.onDaySelected} />\n                ))\n        }\n    </React.Fragment>;\n}\n","import * as React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { AppButton } from \"../../components/buttons/buttons\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from \"@material-ui/core/Typography\";\nimport { BudgetQuickStats } from \"../../components/budgets/BudgetQuickStats\";\nimport { YesNoDialog } from \"../../components/YesNoDialog\";\nimport { ExpensesCalendar } from \"../../components/expenses/ExpensesCalendar\";\nimport { YMD } from \"../../api\";\nimport EditIcon from '@material-ui/icons/Edit';\nimport { DeleteButton } from \"../../components/buttons/DeleteButton\";\nimport { AddButton } from \"../../components/buttons/AddButton\";\nimport { BudgetPath } from \"../../domain/paths/BudgetPath\";\nimport { useBudgetModel } from \"../../hooks/useBudgetModel\";\nimport { ImportExportButton } from \"../../components/buttons/ImportExportButton\";\nimport { HeaderNotifierProps } from \"../../routes\";\nimport { useAppContext } from \"../../contexts/AppContext\";\nimport { useLoc } from \"../../hooks/useLoc\";\nimport { useHeaderContext } from \"../../hooks/useHeaderContext\";\n\ninterface BudgetViewProps extends RouteComponentProps<{ budgetId: string }>, HeaderNotifierProps {}\n\nexport const BudgetView: React.FC<BudgetViewProps> = (props) => {\n\n    const {budgetId} = props.match.params;\n    const {onTitleChange} = props;\n\n    const url = new BudgetPath(budgetId);\n\n    const [showConfirmDialog, setShowConfirmDialog] = React.useState(false);\n\n    const budgetModel = useBudgetModel(budgetId);\n    \n    const btApp = useAppContext();\n    const loc = useLoc();\n\n    React.useEffect(() => {\n        budgetModel && onTitleChange(budgetModel.name);\n    },\n    // eslint-disable-next-line\n    [budgetModel]);\n\n    function handleDeleteRequest () {\n        setShowConfirmDialog(true);\n    }\n\n    useHeaderContext('...', [\n        <AppButton key='cb-edit-budget' icon={EditIcon} aria-label={loc('Edit budget')} to={url.pathEdit}/>,\n        <ImportExportButton key='cb-export-budget' to={url.pathExport}/>,\n        <DeleteButton onClick={handleDeleteRequest} key='cb-delete-budget'/>\n    ], props);\n\n    function handleSelectedDay (date: YMD) {\n        const {year, month, day} = date;\n        props.history.push(url.pathExpensesByDay(year, month, day));\n    }\n\n    async function handleDelete(deletionConfirmed: boolean) {\n        if (budgetModel) {\n            setShowConfirmDialog(false);\n            if (deletionConfirmed) {\n                const store = await btApp.getBudgetsStore()\n                await store.deleteBudget(budgetModel.identifier);\n                props.history.replace(BudgetPath.base);\n            }\n        } else {\n            throw new Error('Budget is undefined');\n        }\n    }\n\n    if (budgetModel) {\n        return (\n            <React.Fragment>\n                <React.Fragment>\n                    <BudgetQuickStats \n                        dailyAverage={budgetModel.average}\n                        expectedDailyAverage={budgetModel.expectedDailyExpensesAverage}\n                        passedDays={budgetModel.daysUntilToday}\n                        totalDays={budgetModel.totalDays}\n                        totalBudget={budgetModel.info.total}\n                        totalSpent={budgetModel.totalExpenses}\n                        urlStats={url.pathStats}\n                        /> \n                    { budgetModel.expenseGroups && \n                    <ExpensesCalendar \n                        budgetModel={budgetModel} \n                        onDaySelected={handleSelectedDay} /> }\n                </React.Fragment> \n                { budgetModel.numberOfExpenses === 0 && \n                    <Typography variant='h5' color='textSecondary'>{loc('No expenses')}</Typography> }\n                <AddButton to={url.pathAddExpense} />\n                <YesNoDialog \n                    open={showConfirmDialog} \n                    onClose={handleDelete}\n                    question={loc('Delete budget?')}\n                    description={loc('Expenses will be deleted')}/>\n            </React.Fragment>\n        );\n    }\n    return <CircularProgress/>;\n}\n\nexport default BudgetView;\n"],"sourceRoot":""}