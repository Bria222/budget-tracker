{"version":3,"sources":["domain/utils/goBack.ts","components/buttons/buttons.tsx","components/buttons/CloseButton.tsx","hooks/useBudgetsStore.tsx","domain/date.ts","components/buttons/AddButton.tsx","components/buttons/ImportExportButton.tsx","components/budgets/BudgetListItem.tsx","views/budgets/BudgetList.tsx","hooks/useBudgetsIndex.tsx"],"names":["goBack","history","path","length","replace","derivedProps","props","component","to","Link","undefined","onClick","console","warn","AppButton","color","icon","ButtonFab","style","position","bottom","zIndex","right","left","children","CloseButton","aria-label","CloseButtonHistory","useBudgetsStore","useState","store","setStore","btApp","useAppContext","useEffect","a","getBudgetsStore","isSubscribed","fetchStore","observer","onStorageDataChanged","storage","addObserver","deleteObserver","DAY_MS","dateDiff","from","Math","floor","getISODateString","Date","toISOString","slice","monthToString","month","Intl","DateTimeFormat","format","monthYearToString","year","AddButton","ImportExportButton","ImportExportIcon","BudgetListItem","identifier","showCheckbox","onChanged","name","total","checked","currency","days","idName","ListItem","button","divider","BudgetPath","ListItemText","id","primary","secondary","textAlign","marginRight","ListItemSecondaryAction","Checkbox","edge","onChange","inputProps","size","BudgetList","budgets","index","setIndex","Object","getBudgetsIndex","values","fetchIndex","useBudgetsIndex","React","Set","selectedBudgets","setSelectedBudgets","loc","useLoc","handleChanged","add","delete","onTitleChange","onActions","key","AppPaths","ImportExport","pathCombinedWithQuery","disabled","List","map","budget","has","subheader","ListSubheader","Sync","OptionItem","ListItemAvatar","Avatar"],"mappings":"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","file":"static/js/23.57f86960.chunk.js","sourcesContent":["import { History } from \"history\";\n\n/** \n * It navigates back in history if there are enough elements in it to do so. \n * If it can't go back, it will navigate to @param path\n * */\nexport const goBack = (history: History, path = '/') => {\n    if (history.length > 2) {\n        history.goBack();\n    } else {\n        history.replace(path);\n    }\n}\n","\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { SvgIconProps } from '@material-ui/core/SvgIcon';\nimport Fab from '@material-ui/core/Fab';\nimport IconButton from '@material-ui/core/IconButton';\n\ntype Color = 'inherit' | 'primary' | 'secondary' | 'default';\ntype Type = 'button' | 'submit' | 'reset';\n\nexport interface AppButtonProps {\n    to?: string;\n    icon?: React.ComponentType<SvgIconProps>;\n    color?: Color;\n    disabled?: boolean;\n    type?: 'button' | 'submit' | 'reset';\n    variant?: 'text' | 'outlined' | 'contained';\n    replace?: boolean;\n    onClick?: (e: React.SyntheticEvent) => void;\n}\n\nfunction derivedProps (props: AppButtonProps) {\n    const derivedProps = {\n        component: props.to ? Link : undefined,\n    };\n    if (props.onClick && props.to) {\n        console.warn('Button should not have both onClick and href properties');\n    }\n    return derivedProps;\n}\n\nexport const AppButton: React.FC<AppButtonProps> = (props) => (\n    <IconButton color='inherit' {...props} {...derivedProps(props)}>\n        { props.icon && <props.icon />}\n    </IconButton>\n);\n\nexport interface ButtonFabProps {\n    disabled?: boolean;\n    type?: Type;\n    color?: Color;\n    to?: string;\n}\n\nfunction style (color?: Color) {\n    if (color === 'primary' || color === undefined) {\n        return {right: '1rem'};\n    } else {\n        return {left: '1rem'};\n    }\n}\n\nexport const ButtonFab = (props: ButtonFabProps&{children: React.ReactNode}) => (\n    <Fab style={{position: 'fixed', bottom: '1rem', zIndex: 10, ...style(props.color)}} \n        color={props.color||'secondary'}\n        {...props}\n        {...derivedProps(props)}\n        >\n        {props.children}\n    </Fab>);\n\n","\nimport * as React from 'react';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { goBack } from '../../domain/utils/goBack';\nimport { History } from 'history';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport const CloseButton: React.FC<{onClick: () => void}> = (props) => (\n    <IconButton \n        color='inherit'\n        aria-label='Close' \n        {...props} \n        onClick={props.onClick}>\n        <CloseIcon/>\n    </IconButton>\n);\n\nexport const CloseButtonHistory: React.FC<{history: History, to?: string}> = (props) => {\n    \n    function handleBack () {\n        goBack(props.history, props.to);\n    }\n\n    return (\n        <CloseButton onClick={handleBack}/>\n    );\n}\n","import { useState, useEffect } from 'react';\nimport { BudgetsStore } from '../domain/stores/interfaces';\nimport { StorageObserver } from '../services/storage/StorageApi';\nimport { useAppContext } from '../contexts/AppContext';\n\nexport function useBudgetsStore() {\n    const [store, setStore] = useState<BudgetsStore>();\n    const btApp = useAppContext();\n\n    useEffect(() => {\n        async function fetchStore () {\n            setStore(await btApp.getBudgetsStore());\n        }\n\n        let isSubscribed = true;\n        if (isSubscribed) {\n            fetchStore();\n        }\n\n        return () => { isSubscribed = false };\n        \n    }, [store, btApp]);\n\n    useEffect(() => {\n        let isSubscribed = true;\n        const observer: StorageObserver = {onStorageDataChanged: () => {\n            setStore(undefined);\n        }};\n\n        if (isSubscribed) {\n            btApp.storage.addObserver(observer);\n        }\n\n        return () => {\n            isSubscribed = false;\n            btApp.storage.deleteObserver(observer);\n        };\n    }, [btApp]);\n\n    return store;\n}","\nconst DAY_MS = 1000*60*60*24;\n\n/**\n * Get difference between 2 dates in days, including from and to dates.\n * @param from - Starting period timestamp\n * @param to - Ending period timestamp\n */\nexport function dateDiff(from: number, to: number) {\n    return Math.floor((to - from)/DAY_MS) + 1;\n}\n\n/** \n * @returns Date (without time) as string type in ISO format\n */\nexport function getISODateString (date = new Date()) {\n    return date.toISOString().slice(0,10);\n}\n\n/** \n * @returns month name from Date input\n */\nexport function monthToString (month: number) {\n    const dt = new Intl.DateTimeFormat(undefined, {month: 'long'});\n    return dt.format(new Date(2000, month, 1));\n}\n\n/** \n * @returns month and year name from Date input\n */\nexport function monthYearToString (year: number, month: number) {\n    const dt = new Intl.DateTimeFormat(undefined, {month: 'long', year: 'numeric'});\n    return dt.format(new Date(year, month, 1));\n}\n","\nimport * as React from 'react';\nimport AddIcon from '@material-ui/icons/Add';\nimport { ButtonFabProps, ButtonFab } from './buttons';\n\nexport const AddButton: React.FC<ButtonFabProps> = (props) => (\n    <ButtonFab aria-label='Add' {...props} color='primary'>\n        <AddIcon />\n    </ButtonFab>);","\nimport * as React from 'react';\nimport ImportExportIcon from '@material-ui/icons/ImportExport';\nimport { AppButtonProps, AppButton } from './buttons';\n\nexport const ImportExportButton: React.FC<AppButtonProps> = (props) => (\n    <AppButton icon={ImportExportIcon} aria-label='Import' {...props}/>\n);\n","import * as React from \"react\";\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport { Budget } from \"../../api\";\nimport { Link } from 'react-router-dom';\nimport { BudgetPath } from \"../../domain/paths/BudgetPath\";\nimport { dateDiff } from \"../../domain/date\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n\ninterface BudgetListItemProps extends Budget {\n    onChanged: (identifier: string, checked: boolean) => void;\n    checked?: boolean;\n    showCheckbox?: boolean;\n}\n\nexport const BudgetListItem: React.FC<BudgetListItemProps> = (props) => {\n    const { from, to, identifier, showCheckbox, onChanged, name, total, checked, currency } = props;\n    const days = dateDiff(from, to);\n    const idName = `li-name-${identifier}`;\n\n    function handleToggle() {\n        onChanged(identifier, !checked);\n    }\n\n    return (\n        <ListItem\n            button\n            divider\n            component={Link}\n            to={new BudgetPath(identifier).path}>\n\n            <ListItemText\n                id={idName}\n                primary={name}\n                secondary={`${days} days`}\n            />\n            <ListItemText\n                id={`li-info-${identifier}`}\n                style={{ textAlign: 'right', marginRight: showCheckbox ? '1rem' : undefined }}\n                primary={total}\n                secondary={currency}\n            />\n            {showCheckbox && <ListItemSecondaryAction>\n                <Checkbox\n                    edge='end'\n                    onChange={handleToggle}\n                    checked={checked}\n                    inputProps={{ 'aria-labelledby': idName }}\n                    size='small'\n                />\n            </ListItemSecondaryAction>}\n\n        </ListItem>\n    );\n}","import * as React from \"react\";\nimport List from '@material-ui/core/List';\nimport { RouteComponentProps } from \"react-router\";\nimport { BudgetListItem } from \"../../components/budgets/BudgetListItem\";\nimport { HeaderNotifierProps } from \"../../routes\";\nimport { AddButton } from \"../../components/buttons/AddButton\";\nimport { ImportExportButton } from \"../../components/buttons/ImportExportButton\";\nimport { BudgetPath } from \"../../domain/paths/BudgetPath\";\nimport { AppPaths } from \"../../domain/paths\";\nimport AddIcon from '@material-ui/icons/Add';\nimport SyncIcon from '@material-ui/icons/Sync';\nimport { useBudgetsIndex } from \"../../hooks/useBudgetsIndex\";\nimport { CloseButton } from \"../../components/buttons/CloseButton\";\nimport MergeIcon from '@material-ui/icons/MergeType';\nimport ImportExportIcon from '@material-ui/icons/ImportExport';\n\nimport { ButtonFab } from \"../../components/buttons/buttons\";\nimport { useLoc } from \"../../hooks/useLoc\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { Link } from \"react-router-dom\";\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\n\n\ninterface BudgetListProps extends RouteComponentProps, HeaderNotifierProps {}\n\nexport const BudgetList: React.FC<BudgetListProps> = (props) => {\n\n    const budgets = useBudgetsIndex();\n    const [selectedBudgets, setSelectedBudgets] = React.useState(new Set<string>());\n    const loc = useLoc();\n    \n    React.useEffect(() => {\n        props.onTitleChange(loc('Budget list'));\n    // eslint-disable-next-line\n    }, []);\n\n    React.useEffect(() => {\n        function handleUnselectAll () {\n            setSelectedBudgets(new Set());\n        }\n\n        if (selectedBudgets.size === 0) {\n            props.onTitleChange(loc('Budget list'));\n            props.onActions([ \n                <AddButton to={BudgetPath.add} key='add-budget'/>, \n                <ImportExportButton to={AppPaths.ImportExport} key='import-export-data'/>\n            ]);\n        } else {\n            props.onTitleChange(loc('Selecting budgets'));\n            props.onActions([\n                <ButtonFab \n                    to={BudgetPath.pathCombinedWithQuery(selectedBudgets)}\n                    disabled={selectedBudgets.size < 2} key='combine-budgets-button' >\n                    <MergeIcon/>\n                </ButtonFab>,\n                <CloseButton onClick={handleUnselectAll} key='close-button'/>]);\n        }\n        return function () {\n            props.onActions([]);\n        };\n    // eslint-disable-next-line\n    }, [selectedBudgets]);\n\n    function handleChanged (identifier: string, checked: boolean) {\n        if (checked) {\n            selectedBudgets.add(identifier);\n        } else {\n            selectedBudgets.delete(identifier);\n        }\n        setSelectedBudgets(new Set(selectedBudgets));\n    }\n\n    if (budgets === undefined) {\n        return null;\n    }\n    if (budgets.length > 0) {\n        const showCheckbox = budgets.length > 1;\n        return (\n            <List>{\n                budgets\n                    .map(budget => <BudgetListItem \n                        showCheckbox={showCheckbox}\n                        key={`list-item-${budget.identifier}`} {...budget} \n                        onChanged={handleChanged} \n                        checked={selectedBudgets.has(budget.identifier)}/>)\n            }\n            </List>);\n    } else {\n        return <List subheader={\n                    <ListSubheader component=\"div\" id=\"no-budgets-header\">\n                        {loc('No budgets')}\n                    </ListSubheader>}>\n                    <OptionItem\n                        primary={loc('Create new budget')} \n                        icon={<AddIcon/>}\n                        path={BudgetPath.add} />\n                    <OptionItem\n                        primary={loc('Synchronize your account')} \n                        icon={<SyncIcon/>}\n                        path={AppPaths.Sync} />\n                    <OptionItem\n                        primary={loc('Import from JSON')} \n                        icon={<ImportExportIcon/>}\n                        path={AppPaths.ImportExport} />\n                </List>;\n    }\n}\n\ninterface OptionItemProps {\n    primary: string;\n    icon: React.ReactNode;\n    path: string;\n};\n\nconst OptionItem: React.FC<OptionItemProps> = (props) => (\n    <ListItem component={Link} to={props.path} button>\n        <ListItemAvatar>\n            <Avatar>\n            {props.icon}\n            </Avatar>\n        </ListItemAvatar>\n        <ListItemText primary={props.primary}></ListItemText>\n    </ListItem>\n);\n\nexport default BudgetList;\n","import { useState, useEffect } from 'react';\nimport { useBudgetsStore } from './useBudgetsStore';\nimport { BudgetsStore } from '../domain/stores/interfaces';\nimport { Budget } from '../api';\n\nexport function useBudgetsIndex() {\n    const store = useBudgetsStore();\n    const [index, setIndex] = useState<Budget[]>();\n\n    useEffect(() => {\n        async function fetchIndex (store: BudgetsStore) {\n            setIndex(Object.values(await store.getBudgetsIndex()));\n        }\n\n        let isSubscribed = true;\n\n        if (isSubscribed) {\n            if (store) {\n                fetchIndex(store);\n            } else {\n                setIndex(undefined);\n            }\n        }\n        return () => {isSubscribed = false};\n        \n    }, [store]);\n\n    return index;\n}"],"sourceRoot":""}