{"version":3,"sources":["components/buttons/CloseButton.tsx","views/expenses/ExpenseAdd.tsx","hooks/useCurrentCountry.tsx"],"names":["CloseButton","props","color","aria-label","onClick","CloseButtonHistory","goBack","history","to","ExpenseAdd","currenciesStore","useCurrenciesStore","budgetId","match","params","React","currency","setCurrency","budgetModel","useBudgetModel","currentCountry","store","useCountriesStore","useState","countryCode","setCountryCode","useEffect","a","getCurrentCountry","isSubscribed","currentCountryCode","fetch","useCurrentCountry","budgetUrl","BudgetPath","loc","useLoc","identifier","uuid","now","Date","expense","DateDay","fromTimeMs","when","year","month","day","pathExpensesByDay","country","getFromCountry","currencyFromCountry","initCurrency","lastCurrency","lastCurrencyUsed","undefined","info","useHeaderContext","ExpenseForm","amount","amountBaseCurrency","categoryId","baseCurrency","splitInDays","onSubmit","CircularProgress"],"mappings":"yHACA,iHAMaA,EAA+C,SAACC,GAAD,OACxD,gBAAC,IAAD,eACIC,MAAM,UACNC,aAAW,SACPF,EAHR,CAIIG,QAASH,EAAMG,UACf,gBAAC,IAAD,QAIKC,EAAgE,SAACJ,GAM1E,OACI,gBAACD,EAAD,CAAaI,QALjB,WACIE,YAAOL,EAAMM,QAASN,EAAMO,S,0OCC7B,IAAMC,EAAyC,SAACR,GAEnD,IAAMS,EAAkBC,cAEjBC,EAAYX,EAAMY,MAAMC,OAAxBF,SACAL,EAAWN,EAAXM,QALsD,EAO7BQ,aAP6B,mBAOtDC,EAPsD,KAO5CC,EAP4C,KASvDC,EAAcC,YAAeP,GAC7BQ,EC3BH,WACH,IAAMC,EAAQC,cADkB,EAEMC,qBAFN,mBAEzBC,EAFyB,KAEZC,EAFY,KAiBhC,OAbAC,qBAAU,WAAM,4CACZ,WAAsBL,GAAtB,SAAAM,EAAA,kEACIF,EADJ,SACyBJ,EAAMO,oBAD/B,8EADY,sBAKZ,IAAIC,GAAe,EAKnB,OAJIA,GAAgBR,IAChBI,EAAeJ,EAAMS,oBAPZ,SAAD,2BAQRC,CAAMV,IAEH,WAAOQ,GAAe,KAC9B,CAACR,IAEGG,EDUgBQ,GAEjBC,EAAYlB,WAAc,kBAAO,IAAImB,IAAWtB,KAAY,CAACA,IAC7DuB,EAAMC,cAbiD,EAenCrB,WAAc,iBAAO,CAC3CsB,WAAYC,cACZC,IAAKC,KAAKD,SACV,IAHGF,EAfsD,EAetDA,WAAYE,EAf0C,EAe1CA,IAf0C,4CAqD7D,WAA6BE,GAA7B,qBAAAd,EAAA,wDAC+Be,IAAQC,WAAWF,EAAQG,MAA/CC,EADX,EACWA,KAAMC,EADjB,EACiBA,MAAOC,EADxB,EACwBA,IACpBzC,YACIL,EAAMM,QACN0B,EAAUe,kBAAkBH,EAAMC,EAAOC,IAJjD,4CArD6D,sBA6D7D,OAzCAhC,aAAgB,WAAM,4CAClB,WAA6BkC,EAAiB5B,GAA9C,eAAAM,EAAA,sEACsCN,EAAM6B,eAAeD,GAD3D,QACUE,EADV,SAGQlC,EAAYkC,GAHpB,4CADkB,sBAOd/B,GAAkBV,GAPH,SAAD,6BAQd0C,CAAahC,EAAgBV,KAElC,CAACU,EAAgBV,IAEpBK,aAAgB,WAAM,4CAClB,WAA6BM,GAA7B,eAAAM,EAAA,uDACU0B,EAAehC,EAAMiC,mBACPD,IAAiBrC,GACjCC,EAAYoC,GAHpB,4CADkB,sBAOd3C,GAPe,SAAD,2BAQd0C,CAAa1C,KAGlB,CAACA,IAEJK,aAAgB,WACRG,QAA4BqC,IAAbvC,GACfC,EAAYC,EAAYsC,KAAKxC,YAElC,CAACE,EAAaF,IAEjByC,YAAiBtB,EAAI,eAAgB,gBAACnC,EAAA,EAAD,CAAoBO,QAASA,IAAYN,GAU1EiB,EAEI,gBAACwC,EAAA,EAAD,CACIC,OAAQ,EACRC,mBAAoB,EACpBhD,SAAUA,EACViD,WAAY,GACZxB,WAAYA,EACZyB,aAAc5C,EAAYsC,KAAKxC,SAC/BQ,YAAaJ,GAAkB,KAC/BJ,SAAUA,EACV4B,KAAML,EACNwB,YAAa,EACbC,SA1EiD,8CA8ElD,gBAACC,EAAA,EAAD,OAMAxD","file":"static/js/28.d16f194d.chunk.js","sourcesContent":["\nimport * as React from 'react';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { goBack } from '../../domain/utils/goBack';\nimport { History } from 'history';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport const CloseButton: React.FC<{onClick: () => void}> = (props) => (\n    <IconButton \n        color='inherit'\n        aria-label='Close' \n        {...props} \n        onClick={props.onClick}>\n        <CloseIcon/>\n    </IconButton>\n);\n\nexport const CloseButtonHistory: React.FC<{history: History, to?: string}> = (props) => {\n    \n    function handleBack () {\n        goBack(props.history, props.to);\n    }\n\n    return (\n        <CloseButton onClick={handleBack}/>\n    );\n}\n","import * as React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { HeaderNotifierProps } from \"../../routes\";\nimport { Expense } from \"../../api\";\nimport { goBack } from \"../../domain/utils/goBack\";\nimport { BudgetPath } from \"../../domain/paths/BudgetPath\";\nimport { DateDay } from \"../../domain/DateDay\";\nimport { uuid } from \"../../domain/utils/uuid\";\nimport { useBudgetModel } from \"../../hooks/useBudgetModel\";\nimport { useCurrentCountry } from \"../../hooks/useCurrentCountry\";\nimport { CloseButtonHistory } from \"../../components/buttons/CloseButton\";\nimport { ExpenseForm } from \"../../components/expenses/ExpenseForm\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useCurrenciesStore } from \"../../hooks/useCurrenciesStore\";\nimport { CurrenciesStore } from \"../../domain/stores/interfaces\";\nimport { useHeaderContext } from \"../../hooks/useHeaderContext\";\nimport { useLoc } from \"../../hooks/useLoc\";\n\ninterface ExpenseViewProps extends HeaderNotifierProps,\n    RouteComponentProps<{ budgetId: string }> { }\n\nexport const ExpenseAdd: React.FC<ExpenseViewProps> = (props) => {\n    \n    const currenciesStore = useCurrenciesStore();\n\n    const {budgetId} = props.match.params;\n    const {history} = props;\n    \n    const [currency, setCurrency] = React.useState();\n    \n    const budgetModel = useBudgetModel(budgetId);\n    const currentCountry = useCurrentCountry();\n    \n    const budgetUrl = React.useMemo(() => (new BudgetPath(budgetId)), [budgetId]);\n    const loc = useLoc();\n\n    const {identifier, now} = React.useMemo(() => ({\n        identifier: uuid(), \n        now: Date.now()\n    }), []);\n\n    React.useEffect(() => {\n        async function initCurrency (country: string, store: CurrenciesStore) {\n            const currencyFromCountry = await store.getFromCountry(country);\n            if (currencyFromCountry) {\n                setCurrency(currencyFromCountry);\n            }\n        }\n        if (currentCountry && currenciesStore) {\n            initCurrency(currentCountry, currenciesStore);\n        }\n    }, [currentCountry, currenciesStore]);\n\n    React.useEffect(() => {\n        async function initCurrency (store: CurrenciesStore) {\n            const lastCurrency = store.lastCurrencyUsed;\n            if (lastCurrency && lastCurrency !== currency) {\n                setCurrency(lastCurrency);\n            }\n        }\n        if (currenciesStore) {\n            initCurrency(currenciesStore);\n        }\n        // eslint-disable-next-line\n    }, [currenciesStore]);\n\n    React.useEffect(() => {\n        if (budgetModel && currency === undefined) {\n            setCurrency(budgetModel.info.currency);\n        }\n    }, [budgetModel, currency]);\n\n    useHeaderContext(loc('Add expense'), <CloseButtonHistory history={history}/>, props);\n\n    async function handleSubmit (expense: Expense) {\n        const {year, month, day} = DateDay.fromTimeMs(expense.when);\n        goBack(\n            props.history, \n            budgetUrl.pathExpensesByDay(year, month, day));\n        \n    }\n\n    if (budgetModel) {\n        return (\n            <ExpenseForm\n                amount={0}\n                amountBaseCurrency={0}\n                budgetId={budgetId}\n                categoryId={''}\n                identifier={identifier}\n                baseCurrency={budgetModel.info.currency} \n                countryCode={currentCountry || 'ES'}\n                currency={currency}\n                when={now}\n                splitInDays={0}\n                onSubmit={handleSubmit}\n                />\n        );\n    } else {\n        return <CircularProgress/>;\n    }\n\n   \n}\n\nexport default ExpenseAdd;\n","import { useState, useEffect } from 'react';\nimport { useCountriesStore } from './useCountriesStore';\nimport { CountriesStore } from '../domain/stores/interfaces';\n\nexport function useCurrentCountry() {\n    const store = useCountriesStore();\n    const [countryCode, setCountryCode] = useState<string>();\n\n    useEffect(() => {\n        async function fetch (store: CountriesStore) {\n            setCountryCode(await store.getCurrentCountry());\n        }\n\n        let isSubscribed = true;\n        if (isSubscribed && store) {\n            setCountryCode(store.currentCountryCode);\n            fetch(store);\n        }\n        return () => {isSubscribed = false};\n    }, [store]);\n\n    return countryCode;\n}\n"],"sourceRoot":""}