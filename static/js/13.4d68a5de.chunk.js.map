{"version":3,"sources":["hooks/useHeaderContext.tsx","domain/utils/goBack.ts","components/buttons/buttons.tsx","components/buttons/CloseButton.tsx","components/TextInput.tsx","hooks/useCategoriesStore.tsx","components/buttons/DeleteButton.tsx","../node_modules/@material-ui/icons/Add.js","components/buttons/SaveButton.tsx","components/YesNoDialog.tsx","components/buttons/AddButton.tsx","components/categories/CategoryIcon.tsx","hooks/useIcon.tsx","components/categories/CategoryIconButton.tsx","views/categories/CategoryIconSelector.tsx","hooks/useIconNames.tsx","components/categories/CategoryInput.tsx","views/categories/CategoryList.tsx"],"names":["useHeaderContext","title","actions","props","useEffect","onTitleChange","onActions","undefined","goBack","history","path","length","replace","derivedProps","component","to","Link","onClick","console","warn","AppButton","color","icon","ButtonFab","style","position","bottom","zIndex","right","left","children","CloseButton","aria-label","CloseButtonHistory","TextInput","id","label","margin","useCategoriesStore","btApp","useAppContext","useState","store","setStore","a","getCategoriesStore","isSubscribed","fetchStore","DeleteButton","DeleteIcon","_interopRequireDefault","Object","defineProperty","exports","value","default","_react","_default","createElement","d","SaveButtonFab","YesNoDialog","handleNo","onClose","loc","useLoc","open","aria-labelledby","aria-describedby","question","description","autoFocus","AddButton","CategoryIcon","name","setIcon","getIconsStore","getIcon","fetchIcon","useIcon","fallback","Icon","CategoryIconButton","Button","variant","CategoryIconDialogSelector","handleItemClick","iconNames","setIconNames","fetchIconNames","useIconNames","Dialog","selectedValue","DialogTitle","DialogContent","Grid","container","direction","justify","map","key","CategoryInput","React","dialogOpen","setDialogOpen","showDeleteDialog","setShowDeleteDialog","category","setCategory","wrap","item","onChange","event","preventDefault","target","cat","onDelete","selectedIcon","confirmed","identifier","CategoriesMapView","values","categories","c","CategoryList","setCategories","viewCategories","setViewCategories","Set","deleteCategories","setDeleteCategories","updatedCategories","setUpdatedCategories","getCategories","init","changed","setChanged","handleSave","e","forEach","push","promises","deleteCategory","Promise","all","onSubmit","add","CategoryPaths","Add","type","disabled"],"mappings":"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","file":"static/js/13.4d68a5de.chunk.js","sourcesContent":["import { useEffect, ReactNode } from \"react\";\nimport { HeaderNotifierProps } from \"../routes\";\n\nexport function useHeaderContext(title: string, actions: ReactNode, props: HeaderNotifierProps) {\n    useEffect(() => {\n        props.onTitleChange(title);\n        props.onActions(actions);\n        return function () {\n            props.onTitleChange('');\n            props.onActions(undefined);\n        }\n    // eslint-disable-next-line\n    }, []);\n}\n","import { History } from \"history\";\n\n/** \n * It navigates back in history if there are enough elements in it to do so. \n * If it can't go back, it will navigate to @param path\n * */\nexport const goBack = (history: History, path = '/') => {\n    if (history.length > 2) {\n        history.goBack();\n    } else {\n        history.replace(path);\n    }\n}\n","\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { SvgIconProps } from '@material-ui/core/SvgIcon';\nimport Fab from '@material-ui/core/Fab';\nimport IconButton from '@material-ui/core/IconButton';\n\ntype Color = 'inherit' | 'primary' | 'secondary' | 'default';\ntype Type = 'button' | 'submit' | 'reset';\n\nexport interface AppButtonProps {\n    to?: string;\n    icon?: React.ComponentType<SvgIconProps>;\n    color?: Color;\n    disabled?: boolean;\n    type?: 'button' | 'submit' | 'reset';\n    variant?: 'text' | 'outlined' | 'contained';\n    replace?: boolean;\n    onClick?: (e: React.SyntheticEvent) => void;\n}\n\nfunction derivedProps (props: AppButtonProps) {\n    const derivedProps = {\n        component: props.to ? Link : undefined,\n    };\n    if (props.onClick && props.to) {\n        console.warn('Button should not have both onClick and href properties');\n    }\n    return derivedProps;\n}\n\nexport const AppButton: React.FC<AppButtonProps> = (props) => (\n    <IconButton color='inherit' {...props} {...derivedProps(props)}>\n        { props.icon && <props.icon />}\n    </IconButton>\n);\n\nexport interface ButtonFabProps {\n    disabled?: boolean;\n    type?: Type;\n    color?: Color;\n    to?: string;\n}\n\nfunction style (color?: Color) {\n    if (color === 'primary' || color === undefined) {\n        return {right: '1rem'};\n    } else {\n        return {left: '1rem'};\n    }\n}\n\nexport const ButtonFab = (props: ButtonFabProps&{children: React.ReactNode}) => (\n    <Fab style={{position: 'fixed', bottom: '1rem', zIndex: 10, ...style(props.color)}} \n        color={props.color||'secondary'}\n        {...props}\n        {...derivedProps(props)}\n        >\n        {props.children}\n    </Fab>);\n\n","\nimport * as React from 'react';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { goBack } from '../../domain/utils/goBack';\nimport { History } from 'history';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport const CloseButton: React.FC<{onClick: () => void}> = (props) => (\n    <IconButton \n        color='inherit'\n        aria-label='Close' \n        {...props} \n        onClick={props.onClick}>\n        <CloseIcon/>\n    </IconButton>\n);\n\nexport const CloseButtonHistory: React.FC<{history: History, to?: string}> = (props) => {\n    \n    function handleBack () {\n        goBack(props.history, props.to);\n    }\n\n    return (\n        <CloseButton onClick={handleBack}/>\n    );\n}\n","import * as React from 'react';\nimport TextField, { TextFieldProps } from \"@material-ui/core/TextField\";\n\nexport const TextInput = (props: TextFieldProps) => (\n    <TextField\n        id={`input-field-${props.label}`}\n        style={{ margin: 8 }}\n        margin='dense'            \n        {...props}\n    />);","import { useState, useEffect } from 'react';\nimport { CategoriesStore } from '../domain/stores/interfaces';\nimport { useAppContext } from '../contexts/AppContext';\n\nexport function useCategoriesStore () {\n    const btApp = useAppContext();\n    const [store, setStore] = useState<CategoriesStore>();\n\n    useEffect(() => {\n        async function fetchStore () {\n            setStore(await btApp.getCategoriesStore());\n        }\n\n        let isSubscribed = true;\n        if (isSubscribed) {\n            fetchStore();\n        }\n\n        return () => { isSubscribed = false };\n        \n    }, [btApp, store]);\n\n    return store;\n}\n","\nimport * as React from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { AppButtonProps, AppButton } from './buttons';\n\nexport const DeleteButton = (props: AppButtonProps) => (\n    <AppButton icon={DeleteIcon} aria-label='Delete' {...props}/>\n);\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\n\nexports.default = _default;","\n\nimport * as React from 'react';\nimport SaveIcon from '@material-ui/icons/Save';\nimport { ButtonFab, ButtonFabProps, AppButtonProps, AppButton } from './buttons';\n\n\nexport const SaveButtonFab: React.FC<ButtonFabProps> = (props) => (\n    <ButtonFab aria-label='Save' {...props} >\n        <SaveIcon />\n    </ButtonFab>\n);\n\nexport const SaveButton: React.FC<AppButtonProps> = (props) => (\n    <AppButton icon={SaveIcon} aria-label='Save' {...props}/>\n);\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { useLoc } from '../hooks/useLoc';\n\ninterface YesNoDialogProps {\n    open: boolean,\n    question: string,\n    description?: string,\n    onClose: (accept: boolean) => void\n};\n\nexport const YesNoDialog: React.FC<YesNoDialogProps> = (props) => {\n    const titleId = 'y-n-dialog-title';\n    const descriptionId = 'y-n-dialog-description';\n\n    const handleNo = () => (props.onClose(false));\n    const handleYes = () => (props.onClose(true));\n    const loc = useLoc();\n\n    return (\n        <Dialog\n            open={props.open}\n            onClose={handleNo}\n            aria-labelledby={titleId}\n            aria-describedby={descriptionId}\n        >\n            <DialogTitle id={titleId}>{props.question}</DialogTitle>\n            {props.description && <DialogContent>\n                <DialogContentText id={descriptionId}>{props.description}</DialogContentText>\n            </DialogContent>}\n            <DialogActions>\n                <Button onClick={handleNo} color=\"primary\">{loc('Disagree')}</Button>\n                <Button onClick={handleYes} color=\"primary\" autoFocus>{loc('Agree')}</Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","\nimport * as React from 'react';\nimport AddIcon from '@material-ui/icons/Add';\nimport { ButtonFabProps, ButtonFab } from './buttons';\n\nexport const AddButton: React.FC<ButtonFabProps> = (props) => (\n    <ButtonFab aria-label='Add' {...props} color='primary'>\n        <AddIcon />\n    </ButtonFab>);","import * as React from 'react';\nimport { useIcon } from '../../hooks/useIcon';\n\ninterface CategoryIconProp {\n    name: string;\n};\n\nexport const CategoryIcon: React.FC<CategoryIconProp> = (props) => {\n\n    const {name} = props;\n    const icon = useIcon(name);\n\n    return (\n        <React.Suspense fallback={name}>\n            { icon ? <icon.Icon style={{color: icon.color}}/> : null}\n        </React.Suspense>\n    );\n}\n\nexport default CategoryIcon;\n","import { useState, useEffect } from 'react';\nimport { ColoredLazyIcon } from '../domain/stores/interfaces';\nimport { useAppContext } from '../contexts/AppContext';\n\nexport function useIcon(name: string) {\n    const [icon, setIcon] = useState<ColoredLazyIcon>();\n    const btApp = useAppContext();\n\n    useEffect(() => {\n        async function fetchIcon () {\n            const store = await btApp.getIconsStore();\n            setIcon(store.getIcon(name));\n        }\n\n        let isSubscribed = true;\n        if (isSubscribed) {\n            fetchIcon();\n        }\n        \n        return () => {isSubscribed = false};\n    }, [name, btApp]);\n\n    return icon;\n}","import * as React from 'react';\nimport Button from '@material-ui/core/Button';\nimport CategoryIcon from './CategoryIcon';\n\ninterface CategoryIconButtonProp {\n    name: string;\n    onClick: (name: string) => void;\n};\n\nexport const CategoryIconButton: React.FC<CategoryIconButtonProp> = (props) => {\n\n    const {name} = props;\n\n    return (\n        <Button onClick={() => props.onClick(name)} variant='outlined'>\n            <CategoryIcon name={name}/>\n        </Button>\n    );\n}\n\nexport default CategoryIconButton;\n","import * as React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Grid from '@material-ui/core/Grid';\nimport { CategoryIconButton } from '../../components/categories/CategoryIconButton';\nimport { useIconNames } from '../../hooks/useIconNames';\n\ninterface CategoryIconDialogSelectorProps {\n    selectedValue: string;\n    open: boolean;\n    onClose: (selectedValue: string) => void;\n};\n\nconst titleId = 'dialog-title';\n\nexport const CategoryIconDialogSelector: React.FC<CategoryIconDialogSelectorProps> = (props) => {\n\n    function handleClose() {\n        props.onClose(props.selectedValue);\n    }\n\n    function handleItemClick(value: string) {\n        props.onClose(value);\n    }\n\n    const iconNames = useIconNames();\n\n    return (\n        <Dialog\n            onClose={handleClose}\n            aria-labelledby={titleId} open={props.open}>\n            <DialogTitle id={titleId}>Select icon for category</DialogTitle>\n            <DialogContent>\n                <Grid container direction='row' justify='center'>\n                    {iconNames && iconNames.map(name =>\n                        <CategoryIconButton\n                            onClick={handleItemClick}\n                            name={name}\n                            key={`icon-${name}`} />)}\n                </Grid>\n            </DialogContent>\n        </Dialog>\n    );\n}\n\nexport default CategoryIconDialogSelector;\n","import { useState, useEffect } from 'react';\nimport { useAppContext } from '../contexts/AppContext';\n\nexport function useIconNames() {\n    const [iconNames, setIconNames] = useState<string[]>();\n    const btApp = useAppContext();\n    \n    useEffect(() => {\n        async function fetchIconNames () {\n            const store = await btApp.getIconsStore();\n            setIconNames(store.iconNames);\n        }\n\n        let isSubscribed = true;\n        if (isSubscribed) {\n            fetchIconNames();\n        }\n        \n        return () => {isSubscribed = false};\n\n    }, [btApp]);\n\n    return iconNames;\n}","import * as React from 'react';\n\nimport Grid, { GridDirection } from '@material-ui/core/Grid';\nimport { TextInput } from '../TextInput';\nimport CategoryIconButton from './CategoryIconButton';\nimport CategoryIconDialogSelector from '../../views/categories/CategoryIconSelector';\nimport { Category } from '../../api';\nimport { DeleteButton } from '../buttons/DeleteButton';\nimport { YesNoDialog } from '../YesNoDialog';\nimport { useLoc } from '../../hooks/useLoc';\n\ninterface CategoryInputProps {\n    direction?: GridDirection;\n    onDelete?: (id: string) => void;\n    onChange: (category: Category) => void;\n    category: Category;\n}\n\nexport const CategoryInput: React.FC<CategoryInputProps> = (props) => {\n    const [dialogOpen, setDialogOpen] = React.useState(false);\n    const [showDeleteDialog, setShowDeleteDialog] = React.useState(false);\n    const [category, setCategory] = React.useState<Category>(props.category);\n    const loc = useLoc();\n    \n    const handleChangeName = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault();\n        const name = event.target.value;\n        const cat = { ...category, name };\n        setCategory(cat);\n        props.onChange(cat);\n    }\n\n    const handleClickChangeIcon = () => {\n        setDialogOpen(true);\n    }\n\n    const handleCloseDialog = (selectedIcon: string) => {\n        if (category.icon !== selectedIcon) {\n            const cat = {...category, icon: selectedIcon };\n            setCategory(cat);\n            props.onChange(cat);\n        }\n        setDialogOpen(false);        \n    }\n\n    function handleConfirmDelete (confirmed: boolean) {\n        setShowDeleteDialog(false);\n        if (props.onDelete && confirmed) {\n            props.onDelete(props.category.identifier);    \n        }\n    }\n\n    function handleShowDeleteDialog () {\n        setShowDeleteDialog(true);\n    }\n\n    return (\n        <React.Fragment>\n            <Grid container direction={props.direction || 'row'} wrap='nowrap'>\n                <Grid item>\n                    <TextInput \n                        label={ props.direction === 'row' ? '' : loc('Name') }\n                        value={ category.name }\n                        onChange={ handleChangeName }/>\n                </Grid>\n                <Grid item>\n                    <CategoryIconButton \n                        name={ category.icon } \n                        onClick={ handleClickChangeIcon } />\n                </Grid>\n                { props.onDelete && <Grid item><DeleteButton onClick={handleShowDeleteDialog}/></Grid> }\n            </Grid>\n            <CategoryIconDialogSelector \n                onClose={handleCloseDialog} \n                open={dialogOpen} \n                selectedValue={category.icon}/>\n            <YesNoDialog \n                open={showDeleteDialog} \n                onClose={handleConfirmDelete}\n                question={`Do your really want to delete \"${props.category.name}\" category?`}\n                description='The expenses assigned to this category will be assigned to default.'/>\n        </React.Fragment>\n    );\n\n\n}\n\nexport default CategoryInput;","import * as React from 'react';\nimport { RouterProps } from 'react-router';\nimport { Category, CategoriesMap } from '../../api';\nimport CategoryInput from '../../components/categories/CategoryInput';\nimport { SaveButtonFab } from '../../components/buttons/SaveButton';\nimport { AddButton } from '../../components/buttons/AddButton';\nimport { CategoryPaths } from '../../domain/paths/CategoryPaths';\nimport { useAppContext } from '../../contexts/AppContext';\nimport { HeaderNotifierProps } from '../../routes';\nimport { useCategoriesStore } from '../../hooks/useCategoriesStore';\nimport { useLoc } from '../../hooks/useLoc';\nimport { useHeaderContext } from '../../hooks/useHeaderContext';\nimport { CloseButtonHistory } from '../../components/buttons/CloseButton';\n\ninterface CategoriesMapViewProps {\n    onDelete: (id: string) => void;\n    onChange: (category: Category) => void;\n    categories: CategoriesMap;\n}\n\nconst CategoriesMapView: React.FC<CategoriesMapViewProps> = (props) => {\n    const CategoriesMemo = React.useMemo(() => (\n        <React.Fragment>\n            {Object.values(props.categories).map(c => \n                <CategoryInput \n                    category={c}\n                    direction='row' \n                    key={`category-entry-${c.identifier}`}\n                    onChange={ props.onChange }\n                    onDelete={ props.onDelete }/>)\n            }\n        </React.Fragment>\n    // eslint-disable-next-line\n    ), [props.categories]);\n\n    return CategoriesMemo;\n}\n\nexport const CategoryList: React.FC<RouterProps&HeaderNotifierProps> = (props) => {\n    const btApp = useAppContext();\n\n    const [categories, setCategories] = React.useState<CategoriesMap>({});\n    const [viewCategories, setViewCategories] = React.useState<CategoriesMap>({});\n    const [deleteCategories, setDeleteCategories] = React.useState<Set<string>>(new Set<string>());\n    const [updatedCategories, setUpdatedCategories] = React.useState<Set<string>>(new Set<string>());\n    const store = useCategoriesStore();\n    const loc = useLoc();\n\n    React.useEffect(() => {\n        async function init() {\n            if (store) {\n                setCategories(await store.getCategories());\n            }\n        }\n        init();\n    }, [store]);\n\n    React.useEffect(() => {\n        setViewCategories({...categories});\n    }, [categories]);\n\n    useHeaderContext(\n        loc('Categories'), \n        <CloseButtonHistory history={props.history}/>, props);\n\n    const [changed, setChanged] = React.useState(false);\n\n    const handleChange = (category: Category) => {\n        viewCategories[category.identifier] = category;\n        setViewCategories(viewCategories);\n        if (updatedCategories.add(category.identifier)) {\n            setUpdatedCategories(updatedCategories);\n        }\n        setChanged(true);\n    }\n\n    const handleDelete = (id: string) => {\n        delete viewCategories[id];\n        setCategories(viewCategories);\n        if (deleteCategories.add(id)) {\n            setDeleteCategories(deleteCategories);\n        }\n        setChanged(true);\n    }\n\n    const handleSave = async (e: React.SyntheticEvent) => {\n        e.preventDefault();\n        const store = await btApp.getCategoriesStore();\n        const categories: Category[] = [];\n        updatedCategories.forEach(id => categories.push(viewCategories[id]));\n        const promises: Promise<void|boolean>[] = [store.setCategories(categories)];\n        deleteCategories.forEach(id => promises.push(store.deleteCategory(id)));\n        await Promise.all(promises);\n        setChanged(false);\n    }\n\n    return (\n        <form onSubmit={handleSave}>\n            <CategoriesMapView \n                onChange={handleChange}\n                onDelete={handleDelete}\n                categories={viewCategories}/>\n            <AddButton to={CategoryPaths.Add}/>\n            <SaveButtonFab type='submit' disabled={!changed} color={'secondary'}/>\n        </form>\n    );\n\n}\n\nexport default CategoryList;"],"sourceRoot":""}