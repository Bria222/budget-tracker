{"version":3,"sources":["hooks/useHeaderContext.tsx","domain/utils/goBack.ts","components/buttons/buttons.tsx","domain/DateDay.ts","components/buttons/CloseButton.tsx","hooks/useBudgetsStore.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/TextInput.tsx","domain/date.ts","hooks/useBudgetModel.tsx","components/buttons/SaveButton.tsx","hooks/useCurrenciesStore.tsx","components/AmountInput.tsx","components/CurrencyInput.tsx","components/budgets/BudgetForm.tsx","views/budgets/BudgetEdit.tsx"],"names":["useHeaderContext","title","actions","props","useEffect","onTitleChange","onActions","undefined","goBack","history","path","length","replace","derivedProps","component","to","Link","onClick","console","warn","AppButton","color","icon","ButtonFab","style","position","bottom","zIndex","right","left","children","DateDay","date","Date","_date","this","getFullYear","getMonth","getDate","days","setDate","months","setMonth","years","setFullYear","getTime","isToday","Intl","DateTimeFormat","day","month","year","format","timestampMs","now","CloseButton","aria-label","CloseButtonHistory","useBudgetsStore","useState","store","setStore","btApp","useAppContext","a","getBudgetsStore","isSubscribed","fetchStore","observer","onStorageDataChanged","storage","addObserver","deleteObserver","_toConsumableArray","arr","Array","isArray","i","arr2","iter","Symbol","iterator","Object","prototype","toString","call","from","TypeError","TextInput","id","label","margin","DAY_MS","dateDiff","Math","floor","getISODateString","toISOString","slice","monthToString","monthYearToString","useBudgetModel","budgetId","budgetModel","setBudgetModel","getBudgetModel","fetchBudget","SaveButtonFab","useCurrenciesStore","getCurrenciesStore","AmountInput","autoFocus","required","type","value","amountInput","inputProps","step","onChange","event","amountFloat","parseFloat","target","onAmountChange","helperText","disabled","CurrencyInput","onCurrencyChange","loc","useLoc","options","React","useMemo","createOption","k","v","key","opts","currencies","lastCurrenciesUsed","currenciesMix","Set","keys","code","name","get","push","select","SelectProps","native","selectedValue","selectedCurrency","BudgetForm","budget","setBudget","error","setError","saveDisabled","setSaveDisabled","validate","onSubmit","e","preventDefault","total","currency","SaveButton","BudgetEdit","match","params","budgetInfo","setBudgetInfo","info","fromDate","timeMs","addDays","identifier","uuid","newEmptyBudget","saving","setSaving","BudgetPath","CircularProgress"],"mappings":"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","file":"static/js/12.c60e0239.chunk.js","sourcesContent":["import { useEffect, ReactNode } from \"react\";\nimport { HeaderNotifierProps } from \"../routes\";\n\nexport function useHeaderContext(title: string, actions: ReactNode, props: HeaderNotifierProps) {\n    useEffect(() => {\n        props.onTitleChange(title);\n        props.onActions(actions);\n        return function () {\n            props.onTitleChange('');\n            props.onActions(undefined);\n        }\n    // eslint-disable-next-line\n    }, []);\n}\n","import { History } from \"history\";\n\n/** \n * It navigates back in history if there are enough elements in it to do so. \n * If it can't go back, it will navigate to @param path\n * */\nexport const goBack = (history: History, path = '/') => {\n    if (history.length > 2) {\n        history.goBack();\n    } else {\n        history.replace(path);\n    }\n}\n","\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { SvgIconProps } from '@material-ui/core/SvgIcon';\nimport Fab from '@material-ui/core/Fab';\nimport IconButton from '@material-ui/core/IconButton';\n\ntype Color = 'inherit' | 'primary' | 'secondary' | 'default';\ntype Type = 'button' | 'submit' | 'reset';\n\nexport interface AppButtonProps {\n    to?: string;\n    icon?: React.ComponentType<SvgIconProps>;\n    color?: Color;\n    disabled?: boolean;\n    type?: 'button' | 'submit' | 'reset';\n    variant?: 'text' | 'outlined' | 'contained';\n    replace?: boolean;\n    onClick?: (e: React.SyntheticEvent) => void;\n}\n\nfunction derivedProps (props: AppButtonProps) {\n    const derivedProps = {\n        component: props.to ? Link : undefined,\n    };\n    if (props.onClick && props.to) {\n        console.warn('Button should not have both onClick and href properties');\n    }\n    return derivedProps;\n}\n\nexport const AppButton: React.FC<AppButtonProps> = (props) => (\n    <IconButton color='inherit' {...props} {...derivedProps(props)}>\n        { props.icon && <props.icon />}\n    </IconButton>\n);\n\nexport interface ButtonFabProps {\n    disabled?: boolean;\n    type?: Type;\n    color?: Color;\n    to?: string;\n}\n\nfunction style (color?: Color) {\n    if (color === 'primary' || color === undefined) {\n        return {right: '1rem'};\n    } else {\n        return {left: '1rem'};\n    }\n}\n\nexport const ButtonFab = (props: ButtonFabProps&{children: React.ReactNode}) => (\n    <Fab style={{position: 'fixed', bottom: '1rem', zIndex: 10, ...style(props.color)}} \n        color={props.color||'secondary'}\n        {...props}\n        {...derivedProps(props)}\n        >\n        {props.children}\n    </Fab>);\n\n","import { YMD } from \"../api\";\n\nexport class DateDay implements YMD {\n    private readonly _date: Date;\n\n    constructor(date = new Date()) {\n        this._date = new Date(\n            date.getFullYear(), \n            date.getMonth(), \n            date.getDate());\n    }\n\n    clone() {\n        return new DateDay(this._date);\n    }\n\n    get year () {\n        return this._date.getFullYear();\n    }\n\n    get month () {\n        return this._date.getMonth();\n    }\n\n    get day () {\n        return this._date.getDate();\n    }\n\n    static fromTimeMs (timestampMs: number) {\n        return new DateDay(new Date(timestampMs));\n    }\n\n    static fromYMD (date: YMD) {\n        return new DateDay(new Date(date.year, date.month, date.day));\n    }\n\n    get timeMs () {\n        return this._date.getTime();\n    }\n    \n    get isToday() {\n        return DateDay.isToday(this);\n    }\n\n    /**\n     * @returns current object instance with days added to previous date\n     */\n    addDays (days: number) {\n        this._date.setDate(this._date.getDate() + days);\n        return this;\n    }\n\n    /**\n     * @returns current object instance with months added to previous date\n     */\n    addMonths (months: number) {\n        this._date.setMonth(this._date.getMonth() + months);\n        return this;\n    }\n\n    /**\n     * @returns current object instance with years added to previous date\n     */\n    addYears (years: number) {\n        this._date.setFullYear(this._date.getFullYear() + years);\n        return this;\n    }\n\n    static isToday(date: YMD) {\n        const now = new Date();\n        return date.day === now.getDate() && \n            date.month === now.getMonth() && \n            date.year === now.getFullYear();\n    }\n\n    get shortString () {\n        const dt = new Intl.DateTimeFormat(\n            undefined, \n            {day: 'numeric', month: 'long', year: 'numeric'});\n        return dt.format(this._date);\n    }\n\n    equals(date: DateDay) {\n        return this._date.getTime() === date._date.getTime();\n    }\n}","\nimport * as React from 'react';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { goBack } from '../../domain/utils/goBack';\nimport { History } from 'history';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport const CloseButton: React.FC<{onClick: () => void}> = (props) => (\n    <IconButton \n        color='inherit'\n        aria-label='Close' \n        {...props} \n        onClick={props.onClick}>\n        <CloseIcon/>\n    </IconButton>\n);\n\nexport const CloseButtonHistory: React.FC<{history: History, to?: string}> = (props) => {\n    \n    function handleBack () {\n        goBack(props.history, props.to);\n    }\n\n    return (\n        <CloseButton onClick={handleBack}/>\n    );\n}\n","import { useState, useEffect } from 'react';\nimport { BudgetsStore } from '../domain/stores/interfaces';\nimport { StorageObserver } from '../services/storage/StorageApi';\nimport { useAppContext } from '../contexts/AppContext';\n\nexport function useBudgetsStore() {\n    const [store, setStore] = useState<BudgetsStore>();\n    const btApp = useAppContext();\n\n    useEffect(() => {\n        async function fetchStore () {\n            setStore(await btApp.getBudgetsStore());\n        }\n\n        let isSubscribed = true;\n        if (isSubscribed) {\n            fetchStore();\n        }\n\n        return () => { isSubscribed = false };\n        \n    }, [store, btApp]);\n\n    useEffect(() => {\n        let isSubscribed = true;\n        const observer: StorageObserver = {onStorageDataChanged: () => {\n            setStore(undefined);\n        }};\n\n        if (isSubscribed) {\n            btApp.storage.addObserver(observer);\n        }\n\n        return () => {\n            isSubscribed = false;\n            btApp.storage.deleteObserver(observer);\n        };\n    }, [btApp]);\n\n    return store;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","import * as React from 'react';\nimport TextField, { TextFieldProps } from \"@material-ui/core/TextField\";\n\nexport const TextInput = (props: TextFieldProps) => (\n    <TextField\n        id={`input-field-${props.label}`}\n        style={{ margin: 8 }}\n        margin='dense'            \n        {...props}\n    />);","\nconst DAY_MS = 1000*60*60*24;\n\n/**\n * Get difference between 2 dates in days, including from and to dates.\n * @param from - Starting period timestamp\n * @param to - Ending period timestamp\n */\nexport function dateDiff(from: number, to: number) {\n    return Math.floor((to - from)/DAY_MS) + 1;\n}\n\n/** \n * @returns Date (without time) as string type in ISO format\n */\nexport function getISODateString (date = new Date()) {\n    return date.toISOString().slice(0,10);\n}\n\n/** \n * @returns month name from Date input\n */\nexport function monthToString (month: number) {\n    const dt = new Intl.DateTimeFormat(undefined, {month: 'long'});\n    return dt.format(new Date(2000, month, 1));\n}\n\n/** \n * @returns month and year name from Date input\n */\nexport function monthYearToString (year: number, month: number) {\n    const dt = new Intl.DateTimeFormat(undefined, {month: 'long', year: 'numeric'});\n    return dt.format(new Date(year, month, 1));\n}\n","import { useState, useEffect } from 'react';\nimport { BudgetModel } from '../domain/BudgetModel';\nimport { useBudgetsStore } from './useBudgetsStore';\nimport { BudgetsStore } from '../domain/stores/interfaces';\n\nexport function useBudgetModel(budgetId: string) {\n    const store = useBudgetsStore();\n    const [budgetModel, setBudgetModel] = useState<BudgetModel>();\n\n    useEffect(() => {\n        async function fetchBudget (store: BudgetsStore) {\n            setBudgetModel(await store.getBudgetModel(budgetId));\n        }\n        if (budgetId) {\n            let isSubscribed = true;\n\n            if (isSubscribed) {\n                if (store) {\n                    fetchBudget(store);\n                } else {\n                    setBudgetModel(undefined);\n                }\n            }\n            return () => {isSubscribed = false};\n        }\n        \n    }, [budgetId, store]);\n\n    return budgetModel;\n}","\n\nimport * as React from 'react';\nimport SaveIcon from '@material-ui/icons/Save';\nimport { ButtonFab, ButtonFabProps, AppButtonProps, AppButton } from './buttons';\n\n\nexport const SaveButtonFab: React.FC<ButtonFabProps> = (props) => (\n    <ButtonFab aria-label='Save' {...props} >\n        <SaveIcon />\n    </ButtonFab>\n);\n\nexport const SaveButton: React.FC<AppButtonProps> = (props) => (\n    <AppButton icon={SaveIcon} aria-label='Save' {...props}/>\n);\n","import { useState, useEffect } from 'react';\nimport { CurrenciesStore } from '../domain/stores/interfaces';\nimport { useAppContext } from '../contexts/AppContext';\n\nexport function useCurrenciesStore() {\n    const btApp = useAppContext();\n    const [store, setStore] = useState<CurrenciesStore>();\n\n    useEffect(() => {\n        async function fetchStore () {\n            setStore(await btApp.getCurrenciesStore());\n        }\n\n        let isSubscribed = true;\n        if (isSubscribed) {\n            fetchStore();\n        }\n\n        return () => { isSubscribed = false };\n        \n    }, [btApp]);\n\n    return store;\n}","import * as React from \"react\";\nimport { TextInput } from \"./TextInput\";\n\ninterface AmountInputProps {\n    label: string;\n    amountInput?: number;\n    onAmountChange: (amount: number) => void;\n    helperText?: string;\n    disabled?: boolean;\n}\n\nexport const AmountInput: React.FC<AmountInputProps> = (props) => {\n\n    const handleAmountChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const amountFloat = parseFloat(event.target.value);\n        props.onAmountChange(amountFloat);\n    }\n\n    return (\n        <TextInput\n            autoFocus\n            required\n            type='number'\n            label={props.label}\n            value={props.amountInput || ''}\n            inputProps={{ step: '.01', 'aria-required': true }}\n            onChange={handleAmountChange}\n            helperText={props.helperText}\n            disabled={props.disabled}\n        />\n    );\n}\n\n","import React from 'react';\nimport { TextInput } from './TextInput';\nimport { useCurrenciesStore } from '../hooks/useCurrenciesStore';\nimport { useLoc } from '../hooks/useLoc';\n\nexport interface CurrencyInputProps  {\n    onCurrencyChange: (selected: string) => void;\n    selectedCurrency?: string;\n    disabled?: boolean;\n}\n\nexport const CurrencyInput: React.FC<CurrencyInputProps> = (props) => {\n\n    const {onCurrencyChange} = props;\n    const store = useCurrenciesStore();\n    const loc = useLoc();\n\n    const options = React.useMemo(() => {\n        function createOption (k: string, v: string) {\n            return <option key={`currency-option-${k}`} value={k}>{v}</option>;\n        }\n\n        const opts: React.ReactElement[] = [];\n        if (store) {\n            const {currencies, lastCurrenciesUsed} = store;\n            const currenciesMix = new Set([...lastCurrenciesUsed, ...currencies.keys()]);\n            for (const code of currenciesMix) {\n                const name = currencies.get(code);\n                name && opts.push(createOption(code, name));\n            }\n        } else {\n            opts.push(createOption('loading', 'Loading'));\n        }\n        return opts;\n    }, [store]);\n\n    function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        const selectedValue = event.target.value;\n        if (onCurrencyChange && selectedValue) {\n            onCurrencyChange(selectedValue);\n        }\n    }\n\n    return (\n        <TextInput\n            label={loc('Currency')}\n            select\n            SelectProps={{ native: true }}\n            onChange={handleChange}\n            value={props.selectedCurrency}\n            required\n            disabled={props.disabled}\n        >\n            { options }\n        </TextInput>\n    );\n}\n","\nimport * as React from 'react';\nimport { Budget } from '../../api';\nimport { TextInput } from '../TextInput';\nimport { getISODateString } from '../../domain/date';\nimport { AmountInput } from '../AmountInput';\nimport { CurrencyInput } from '../CurrencyInput';\nimport { SaveButtonFab } from '../buttons/SaveButton';\nimport { useLoc } from '../../hooks/useLoc';\n\ninterface BudgetFormProps {\n    budget: Budget;\n    onSubmit: (budget: Budget) => void;\n    disabled?: boolean;\n}\n\nexport const BudgetForm: React.FC<BudgetFormProps> = (props) => {\n    const [budget, setBudget] = React.useState<Budget>(props.budget);\n    const [error, setError] = React.useState();\n    const [saveDisabled, setSaveDisabled] = React.useState(true);\n    const {disabled} = props;\n    const loc = useLoc();\n\n    function onChange () {\n        setError(undefined);\n        setSaveDisabled(false);\n    }\n\n    function handleSubmit(e: React.SyntheticEvent) {\n        e.preventDefault();\n        const err = validate();\n        if (err) {\n            setError(validate());\n        } else if (!saveDisabled) {\n            props.onSubmit(budget);\n        }\n    }\n\n    const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        setBudget({...budget, name: e.target.value});\n        onChange();\n    };\n\n    const handleToChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        setBudget({...budget, to: new Date(e.target.value).getTime()});\n        onChange();\n    };\n\n    const handleFromChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        setBudget({...budget, from: new Date(e.target.value).getTime()});\n        onChange();\n    };\n\n    const handleAmountChange = (total: number) => {\n        setBudget({...budget, total});\n        onChange();\n    };\n\n    const handleCurrencyChange = (currency: string) => {\n        setBudget({...budget, currency});\n        onChange();\n    };\n\n    function validate () {\n        if (budget.from >= budget.to) {\n            return loc('Invalid date range');\n        }\n        return undefined;\n    }\n\n    return (\n        <form onSubmit={handleSubmit} >\n            <TextInput label={loc('Name')} value={budget.name} onChange={handleNameChange} required disabled={disabled}/>\n            <TextInput label={loc('Start')} value={getISODateString(new Date(budget.from))} type='date' onChange={handleFromChange} error={error} required  disabled={disabled}/>\n            <TextInput label={loc('End')} value={getISODateString(new Date(budget.to))} type='date' error={error} onChange={handleToChange} disabled={disabled}/>\n            <AmountInput \n                disabled={disabled}\n                onAmountChange={handleAmountChange}\n                label={loc('Total')}\n                amountInput={budget.total}\n            />\n            <CurrencyInput \n                disabled={disabled}\n                onCurrencyChange={handleCurrencyChange}\n                selectedCurrency={budget.currency}\n            />\n            <SaveButtonFab disabled={disabled || saveDisabled} color='primary' type='submit'/>\n        </form>\n    );\n}","import * as React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Budget } from \"../../api\";\nimport { BudgetForm } from \"../../components/budgets/BudgetForm\";\nimport { BudgetPath } from \"../../domain/paths/BudgetPath\";\nimport { DateDay } from \"../../domain/DateDay\";\nimport { uuid } from \"../../domain/utils/uuid\";\nimport { CloseButtonHistory } from \"../../components/buttons/CloseButton\";\nimport { useBudgetModel } from \"../../hooks/useBudgetModel\";\nimport { HeaderNotifierProps } from \"../../routes\";\nimport { useAppContext } from \"../../contexts/AppContext\";\nimport { useHeaderContext } from \"../../hooks/useHeaderContext\";\nimport { useLoc } from \"../../hooks/useLoc\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\ninterface BudgetEditProps extends \n    RouteComponentProps<{ budgetId: string }>, \n    HeaderNotifierProps {\n}\n\nconst BudgetEdit: React.FC<BudgetEditProps> = (props) => {\n    const budgetId = props.match.params.budgetId;\n    \n    const [budgetInfo, setBudgetInfo] = React.useState<Budget>();\n    const btApp = useAppContext();\n\n    const budget = useBudgetModel(budgetId);\n\n    function newEmptyBudget () {\n        const fromDate = new DateDay();\n        return { \n            name: '', \n            from: fromDate.timeMs, \n            to: fromDate.addDays(30).timeMs,\n            currency: 'EUR',\n            total: 0,\n            identifier: uuid()\n        };\n    }\n\n    React.useEffect(() => {\n        budget && setBudgetInfo(budget.info);\n    }, [budget]);\n\n    const loc = useLoc();\n\n    useHeaderContext(\n        budgetId ? loc('Edit budget') : loc('Add Budget'),\n        <CloseButtonHistory history={props.history}/>, \n        props);\n\n    React.useEffect(() => {\n        !budgetId && setBudgetInfo(newEmptyBudget()); \n    }, [budgetId]);\n\n    const [saving, setSaving] = React.useState(false);\n\n    async function handleSubmit (budget: Budget) {\n        setSaving(true);\n        await (await btApp.getBudgetsStore()).setBudget(budget);\n        setSaving(false);\n        props.history.replace(new BudgetPath(budget.identifier).path);\n    }\n\n    if (budgetInfo) {\n        return  <BudgetForm \n        budget={budgetInfo}\n        onSubmit={handleSubmit}\n        disabled={saving}\n        />;\n    }\n    return <CircularProgress/>;\n\n}\n\nexport default BudgetEdit;\n"],"sourceRoot":""}