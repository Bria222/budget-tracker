{"version":3,"sources":["hooks/useHeaderContext.tsx","domain/utils/goBack.ts","domain/DateDay.ts","components/buttons/CloseButton.tsx","hooks/useBudgetsStore.tsx","hooks/useBudgetModel.tsx","hooks/useCategoriesStore.tsx","domain/NestedTotal.ts","hooks/useCategories.tsx","components/stats/charts/Pie.tsx","components/stats/GraphByCategory.tsx","domain/stats/getTotalsByCategory.ts","components/stats/GraphByCountry.tsx","domain/stats/getTotalsByCountry.ts","components/stats/charts/TimeLine.tsx","components/stats/GraphExpensesTimeLine.tsx","components/stats/GraphDaysPerCountry.tsx","domain/stats/getTotalDaysByCountry.ts","components/stats/charts/Bar.tsx","components/stats/GraphDailyAverageByCountry.tsx","domain/stats/getAverageDailyExpensesPerCountry.ts","components/stats/BudgetStats.tsx","views/budgets/Stats.tsx"],"names":["useHeaderContext","title","actions","props","useEffect","onTitleChange","onActions","undefined","goBack","history","path","length","replace","DateDay","date","Date","_date","this","getFullYear","getMonth","getDate","days","setDate","months","setMonth","years","setFullYear","getTime","isToday","Intl","DateTimeFormat","day","month","year","format","timestampMs","now","CloseButton","color","aria-label","onClick","CloseButtonHistory","to","useBudgetsStore","useState","store","setStore","btApp","useAppContext","a","getBudgetsStore","isSubscribed","fetchStore","observer","onStorageDataChanged","storage","addObserver","deleteObserver","useBudgetModel","budgetId","budgetModel","setBudgetModel","getBudgetModel","fetchBudget","useCategoriesStore","getCategoriesStore","NestedTotal","_total","_subTotals","n","subTotalIndexes","subTotal","_getSubTotal","add","index","shift","indexes","getSubtotal","total","getAverage","avg","Object","keys","useCategories","categories","setCategories","getCategories","cs","fetchCategories","PieChart","type","onDataSelect","event","onSelect","label","maxSlices","data","labels","datasets","values","GraphByCategory","loc","useLoc","budget","React","totals","expenses","expense","amountBaseCurrency","categoryId","getTotalsByCategory","forEach","k","push","name","getCategoryName","Math","round","console","log","CircularProgress","GraphByCountry","toMs","min","timeMs","inDates","from","countryCode","getTotalsByCountry","TimeLineChart","lineOptions","hideDots","areaFill","heatline","dotSize","hideLine","regionFill","axisOptions","xAxisMode","yAxisMode","xIsSeries","map","d","shortString","GraphExpensesTimeLine","today","nestedTotalExpenses","average","expectedAvg","expectedDailyExpensesAverage","GraphDaysPerCountry","daysByCountry","expenseGroups","todayMs","fromDay","fromTimeMs","countriesInADay","Set","getExpenses","clear","e","c","addDays","getTotalDaysByCountry","entries","country","BarChart","GraphDailyAverageByCountry","prevCountry","em","fromYMD","dailyAvg","getAverageDailyExpensesPerCountry","v","BudgetStatsComponents","Grid","container","spacing","item","xs","sm","BudgetStatsView","match","params","budgetPath","BudgetPath"],"mappings":"yHAAA,6CAGO,SAASA,EAAiBC,EAAeC,EAAoBC,GAChEC,qBAAU,WAGN,OAFAD,EAAME,cAAcJ,GACpBE,EAAMG,UAAUJ,GACT,WACHC,EAAME,cAAc,IACpBF,EAAMG,eAAUC,MAGrB,M,iCCVP,kCAIO,IAAMC,EAAS,SAACC,GAAkC,IAAhBC,EAAe,uDAAR,IACxCD,EAAQE,OAAS,EACjBF,EAAQD,SAERC,EAAQG,QAAQF,K,uFCRXG,EAAb,WAGI,aAAgC,IAApBC,EAAmB,uDAAZ,IAAIC,KAAQ,yBAFdC,WAEc,EAC3BC,KAAKD,MAAQ,IAAID,KACbD,EAAKI,cACLJ,EAAKK,WACLL,EAAKM,WAPjB,oDAWQ,OAAO,IAAIP,EAAQI,KAAKD,SAXhC,8BA6CaK,GAEL,OADAJ,KAAKD,MAAMM,QAAQL,KAAKD,MAAMI,UAAYC,GACnCJ,OA/Cf,gCAqDeM,GAEP,OADAN,KAAKD,MAAMQ,SAASP,KAAKD,MAAMG,WAAaI,GACrCN,OAvDf,+BA6DcQ,GAEN,OADAR,KAAKD,MAAMU,YAAYT,KAAKD,MAAME,cAAgBO,GAC3CR,OA/Df,6BAgFWH,GACH,OAAOG,KAAKD,MAAMW,YAAcb,EAAKE,MAAMW,YAjFnD,2BAeQ,OAAOV,KAAKD,MAAME,gBAf1B,4BAmBQ,OAAOD,KAAKD,MAAMG,aAnB1B,0BAuBQ,OAAOF,KAAKD,MAAMI,YAvB1B,6BAmCQ,OAAOH,KAAKD,MAAMW,YAnC1B,8BAuCQ,OAAOd,EAAQe,QAAQX,QAvC/B,kCA6EQ,OAHW,IAAIY,KAAKC,oBAChBvB,EACA,CAACwB,IAAK,UAAWC,MAAO,OAAQC,KAAM,YAChCC,OAAOjB,KAAKD,UA7E9B,kCA0BuBmB,GACf,OAAO,IAAItB,EAAQ,IAAIE,KAAKoB,MA3BpC,8BA8BoBrB,GACZ,OAAO,IAAID,EAAQ,IAAIE,KAAKD,EAAKmB,KAAMnB,EAAKkB,MAAOlB,EAAKiB,QA/BhE,8BAkEmBjB,GACX,IAAMsB,EAAM,IAAIrB,KAChB,OAAOD,EAAKiB,MAAQK,EAAIhB,WACpBN,EAAKkB,QAAUI,EAAIjB,YACnBL,EAAKmB,OAASG,EAAIlB,kBAtE9B,M,iCCDA,iHAMamB,EAA+C,SAAClC,GAAD,OACxD,gBAAC,IAAD,eACImC,MAAM,UACNC,aAAW,SACPpC,EAHR,CAIIqC,QAASrC,EAAMqC,UACf,gBAAC,IAAD,QAIKC,EAAgE,SAACtC,GAM1E,OACI,gBAACkC,EAAD,CAAaG,QALjB,WACIhC,YAAOL,EAAMM,QAASN,EAAMuC,S,qHCf7B,SAASC,IAAmB,IAAD,EACJC,qBADI,mBACvBC,EADuB,KAChBC,EADgB,KAExBC,EAAQC,cAgCd,OA9BA5C,qBAAU,WAAM,4CACZ,sBAAA6C,EAAA,kEACIH,EADJ,SACmBC,EAAMG,kBADzB,8EADY,sBAKZ,IAAIC,GAAe,EAKnB,OAJIA,GANS,WAAD,wBAORC,GAGG,WAAQD,GAAe,KAE/B,CAACN,EAAOE,IAEX3C,qBAAU,WACN,IAAI+C,GAAe,EACbE,EAA4B,CAACC,qBAAsB,WACrDR,OAASvC,KAOb,OAJI4C,GACAJ,EAAMQ,QAAQC,YAAYH,GAGvB,WACHF,GAAe,EACfJ,EAAMQ,QAAQE,eAAeJ,MAElC,CAACN,IAEGF,I,sHClCJ,SAASa,EAAeC,GAC3B,IAAMd,EAAQF,cAD+B,EAEPC,qBAFO,mBAEtCgB,EAFsC,KAEzBC,EAFyB,KAuB7C,OAnBAzD,qBAAU,WAAM,4CACZ,WAA4ByC,GAA5B,SAAAI,EAAA,kEACIY,EADJ,SACyBhB,EAAMiB,eAAeH,GAD9C,8EADY,sBAIZ,GAAIA,EAAU,CACV,IAAIR,GAAe,EASnB,OAPIA,IACIN,EARC,SAAD,2BASAkB,CAAYlB,GAEZgB,OAAetD,IAGhB,WAAO4C,GAAe,MAGlC,CAACQ,EAAUd,IAEPe,I,qHCxBJ,SAASI,IACZ,IAAMjB,EAAQC,cADoB,EAERJ,qBAFQ,mBAE3BC,EAF2B,KAEpBC,EAFoB,KAkBlC,OAdA1C,qBAAU,WAAM,4CACZ,sBAAA6C,EAAA,kEACIH,EADJ,SACmBC,EAAMkB,qBADzB,8EADY,sBAKZ,IAAId,GAAe,EAKnB,OAJIA,GANS,WAAD,wBAORC,GAGG,WAAQD,GAAe,KAE/B,CAACJ,EAAOF,IAEJA,I,uFClBEqB,EAAb,WAII,aAAc,yBAHNC,YAGK,OAFLC,gBAEK,EACTnD,KAAKkD,OAAS,EACdlD,KAAKmD,WAAa,GAN1B,gDASQC,EAAWC,GACXrD,KAAKkD,QAAUE,EACf,IAAME,EAAWtD,KAAKuD,aAAaF,GAEnC,OADAC,GAAYA,EAASE,IAAIJ,EAAGC,GACrBrD,KAAKkD,SAbpB,+BAgBaE,EAAWC,GAChB,OAAOrD,KAAKwD,KAAKJ,EAAGC,KAjB5B,mCAoByBA,GACjB,QAAwB/D,IAApB+D,EAA+B,CAC/B,IAAMI,EAAQJ,EAAgBK,QAC9B,QAAcpE,IAAVmE,EAIA,OAHMA,KAASzD,KAAKmD,aAChBnD,KAAKmD,WAAWM,GAAS,IAAIR,GAE1BjD,KAAKmD,WAAWM,MA3BvC,kCAyCgBE,GACR,IAAMF,EAAQE,EAAQD,QACtB,YAAcpE,IAAVmE,EACIA,KAASzD,KAAKmD,WACPnD,KAAKmD,WAAWM,GAAOG,YAAYD,GAEnC,EAGR3D,KAAK6D,QAlDpB,iCAqDeF,GACP,IAAMF,EAAQE,EAAQD,QACtB,YAAcpE,IAAVmE,EACIA,KAASzD,KAAKmD,WACPnD,KAAKmD,WAAWM,GAAOK,WAAWH,GAElC,EAGR3D,KAAK+D,MA9DpB,4BAkCQ,OAAO/D,KAAKkD,SAlCpB,0BAsCQ,OAAOlD,KAAKkD,OAASc,OAAOC,KAAKjE,KAAKmD,YAAYzD,SAtC1D,8BAkEQ,OAAOsE,OAAOC,KAAKjE,KAAKmD,gBAlEhC,M,sHCCO,SAASe,IAAiB,IAAD,EACQvC,qBADR,mBACrBwC,EADqB,KACTC,EADS,KAEtBxC,EAAQmB,cAYd,OAVA5D,qBAAU,WAAM,4CAEZ,WAAgCyC,GAAhC,eAAAI,EAAA,sEACqBJ,EAAMyC,gBAD3B,OACUC,EADV,OAEIF,EAAcE,GAFlB,4CAFY,sBAOZ1C,GAPa,SAAD,2BAOH2C,CAAgB3C,KAC1B,CAACA,IAEGuC,I,oFCREK,EAAoC,SAACtF,GAK9C,OAAO,gBAAC,IAAD,CAAkBuF,KAAK,aAAazF,MAAOE,EAAMF,MAAO0F,aAJ/D,SAAuBC,GACnBzF,EAAM0F,UAAY1F,EAAM0F,SAASD,EAAME,QAIvCC,UAAW5F,EAAM4F,WAAW,EAC5BC,KAAM,CACFC,OAAQ9F,EAAM8F,OACdC,SAAU,CAAC,CAAEC,OAAQhG,EAAMgG,a,QCFhC,IAAMC,EAAkD,SAACjG,GAC5D,IAAMkG,EAAMC,cACLC,EAAsBpG,EAAtBoG,OAAQnB,EAAcjF,EAAdiF,WAGTY,EAAOQ,WAAc,WACvB,GAAIpB,GAAcH,OAAOC,KAAKE,GAAYzE,OAAS,EAAG,CAClD,IAAMsF,EAAmB,GACnBE,EAAmB,GACnBM,ECxBX,SAA8BF,GACjC,IAAME,EAAS,IAAIvC,IADmC,uBAEtD,YAAsBqC,EAAOG,SAA7B,+CAAuC,CAAC,IAA7BC,EAA4B,QACnCF,EAAOhC,IAAIkC,EAAQC,mBAAoB,CAACD,EAAQE,cAHE,kFAKtD,OAAOJ,EDmBgBK,CAAoBP,GAMnC,OALgBE,EAAO7B,QACfmC,SAAQ,SAACC,GACbf,EAAOgB,KAhBvB,SAA0BvC,EAAeU,GACrC,OAAOA,EAAWV,GAASU,EAAWV,GAAOwC,KAAOxC,EAe5ByC,CAAgBH,EAAG5B,IAC/Be,EAAOc,KAAKG,KAAKC,MAAMZ,EAAO5B,YAAY,CAACmC,SAExC,CAACf,SAAQE,aAErB,CAACI,EAAQnB,IAMZ,OAAIY,EACO,gBAAC,EAAD,eAAU/F,MAAOoG,EAAI,gBAAoBL,EAAzC,CAA+CH,SAL1D,SAAyBgB,GACrBS,QAAQC,IAAIV,OAML,gBAACW,EAAA,EAAD,O,SElCR,IAAMC,EAAgD,SAACtH,GAAW,IAC9DoG,EAAUpG,EAAVoG,OACDF,EAAMC,cAENN,EAAOQ,WAAc,WACvB,IAAMC,ECXP,SAA4BF,GAC/B,IAAME,EAAS,IAAIvC,IACbwD,EAAON,KAAKO,KAAI,IAAI9G,KAAU+G,OAAQrB,EAAO7D,IAFC,uBAGpD,YAAuB6D,EAAOG,SAA9B,+CAAwC,CAAC,IAA9BC,EAA6B,QAChCA,EAAQkB,QAAQtB,EAAOuB,KAAMJ,IAC7BjB,EAAOhC,IAAIkC,EAAQC,mBAAoB,CAACD,EAAQoB,eALJ,kFAQpD,OAAOtB,EDGYuB,CAAmBzB,GAC5B3B,EAAU6B,EAAO7B,QACjBqB,EAAmB,GACnBE,EAAmB,GAKzB,OAJAvB,EAAQmC,SAAQ,SAAAC,GACZf,EAAOgB,KAAKD,GACZb,EAAOc,KAAKG,KAAKC,MAAMZ,EAAO5B,YAAY,CAACmC,SAExC,CAACf,SAAQE,YACjB,CAACI,IAEJ,OAAO,gBAAC,EAAD,eAAUtG,MAAOoG,EAAI,eAAmBL,KEdtCiC,EAA8C,SAAC9H,GAAD,OACvD,kBAAC,IAAD,CACIF,MAAOE,EAAMF,MACbiI,YAAa,CACTC,SAAU,EACVC,SAAU,EACVC,SAAU,EACVC,QAAS,EACTC,SAAU,EACVC,WAAY,GAChB9C,KAAK,OACL+C,YAAa,CAAEC,UAAW,OAAQC,UAAW,OAAQC,UAAW,GAChE5C,KAAM,CACFC,OAAQ9F,EAAM8F,OAAO4C,KAAI,SAAAC,GAAC,OAAIA,EAAEC,eAChC7C,SAAU,CAAC,CACPC,OAAQhG,EAAMgG,aCjBjB6C,EAA8D,SAAC7I,GAAW,IAC5EoG,EAAUpG,EAAVoG,OACDF,EAAMC,cAENN,EAAOQ,WAAc,WAMvB,IAN8B,IACvBsB,EAAYvB,EAAZuB,KAAMpF,EAAM6D,EAAN7D,GACPuG,EAAQlI,KAAKqB,MAEb6D,EAAS,GACTE,EAAS,GACNrF,EAHQ,IAAIC,KAAK+G,GAGFhH,EAAKa,WAAae,GAAM5B,EAAKa,WAAasH,EAAOnI,EAAKQ,QAAQR,EAAKM,UAAY,GAAI,CAAC,IAAD,EAC5E,IAAIP,IAAQC,GAAhCmB,EADgG,EAChGA,KAAMD,EAD0F,EAC1FA,MAAOD,EADmF,EACnFA,IACd+C,EAAQyB,EAAO2C,oBAAoBrE,YAAY,CAAC5C,EAAMD,EAAOD,IACnEkE,EAAOgB,KAAK,IAAIpG,IAAQC,IACxBqF,EAAOc,KAAKG,KAAKC,MAAMvC,IAE3B,MAAO,CAACmB,SAAQE,YACjB,CAACI,IAEJ,OAAO,gBAAC,EAAD,eACHtG,MAAOoG,EAAI,YACPL,EAFD,CAGHhB,IAAKuB,EAAO4C,QACZC,YAAa7C,EAAO8C,iC,QCvBrB,IAAMC,EAA0D,SAACnJ,GAAW,IACxEoG,EAAUpG,EAAVoG,OACDF,EAAMC,cAENN,EAAOQ,WAAc,WACvB,IAAM+C,ECXP,SAAgC3F,GACnC,IAAM2F,EAAmC,GAClCC,EAAuB5F,EAAvB4F,cAAe1B,EAAQlE,EAARkE,KAChB2B,EAAU1I,KAAKqB,MACfsH,EAAU7I,IAAQ8I,WAAW7B,GAC7B8B,EAAkB,IAAIC,IAE5B,EAAG,CACC,IAAMnD,EAAW8C,EAAcM,YAAYJ,GACvChD,IACAkD,EAAgBG,QAChBrD,EAASK,SAAQ,SAAAiD,GAAC,OAAIJ,EAAgBnF,IAAIuF,EAAEjC,gBAC5C6B,EAAgB7C,SAAQ,SAAAkD,GAAC,OAAIV,EAAcU,IAAMV,EAAcU,IAAM,GAAK,MAE9EP,EAAQQ,QAAQ,SACXR,EAAQ9B,QAAU6B,GAC3B,OAAOF,EDLmBY,CAAsB5D,GACtCN,EAAmB,GACnBE,EAAmB,GAOzB,OANAlB,OACKmF,QAAQb,GACRxC,SAAQ,YAAuB,IAAD,mBAApBsD,EAAoB,KAAXvF,EAAW,KAC3BmB,EAAOgB,KAAKoD,GACZlE,EAAOc,KAAKG,KAAKC,MAAMvC,OAExB,CAACmB,SAAQE,YACjB,CAACI,IAEJ,OAAO,gBAAC,EAAD,eAAUtG,MAAOoG,EAAI,sBAA0BL,K,SElBnD,IAAMsE,EAAoC,SAACnK,GAAD,OAC7C,kBAAC,IAAD,CACIF,MAAOE,EAAMF,MACbyF,KAAK,MACLM,KAAM,CACFC,OAAQ9F,EAAM8F,OACdC,SAAU,CAAC,CAAEC,OAAQhG,EAAMgG,aCJ1BoE,EAA6D,SAACpK,GAAW,IAC3EoG,EAAUpG,EAAVoG,OACDF,EAAMC,cAENN,EAAOQ,WAAc,WACnB,IAAMC,ECXX,SAA2CF,GAC9C,IAAME,EAAS,IAAIvC,IACbwD,EAAON,KAAKO,KAAI,IAAI9G,KAAU+G,OAAQrB,EAAO7D,IAC5CoF,EAAuBvB,EAAvBuB,KAAM0B,EAAiBjD,EAAjBiD,cAHsD,uBAKnE,YAA6BA,EAA7B,+CAA4C,CAAC,IAAD,6BAAhCvH,EAAgC,KAA1BV,EAA0B,4BACxC,YAA4BA,EAA5B,+CAAoC,CAAC,IAAD,6BAAxBS,EAAwB,KAAjBX,EAAiB,4BAChC,YAA8BA,EAA9B,+CAAoC,CAAC,IAAD,6BAAxBU,EAAwB,KAAnB2E,EAAmB,KAC5B8D,OAAW,EACX1F,EAAQ,EAFoB,uBAGhC,YAAiB4B,EAASP,SAA1B,+CAAoC,CAAC,IAA1BsE,EAAyB,QACzB1C,EAAmC0C,EAAnC1C,YAAanB,EAAsB6D,EAAtB7D,mBACpB,IAAK6D,EAAG5C,QAAQC,EAAMJ,IAAU8C,GAAeA,IAAgBzC,EAAc,CACzEjD,EAAQ,EACR,MAEA0F,EAAczC,EACdjD,GAAgB8B,GAVQ,kFAahC9B,GAAS0F,GAAe/D,EAAOhC,IAC3BK,EACA,CAAC0F,EAAa3J,IAAQ6J,QAAQ,CAACzI,OAAKD,QAAMD,QAAMgH,eAhBxB,oFADI,oFALuB,kFA0BnE,IAAM4B,EAA8B,GAEpC,OADAlE,EAAO7B,QAAQmC,SAAQ,SAAAsD,GAAO,OAAKM,EAASN,GAAW5D,EAAO1B,WAAW,CAACsF,OACnEM,EDjBgBC,CAAkCrE,GACjD,MAAO,CACHN,OAAQhB,OAAOC,KAAKuB,GACpBN,OAAQlB,OAAOkB,OAAOM,GAAQoC,KAAI,SAAAgC,GAAC,OAAIzD,KAAKC,MAAMwD,SAC3D,CAACtE,IAEJ,OAAIP,EACO,gBAAC,EAAD,eAAU/F,MAAOoG,EAAI,sBAA0BL,IAE/C,gBAACwB,EAAA,EAAD,OEzBf,kCAeO,IAAMsD,EAA6D,SAAC3K,GAAW,IAC3EoG,EAAsBpG,EAAtBoG,OAAQnB,EAAcjF,EAAdiF,WAEf,OAAO,gBAAC2F,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAC5B,gBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIhG,GAAc,gBAAC,EAAD,CAAiBmB,OAAQA,EAAQnB,WAAYA,KACtF,gBAAC2F,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAG,gBAAC,EAAD,CAA4B7E,OAAQA,KAC9D,gBAACwE,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAG,gBAAC,EAAD,CAAgB7E,OAAQA,KAClD,gBAACwE,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAG,gBAAC,EAAD,CAAqB7E,OAAQA,KACvD,gBAACwE,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,IAAI,gBAAC,EAAD,CAAuB7E,OAAQA,Q,iCCvBlE,wIAca8E,EAAkD,SAAClL,GAAW,IAEhEmL,EAAkBnL,EAAlBmL,MAAO7K,EAAWN,EAAXM,QACPkD,EAAY2H,EAAMC,OAAlB5H,SACD6H,EAAa,IAAIC,IAAW9H,GAE5B4C,EAAS7C,YAAeC,GACxByB,EAAaD,cACbkB,EAAMC,cAWZ,OATAE,aAAgB,kBACZD,GAAUpG,EAAME,cAAN,UAAuBgG,EAAI,cAA3B,aAA6CE,EAAOW,SAElE,CAACX,IAEDvG,YAAiB,GAAD,OAAIqG,EAAI,eACpB,gBAAC,IAAD,CAAoB5F,QAASA,EAASiC,GAAI8I,EAAW9K,OACrDP,QAEWI,IAAXgG,EACO,gBAAC,IAAD,MAEA,gBAAC,IAAD,CAAuBA,OAAQA,EAAQnB,WAAYA,KAInDiG","file":"static/js/20.814c4289.chunk.js","sourcesContent":["import { useEffect, ReactNode } from \"react\";\nimport { HeaderNotifierProps } from \"../routes\";\n\nexport function useHeaderContext(title: string, actions: ReactNode, props: HeaderNotifierProps) {\n    useEffect(() => {\n        props.onTitleChange(title);\n        props.onActions(actions);\n        return function () {\n            props.onTitleChange('');\n            props.onActions(undefined);\n        }\n    // eslint-disable-next-line\n    }, []);\n}\n","import { History } from \"history\";\n\n/** \n * It navigates back in history if there are enough elements in it to do so. \n * If it can't go back, it will navigate to @param path\n * */\nexport const goBack = (history: History, path = '/') => {\n    if (history.length > 2) {\n        history.goBack();\n    } else {\n        history.replace(path);\n    }\n}\n","import { YMD } from \"../api\";\n\nexport class DateDay implements YMD {\n    private readonly _date: Date;\n\n    constructor(date = new Date()) {\n        this._date = new Date(\n            date.getFullYear(), \n            date.getMonth(), \n            date.getDate());\n    }\n\n    clone() {\n        return new DateDay(this._date);\n    }\n\n    get year () {\n        return this._date.getFullYear();\n    }\n\n    get month () {\n        return this._date.getMonth();\n    }\n\n    get day () {\n        return this._date.getDate();\n    }\n\n    static fromTimeMs (timestampMs: number) {\n        return new DateDay(new Date(timestampMs));\n    }\n\n    static fromYMD (date: YMD) {\n        return new DateDay(new Date(date.year, date.month, date.day));\n    }\n\n    get timeMs () {\n        return this._date.getTime();\n    }\n    \n    get isToday() {\n        return DateDay.isToday(this);\n    }\n\n    /**\n     * @returns current object instance with days added to previous date\n     */\n    addDays (days: number) {\n        this._date.setDate(this._date.getDate() + days);\n        return this;\n    }\n\n    /**\n     * @returns current object instance with months added to previous date\n     */\n    addMonths (months: number) {\n        this._date.setMonth(this._date.getMonth() + months);\n        return this;\n    }\n\n    /**\n     * @returns current object instance with years added to previous date\n     */\n    addYears (years: number) {\n        this._date.setFullYear(this._date.getFullYear() + years);\n        return this;\n    }\n\n    static isToday(date: YMD) {\n        const now = new Date();\n        return date.day === now.getDate() && \n            date.month === now.getMonth() && \n            date.year === now.getFullYear();\n    }\n\n    get shortString () {\n        const dt = new Intl.DateTimeFormat(\n            undefined, \n            {day: 'numeric', month: 'long', year: 'numeric'});\n        return dt.format(this._date);\n    }\n\n    equals(date: DateDay) {\n        return this._date.getTime() === date._date.getTime();\n    }\n}","\nimport * as React from 'react';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { goBack } from '../../domain/utils/goBack';\nimport { History } from 'history';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport const CloseButton: React.FC<{onClick: () => void}> = (props) => (\n    <IconButton \n        color='inherit'\n        aria-label='Close' \n        {...props} \n        onClick={props.onClick}>\n        <CloseIcon/>\n    </IconButton>\n);\n\nexport const CloseButtonHistory: React.FC<{history: History, to?: string}> = (props) => {\n    \n    function handleBack () {\n        goBack(props.history, props.to);\n    }\n\n    return (\n        <CloseButton onClick={handleBack}/>\n    );\n}\n","import { useState, useEffect } from 'react';\nimport { BudgetsStore } from '../domain/stores/interfaces';\nimport { StorageObserver } from '../services/storage/StorageApi';\nimport { useAppContext } from '../contexts/AppContext';\n\nexport function useBudgetsStore() {\n    const [store, setStore] = useState<BudgetsStore>();\n    const btApp = useAppContext();\n\n    useEffect(() => {\n        async function fetchStore () {\n            setStore(await btApp.getBudgetsStore());\n        }\n\n        let isSubscribed = true;\n        if (isSubscribed) {\n            fetchStore();\n        }\n\n        return () => { isSubscribed = false };\n        \n    }, [store, btApp]);\n\n    useEffect(() => {\n        let isSubscribed = true;\n        const observer: StorageObserver = {onStorageDataChanged: () => {\n            setStore(undefined);\n        }};\n\n        if (isSubscribed) {\n            btApp.storage.addObserver(observer);\n        }\n\n        return () => {\n            isSubscribed = false;\n            btApp.storage.deleteObserver(observer);\n        };\n    }, [btApp]);\n\n    return store;\n}","import { useState, useEffect } from 'react';\nimport { BudgetModel } from '../domain/BudgetModel';\nimport { useBudgetsStore } from './useBudgetsStore';\nimport { BudgetsStore } from '../domain/stores/interfaces';\n\nexport function useBudgetModel(budgetId: string) {\n    const store = useBudgetsStore();\n    const [budgetModel, setBudgetModel] = useState<BudgetModel>();\n\n    useEffect(() => {\n        async function fetchBudget (store: BudgetsStore) {\n            setBudgetModel(await store.getBudgetModel(budgetId));\n        }\n        if (budgetId) {\n            let isSubscribed = true;\n\n            if (isSubscribed) {\n                if (store) {\n                    fetchBudget(store);\n                } else {\n                    setBudgetModel(undefined);\n                }\n            }\n            return () => {isSubscribed = false};\n        }\n        \n    }, [budgetId, store]);\n\n    return budgetModel;\n}","import { useState, useEffect } from 'react';\nimport { CategoriesStore } from '../domain/stores/interfaces';\nimport { useAppContext } from '../contexts/AppContext';\n\nexport function useCategoriesStore () {\n    const btApp = useAppContext();\n    const [store, setStore] = useState<CategoriesStore>();\n\n    useEffect(() => {\n        async function fetchStore () {\n            setStore(await btApp.getCategoriesStore());\n        }\n\n        let isSubscribed = true;\n        if (isSubscribed) {\n            fetchStore();\n        }\n\n        return () => { isSubscribed = false };\n        \n    }, [btApp, store]);\n\n    return store;\n}\n","import { ObjectMap } from \"../api\";\n\ndeclare type IndexType = number|string;\n\nexport class NestedTotal {\n    private _total: number;\n    private _subTotals: ObjectMap<NestedTotal>;\n\n    constructor(){\n        this._total = 0;\n        this._subTotals = {};\n    }\n\n    add(n: number, subTotalIndexes?: IndexType[]): number{\n        this._total += n;\n        const subTotal = this._getSubTotal(subTotalIndexes);\n        subTotal && subTotal.add(n, subTotalIndexes);\n        return this._total;\n    }\n\n    subtract(n: number, subTotalIndexes?: IndexType[]): number {\n        return this.add(-n, subTotalIndexes);\n    }\n\n    private _getSubTotal(subTotalIndexes?: IndexType[]): NestedTotal|undefined {\n        if (subTotalIndexes !== undefined) {\n            const index = subTotalIndexes.shift();\n            if (index !== undefined) {\n                if (!(index in this._subTotals)) {\n                    this._subTotals[index] = new NestedTotal();\n                }\n                return this._subTotals[index];\n            }\n        }\n        return undefined;\n    }\n\n    get total() {\n        return this._total;\n    }\n\n    get avg() {\n        return this._total / Object.keys(this._subTotals).length;\n    }\n\n    getSubtotal(indexes: IndexType[]): number {\n        const index = indexes.shift();\n        if (index !== undefined) {\n            if (index in this._subTotals) {\n                return this._subTotals[index].getSubtotal(indexes);\n            } else {\n                return 0;\n            }\n        }\n        return this.total;\n    }\n\n    getAverage(indexes: IndexType[]): number {\n        const index = indexes.shift();\n        if (index !== undefined) {\n            if (index in this._subTotals) {\n                return this._subTotals[index].getAverage(indexes);\n            } else {\n                return 0;\n            }\n        }\n        return this.avg;\n    }\n\n    get indexes () {\n        return Object.keys(this._subTotals);\n    }\n}\n","import { useState, useEffect } from 'react';\nimport { CategoriesMap } from '../api';\nimport { useCategoriesStore } from './useCategoriesStore';\nimport { CategoriesStore } from '../domain/stores/interfaces';\n\nexport function useCategories() {\n    const [categories, setCategories] = useState<CategoriesMap>();\n    const store = useCategoriesStore();\n\n    useEffect(() => {\n        \n        async function fetchCategories (store: CategoriesStore) {\n            const cs = await store.getCategories();\n            setCategories(cs);\n        }\n\n        store && fetchCategories(store);\n    }, [store]);\n\n    return categories;\n}\n","import * as React from \"react\";\nimport ReactFrappeChart from \"react-frappe-charts\";\n\ninterface PieChartProps {\n    title: string;\n    labels: string[];\n    values: number[];\n    maxSlices?: number;\n    onSelect?: (identifier: string) => void;\n}\n\nexport const PieChart: React.FC<PieChartProps> = (props) => {\n    function handleSelect (event: {label: string}) {\n        props.onSelect && props.onSelect(event.label);\n    }\n\n    return <ReactFrappeChart type='percentage' title={props.title} onDataSelect={handleSelect}\n        maxSlices={props.maxSlices||8}\n        data={{\n            labels: props.labels,\n            datasets: [{ values: props.values }], \n        }}\n    />;\n}\n","import * as React from \"react\";\nimport { BudgetModel } from \"../../domain/BudgetModel\";\nimport { CategoriesMap } from \"../../api\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { getTotalsByCategory } from \"../../domain/stats/getTotalsByCategory\";\nimport { PieChart } from \"./charts/Pie\";\nimport { useLoc } from \"../../hooks/useLoc\";\n\ninterface GraphByCategoryProps {\n    budget: BudgetModel, \n    categories: CategoriesMap;\n}\n\n// It might happen that an expense has a category that was already deleted\nfunction getCategoryName (index: string, categories: CategoriesMap) {\n    return categories[index] ? categories[index].name : index;\n}\n\nexport const GraphByCategory: React.FC<GraphByCategoryProps> = (props) => {\n    const loc = useLoc();\n    const {budget, categories} = props;\n\n\n    const data = React.useMemo(() => {\n        if (categories && Object.keys(categories).length > 0) {\n            const labels: string[] = [];\n            const values: number[] = [];\n            const totals = getTotalsByCategory(budget);\n            const indexes = totals.indexes;\n            indexes.forEach((k) => {\n                labels.push(getCategoryName(k, categories));\n                values.push(Math.round(totals.getSubtotal([k,])));\n            });\n            return {labels, values};\n        }\n    }, [budget, categories]);\n\n    function handleCategory (categoryId: string) {\n        console.log(categoryId);\n    }\n\n    if (data) {\n        return <PieChart title={loc('By category')} {...data} onSelect={handleCategory} />;\n    } else {\n        return <CircularProgress/>;\n    }\n}","import { BudgetModel } from \"../BudgetModel\";\nimport { NestedTotal } from \"../NestedTotal\";\n\nexport function getTotalsByCategory (budget: BudgetModel) {\n    const totals = new NestedTotal();\n    for (const expense of budget.expenses) {\n        totals.add(expense.amountBaseCurrency, [expense.categoryId,]);\n    }\n    return totals;\n}\n","import * as React from \"react\";\nimport { BudgetModel } from \"../../domain/BudgetModel\";\nimport { getTotalsByCountry } from \"../../domain/stats/getTotalsByCountry\";\nimport { PieChart } from \"./charts/Pie\";\nimport { useLoc } from \"../../hooks/useLoc\";\n\ninterface GraphByCountryProps {\n    budget: BudgetModel\n}\n\nexport const GraphByCountry: React.FC<GraphByCountryProps> = (props) => {\n    const {budget} = props;\n    const loc = useLoc();\n\n    const data = React.useMemo(() => {\n        const totals = getTotalsByCountry(budget);\n        const indexes = totals.indexes;\n        const labels: string[] = [];\n        const values: number[] = [];\n        indexes.forEach(k => {\n            labels.push(k);\n            values.push(Math.round(totals.getSubtotal([k,])));\n        });\n        return {labels, values};\n    }, [budget]);\n\n    return <PieChart title={loc('By country')} {...data} />;\n}\n","import { BudgetModel } from \"../BudgetModel\";\nimport { NestedTotal } from \"../NestedTotal\";\nimport { DateDay } from \"../DateDay\";\n\nexport function getTotalsByCountry(budget: BudgetModel) {\n    const totals = new NestedTotal();\n    const toMs = Math.min(new DateDay().timeMs, budget.to);\n    for (const expense  of budget.expenses) {\n        if (expense.inDates(budget.from, toMs)) {\n            totals.add(expense.amountBaseCurrency, [expense.countryCode,]);\n        }\n    }\n    return totals;\n}\n","import React from 'react';\nimport ReactFrappeChart from \"react-frappe-charts\";\nimport { DateDay } from \"../../../domain/DateDay\";\n\ninterface TimeLineChartProps {\n    title: string;\n    avg: number;\n    expectedAvg: number;\n    labels: DateDay[];\n    values: number[];\n}\n\nexport const TimeLineChart: React.FC<TimeLineChartProps> = (props) => (\n    <ReactFrappeChart\n        title={props.title}\n        lineOptions={{\n            hideDots: 1, \n            areaFill: 1, \n            heatline: 1, \n            dotSize: 0, \n            hideLine: 0, \n            regionFill: 1 }}\n        type='line'\n        axisOptions={{ xAxisMode: 'tick', yAxisMode: 'tick', xIsSeries: 1}}\n        data={{\n            labels: props.labels.map(d => d.shortString),\n            datasets: [{ \n                values: props.values,\n            }], \n        }}\n    />\n);","import * as React from \"react\";\nimport { BudgetModel } from \"../../domain/BudgetModel\";\nimport { DateDay } from \"../../domain/DateDay\";\nimport { TimeLineChart } from \"./charts/TimeLine\";\nimport { useLoc } from \"../../hooks/useLoc\";\n\ninterface GraphExpensesTimeLineProps {\n    budget: BudgetModel;\n}\n\nexport const GraphExpensesTimeLine: React.FC<GraphExpensesTimeLineProps> = (props) => {\n    const {budget} = props;\n    const loc = useLoc();\n    \n    const data = React.useMemo(() => {\n        const {from, to} = budget;\n        const today = Date.now();\n        const fromDate = new Date(from);\n        const labels = [];\n        const values = [];\n        for (let date=fromDate; date.getTime() <= to && date.getTime() <= today; date.setDate(date.getDate() + 1)) {\n            const {year, month, day} = new DateDay(date);\n            const total = budget.nestedTotalExpenses.getSubtotal([year, month, day]);\n            labels.push(new DateDay(date));\n            values.push(Math.round(total));\n        }\n        return {labels, values};\n    }, [budget]);\n\n    return <TimeLineChart \n        title={loc('By date')} \n        {...data}\n        avg={budget.average}\n        expectedAvg={budget.expectedDailyExpensesAverage}\n         />;\n}","import * as React from \"react\";\nimport { BudgetModel } from \"../../domain/BudgetModel\";\nimport { getTotalDaysByCountry } from \"../../domain/stats/getTotalDaysByCountry\";\nimport { PieChart } from \"./charts/Pie\";\nimport { useLoc } from \"../../hooks/useLoc\";\n\ninterface GraphDaysPerCountryProps {\n    budget: BudgetModel\n}\n\nexport const GraphDaysPerCountry: React.FC<GraphDaysPerCountryProps> = (props) => {\n    const {budget} = props;\n    const loc = useLoc();\n\n    const data = React.useMemo(() => {\n        const daysByCountry = getTotalDaysByCountry(budget);\n        const labels: string[] = [];\n        const values: number[] = [];\n        Object\n            .entries(daysByCountry)\n            .forEach(([country, total]) => {\n                labels.push(country);\n                values.push(Math.round(total));\n            });\n        return {labels, values};\n    }, [budget]);\n\n    return <PieChart title={loc('Days in a country')} {...data} />;\n}\n","import { BudgetModel } from \"../BudgetModel\";\nimport { DateDay } from \"../DateDay\";\nimport { ObjectMap } from \"../../api\";\n\nexport function getTotalDaysByCountry (budgetModel: BudgetModel) {\n    const daysByCountry: ObjectMap<number> = {};\n    const {expenseGroups, from} = budgetModel;\n    const todayMs = Date.now();\n    const fromDay = DateDay.fromTimeMs(from);\n    const countriesInADay = new Set<string>();\n\n    do {\n        const expenses = expenseGroups.getExpenses(fromDay);\n        if (expenses) {\n            countriesInADay.clear();\n            expenses.forEach(e => countriesInADay.add(e.countryCode));\n            countriesInADay.forEach(c => daysByCountry[c] = (daysByCountry[c] || 0) + 1);\n        }\n        fromDay.addDays(1);\n    } while (fromDay.timeMs <= todayMs);\n    return daysByCountry;\n}\n","import React from 'react';\nimport ReactFrappeChart from 'react-frappe-charts';\n\ninterface BarChartProps {\n    title: string;\n    labels: string[];\n    values: number[];\n}\n\nexport const BarChart: React.FC<BarChartProps> = (props) => (\n    <ReactFrappeChart\n        title={props.title}\n        type='bar'\n        data={{\n            labels: props.labels,\n            datasets: [{ values: props.values }], \n        }}\n    />\n);\n","import * as React from \"react\";\nimport { BudgetModel } from \"../../domain/BudgetModel\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { getAverageDailyExpensesPerCountry } from \"../../domain/stats/getAverageDailyExpensesPerCountry\";\nimport { BarChart } from \"./charts/Bar\";\nimport { useLoc } from \"../../hooks/useLoc\";\n\ninterface GraphByCategoryProps {\n    budget: BudgetModel, \n}\n\nexport const GraphDailyAverageByCountry: React.FC<GraphByCategoryProps> = (props) => {\n    const {budget} = props;\n    const loc = useLoc();\n\n    const data = React.useMemo(() => {\n            const totals = getAverageDailyExpensesPerCountry(budget);\n            return {\n                labels: Object.keys(totals), \n                values: Object.values(totals).map(v => Math.round(v))};\n    }, [budget]);\n\n    if (data) {\n        return <BarChart title={loc('Daily avg country')} {...data} />;\n    } else {\n        return <CircularProgress/>;\n    }\n}","import { BudgetModel } from \"../BudgetModel\";\nimport { NestedTotal } from \"../NestedTotal\";\nimport { DateDay } from \"../DateDay\";\nimport { ObjectMap } from \"../../api\";\n\nexport function getAverageDailyExpensesPerCountry(budget: BudgetModel) {\n    const totals = new NestedTotal();\n    const toMs = Math.min(new DateDay().timeMs, budget.to);\n    const {from, expenseGroups} = budget;\n    \n    for (const [year, months] of expenseGroups) {\n        for (const [month, days] of months) {\n            for (const [day, expenses] of days) {\n                let prevCountry;\n                let total = 0;\n                for (const em of expenses.values()) {\n                    const {countryCode, amountBaseCurrency} = em;\n                    if (!em.inDates(from, toMs) || (prevCountry && prevCountry !== countryCode)) {\n                        total = 0;\n                        break;\n                    } else {\n                        prevCountry = countryCode;\n                        total = total + amountBaseCurrency;\n                    }    \n                }\n                total && prevCountry && totals.add(\n                    total, \n                    [prevCountry, DateDay.fromYMD({year,month,day}).shortString])\n            }\n        }\n    }\n    const dailyAvg: ObjectMap<number> = {};\n    totals.indexes.forEach(country => (dailyAvg[country] = totals.getAverage([country])));\n    return dailyAvg;\n}\n","import * as React from \"react\";\nimport { GraphByCategory } from \"./GraphByCategory\";\nimport { GraphByCountry } from \"./GraphByCountry\";\nimport { GraphExpensesTimeLine } from \"./GraphExpensesTimeLine\";\nimport { GraphDaysPerCountry } from \"./GraphDaysPerCountry\";\nimport { BudgetModel } from \"../../domain/BudgetModel\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { GraphDailyAverageByCountry } from \"./GraphDailyAverageByCountry\";\nimport { CategoriesMap } from \"../../api\";\n\ninterface BudgetStatsComponentProps {\n    budget: BudgetModel;\n    categories?: CategoriesMap;\n}\n\nexport const BudgetStatsComponents: React.FC<BudgetStatsComponentProps> = (props) => {\n    const {budget, categories} = props;\n\n    return <Grid container spacing={3}>\n        <Grid item xs={12} sm={6}>{categories && <GraphByCategory budget={budget} categories={categories} />}</Grid>\n        <Grid item xs={12} sm={6}><GraphDailyAverageByCountry budget={budget}/></Grid>\n        <Grid item xs={12} sm={6}><GraphByCountry budget={budget}/></Grid>\n        <Grid item xs={12} sm={6}><GraphDaysPerCountry budget={budget}/></Grid>\n        <Grid item xs={12} sm={12}><GraphExpensesTimeLine budget={budget}/></Grid>\n    </Grid>;\n}\n","import * as React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { HeaderNotifierProps } from \"../../routes\";\nimport { useBudgetModel } from \"../../hooks/useBudgetModel\";\nimport { BudgetPath } from \"../../domain/paths/BudgetPath\";\nimport { CloseButtonHistory } from \"../../components/buttons/CloseButton\";\nimport { BudgetStatsComponents } from \"../../components/stats/BudgetStats\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useLoc } from \"../../hooks/useLoc\";\nimport { useHeaderContext } from \"../../hooks/useHeaderContext\";\nimport { useCategories } from \"../../hooks/useCategories\";\n\ninterface BudgetStatsViewProps extends RouteComponentProps<{ budgetId: string }>, HeaderNotifierProps{}\n\nexport const BudgetStatsView: React.FC<BudgetStatsViewProps> = (props) => {\n    \n    const {match, history} = props;\n    const {budgetId} = match.params;\n    const budgetPath = new BudgetPath(budgetId);\n    \n    const budget = useBudgetModel(budgetId);\n    const categories = useCategories();\n    const loc = useLoc();\n\n    React.useEffect(() => (\n        budget && props.onTitleChange(`${loc('Statistics')}: ${budget.name}`)),\n    // eslint-disable-next-line \n    [budget]);\n\n    useHeaderContext(`${loc('Statistics')}`, \n        <CloseButtonHistory history={history} to={budgetPath.path}/>, \n        props);\n\n    if (budget === undefined) {\n        return <CircularProgress/>;\n    } else {\n        return <BudgetStatsComponents budget={budget} categories={categories}/>;\n    }\n}\n\nexport default BudgetStatsView;\n"],"sourceRoot":""}