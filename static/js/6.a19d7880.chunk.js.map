{"version":3,"sources":["domain/utils/applyRate.ts","domain/date.ts","domain/NestedTotal.ts","domain/DateDay.ts","domain/ExpenseModel.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","domain/ExpensesYearMap.ts","domain/BudgetModelImpl.ts","domain/stores/BudgetsStoreImpl.ts"],"names":["applyRate","amount","rate","DAY_MS","dateDiff","from","to","Math","floor","NestedTotal","_total","_subTotals","this","n","subTotalIndexes","subTotal","_getSubTotal","add","undefined","index","shift","indexes","getSubtotal","total","getAverage","avg","Object","keys","length","DateDay","date","Date","_date","getFullYear","getMonth","getDate","days","setDate","months","setMonth","years","setFullYear","getTime","isToday","Intl","DateTimeFormat","day","month","year","format","timestampMs","now","ExpenseModel","info","amountBaseCurrency","currency","categoryId","countryCode","description","identifier","when","budgetId","splitInDays","validate","budget","fromMs","toMs","totals","split","em","dateParts","subtract","fieldErrors","push","Error","join","expenses","i","fromTimeMs","addDays","timeMs","JSON","stringify","values","map","e","reduce","a","b","_typeof2","obj","Symbol","iterator","constructor","prototype","_typeof","_possibleConstructorReturn","self","call","ReferenceError","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_setPrototypeOf","p","_inherits","subClass","superClass","TypeError","create","value","writable","configurable","Parent","args","Class","Reflect","construct","sham","Proxy","toString","isNativeReflectConstruct","apply","instance","Function","bind","arguments","_cache","Map","fn","indexOf","has","get","set","Wrapper","enumerable","ExpensesYearMap","expense","ExpensesMonthMap","addExpense","deleteExpense","size","delete","ExpensesDayMap","m","addDailyExpensesByDate","dayExpenses","getExpenses","addExpensesByDate","inputDays","output","d","input","expensesMap","BudgetModelImpl","_info","_expenses","_expenseGroups","_nestedTotalExpenses","_days","_totalDays","nestedTotalExpenses","expenseGroups","getAllGroupedByDate","newExpense","oldExpense","_subtractTotal","_addToTotal","oldExpenses","oe","_updateTotalExpenses","ne","expenseId","rates","newTotals","_getBaseAmount","addToTotals","inBudgetDates","subtractTotal","_updateExpensesBaseAmount","name","Promise","resolve","categories","forEach","id","budgets","lastTimeSaved","daysUntilToday","totalExpenses","round","totalDays","eg","splitExpense","base","BudgetsStoreImpl","app","_budgetModels","_app","_storage","storage","addObserver","clear","getBudgets","bm","getBudget","budgetModel","getCurrenciesStore","getRates","setBudget","getBudgetModel","model","setExpense","setExpenses","getExpense","deleteBudget","all","data","fixedCategories","entries","setBudgets","setExpensesList","getCategoriesStore","setCategories","getCategories","getBudgetsIndex"],"mappings":"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","file":"static/js/6.a19d7880.chunk.js","sourcesContent":["\nexport default function applyRate (amount: number, rate: number) {\n    return amount / rate;\n}\n","\nconst DAY_MS = 1000*60*60*24;\n\n/**\n * Get difference between 2 dates in days, including from and to dates.\n * @param from - Starting period timestamp\n * @param to - Ending period timestamp\n */\nexport function dateDiff(from: number, to: number) {\n    return Math.floor((to - from)/DAY_MS) + 1;\n}\n\n/** \n * @returns Date (without time) as string type in ISO format\n */\nexport function getISODateString (date = new Date()) {\n    return date.toISOString().slice(0,10);\n}\n\n/** \n * @returns month name from Date input\n */\nexport function monthToString (month: number) {\n    const dt = new Intl.DateTimeFormat(undefined, {month: 'long'});\n    return dt.format(new Date(2000, month, 1));\n}\n\n/** \n * @returns month and year name from Date input\n */\nexport function monthYearToString (year: number, month: number) {\n    const dt = new Intl.DateTimeFormat(undefined, {month: 'long', year: 'numeric'});\n    return dt.format(new Date(year, month, 1));\n}\n","import { ObjectMap } from \"../api\";\n\ndeclare type IndexType = number|string;\n\nexport class NestedTotal {\n    private _total: number;\n    private _subTotals: ObjectMap<NestedTotal>;\n\n    constructor(){\n        this._total = 0;\n        this._subTotals = {};\n    }\n\n    add(n: number, subTotalIndexes?: IndexType[]): number{\n        this._total += n;\n        const subTotal = this._getSubTotal(subTotalIndexes);\n        subTotal && subTotal.add(n, subTotalIndexes);\n        return this._total;\n    }\n\n    subtract(n: number, subTotalIndexes?: IndexType[]): number {\n        return this.add(-n, subTotalIndexes);\n    }\n\n    private _getSubTotal(subTotalIndexes?: IndexType[]): NestedTotal|undefined {\n        if (subTotalIndexes !== undefined) {\n            const index = subTotalIndexes.shift();\n            if (index !== undefined) {\n                if (!(index in this._subTotals)) {\n                    this._subTotals[index] = new NestedTotal();\n                }\n                return this._subTotals[index];\n            }\n        }\n        return undefined;\n    }\n\n    get total() {\n        return this._total;\n    }\n\n    get avg() {\n        return this._total / Object.keys(this._subTotals).length;\n    }\n\n    getSubtotal(indexes: IndexType[]): number {\n        const index = indexes.shift();\n        if (index !== undefined) {\n            if (index in this._subTotals) {\n                return this._subTotals[index].getSubtotal(indexes);\n            } else {\n                return 0;\n            }\n        }\n        return this.total;\n    }\n\n    getAverage(indexes: IndexType[]): number {\n        const index = indexes.shift();\n        if (index !== undefined) {\n            if (index in this._subTotals) {\n                return this._subTotals[index].getAverage(indexes);\n            } else {\n                return 0;\n            }\n        }\n        return this.avg;\n    }\n\n    get indexes () {\n        return Object.keys(this._subTotals);\n    }\n}\n","import { YMD } from \"../api\";\n\nexport class DateDay implements YMD {\n    private readonly _date: Date;\n\n    constructor(date = new Date()) {\n        this._date = new Date(\n            date.getFullYear(), \n            date.getMonth(), \n            date.getDate());\n    }\n\n    clone() {\n        return new DateDay(this._date);\n    }\n\n    get year () {\n        return this._date.getFullYear();\n    }\n\n    get month () {\n        return this._date.getMonth();\n    }\n\n    get day () {\n        return this._date.getDate();\n    }\n\n    static fromTimeMs (timestampMs: number) {\n        return new DateDay(new Date(timestampMs));\n    }\n\n    static fromYMD (date: YMD) {\n        return new DateDay(new Date(date.year, date.month, date.day));\n    }\n\n    get timeMs () {\n        return this._date.getTime();\n    }\n    \n    get isToday() {\n        return DateDay.isToday(this);\n    }\n\n    /**\n     * @returns current object instance with days added to previous date\n     */\n    addDays (days: number) {\n        this._date.setDate(this._date.getDate() + days);\n        return this;\n    }\n\n    /**\n     * @returns current object instance with months added to previous date\n     */\n    addMonths (months: number) {\n        this._date.setMonth(this._date.getMonth() + months);\n        return this;\n    }\n\n    /**\n     * @returns current object instance with years added to previous date\n     */\n    addYears (years: number) {\n        this._date.setFullYear(this._date.getFullYear() + years);\n        return this;\n    }\n\n    static isToday(date: YMD) {\n        const now = new Date();\n        return date.day === now.getDate() && \n            date.month === now.getMonth() && \n            date.year === now.getFullYear();\n    }\n\n    get shortString () {\n        const dt = new Intl.DateTimeFormat(\n            undefined, \n            {day: 'numeric', month: 'long', year: 'numeric'});\n        return dt.format(this._date);\n    }\n\n    equals(date: DateDay) {\n        return this._date.getTime() === date._date.getTime();\n    }\n}","import { Budget, Expense } from \"../api\";\nimport { NestedTotal } from \"./NestedTotal\";\nimport { DateDay } from \"./DateDay\";\n\nexport class ExpenseModel implements Expense {\n\n    private _date?: DateDay;\n    readonly amount: number;\n    amountBaseCurrency: number;\n    readonly currency: string;\n    readonly categoryId: string;\n    readonly countryCode: string;\n    readonly description?: string;\n    readonly identifier: string;\n    readonly when: number;\n    readonly budgetId: string;\n    readonly splitInDays: number;\n\n    constructor (info: Expense) {\n        this.identifier = info.identifier;\n        this.amountBaseCurrency = info.amountBaseCurrency;\n        this.amount = info.amount;\n        this.currency = info.currency;\n        this.categoryId = info.categoryId;\n        this.countryCode = info.countryCode;\n        this.description = info.description;\n        this.when = info.when;\n        this.budgetId = info.budgetId;\n        this.splitInDays = info.splitInDays > 0 ? info.splitInDays : 1;\n        this.validate();\n    }\n\n    get info (): Expense {\n        const { amount, amountBaseCurrency, categoryId, countryCode, currency, description, identifier, when, budgetId, splitInDays} = this;\n        return { amount, amountBaseCurrency, categoryId, description, identifier, when, countryCode, currency, budgetId, splitInDays};\n    }\n\n    get json (): string {\n        return JSON.stringify(this.info);\n    }\n\n    get date () {\n        if (!this._date) {\n            this._date = DateDay.fromTimeMs(this.when);\n        }\n        return this._date;\n    }\n\n    get day () {\n        return this.date.day;\n    }\n\n    get month () {\n        return this.date.month;\n    }\n\n    get year () {\n        return this.date.year;\n    }\n\n    get dateParts (): number[] {\n        return [this.year, this.month, this.day];\n    }\n\n    static sum(expenses: Iterable<Expense>){\n        return Object.values(expenses)\n            .map(e => e.amountBaseCurrency)\n            .reduce((a, b) => a + b);\n    }\n\n    inBudgetDates (budget: Budget) {\n        return this.when <= budget.to && this.when >= budget.from;\n    }\n\n    inDates (fromMs: number, toMs: number) {\n        return this.when <= toMs && this.when >= fromMs;\n    }\n\n    addToTotals(totals: NestedTotal) {\n        for (const em of this.split()) {\n            totals.add(em.amountBaseCurrency, em.dateParts);\n        }\n    }\n\n    subtractTotal(totals: NestedTotal) {\n        for (const em of this.split()) {\n            totals.subtract(em.amountBaseCurrency, em.dateParts);\n        }\n    }\n\n    validate () {\n        const fieldErrors = [];\n        if (this.budgetId === undefined) {\n            fieldErrors.push('budget identifier');\n        }\n        if (this.amountBaseCurrency === undefined) {\n            fieldErrors.push('amount in base currency');\n        }\n        if (this.countryCode.length !== 2) {\n            fieldErrors.push('country code');\n        }\n        if (this.currency.length !== 3) {\n            fieldErrors.push('currency code');\n        }\n        if (fieldErrors.length > 0) {\n            throw Error(`Invalid expense (${this.identifier}) fields: ${fieldErrors.join(', ')}`);\n        }\n    }\n\n    /** \n     * @returns List of split expenses, first element will be current split expense\n     */\n    split(): ExpenseModel[] {\n        if (this.splitInDays < 1) {\n            throw Error('You cannot split an expense in less than one piece');\n        } else if (this.splitInDays === 1) {\n            return [this];\n        } else {\n            const amountBaseCurrency =  this.amountBaseCurrency / this.splitInDays;\n            const amount = this.amount / this.splitInDays;\n            const expenses = [new ExpenseModel({...this, amount, amountBaseCurrency})];\n            for (let i=1; i<this.splitInDays; i++) {\n                expenses.push(new ExpenseModel({\n                    ...this,\n                    amount, \n                    amountBaseCurrency,\n                    when: DateDay.fromTimeMs(this.when).addDays(i).timeMs,\n                }));\n            }\n            return expenses;\n        }\n    }\n}\n","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nexport default function _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import setPrototypeOf from \"./setPrototypeOf\";\n\nfunction isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf\";\nimport setPrototypeOf from \"./setPrototypeOf\";\nimport isNativeFunction from \"./isNativeFunction\";\nimport construct from \"./construct\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","import { ExpenseModel } from \"./ExpenseModel\";\nimport { YMD } from \"../api\";\n\nexport class ExpensesYearMap extends Map<number, ExpensesMonthMap> {\n\n    addExpense(expense: ExpenseModel) {\n        const { year } = expense;\n        let months = this.get(year);\n        if (months === undefined) {\n            months = new ExpensesMonthMap();\n            this.set(year, months);\n        }\n        months.addExpense(expense);\n    }\n\n    deleteExpense(expense: ExpenseModel) {\n        const {year} = expense;\n        const months = this.get(year);\n        if (months && months.deleteExpense(expense)) {\n            if (months.size === 0) {\n                this.delete(year);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    getExpenses({year, month, day}: YMD) {\n        const months = this.get(year);\n        if (months) {\n            const days = months.get(month);\n            if (days) {\n                return days.get(day);\n            }\n        }\n    }\n\n    private static addDailyExpensesByDate (inputDays: ExpensesDayMap, output: ExpensesDayMap) {\n        for (const d of inputDays.values()) {\n            ExpensesYearMap.addExpensesByDate(d.values(), output);\n        }\n    }\n\n    static addExpensesByDate (input: Iterable<ExpenseModel>, output: ExpensesDayMap = new ExpensesDayMap()) {\n        for (const e of input) {\n            let expensesMap = output.get(e.when);\n            if (!expensesMap) {\n                expensesMap = new Map();\n                output.set(e.when, expensesMap);\n            }\n            expensesMap.set(e.identifier, e);\n        }\n        return output;\n    }\n\n    getAllGroupedByDate(year: number, month?: number, day?: number): ExpensesDayMap | undefined {\n        const expenses: ExpensesDayMap = new ExpensesDayMap();\n        if (month === undefined) {\n            const months = this.get(year);\n            if (months) {\n                for (const m of months.values()) {\n                    ExpensesYearMap.addDailyExpensesByDate(m, expenses);\n                }    \n            }\n        } else if (day === undefined) {\n            const months = this.get(year);\n            if (months) {\n                const days = months.get(month);\n                if (days) {\n                    ExpensesYearMap.addDailyExpensesByDate(days, expenses);\n                }\n            }\n        } else {\n            const dayExpenses = this.getExpenses({year, month, day});\n            dayExpenses && ExpensesYearMap.addExpensesByDate(dayExpenses.values(), expenses);\n        }\n        return expenses;\n    }\n\n    getExpense(date: YMD, identifier: string){\n        const expenses = this.getExpenses(date);\n        if (expenses) {\n            return expenses.get(identifier);\n        }\n    }\n\n    getMonths(year: number): Iterable<number> {\n        const months = this.get(year);\n        return months ? months.keys() : [];\n    }\n\n    getDays(year: number, month: number): Iterable<number> {\n        const months = this.get(year);\n        if (months) {\n            const days = months.get(month);\n            return days ? days.keys() : [];\n        }\n        return [];\n    }\n\n    get years(): Iterable<number> {\n        return this.keys();\n    }\n\n}\n\nexport class ExpensesMonthMap extends Map<number, ExpensesDayMap> { \n    addExpense(expense: ExpenseModel) {\n        const { month } = expense;\n        \n        let days = this.get(month);\n        if (days === undefined) {\n            days = new ExpensesDayMap();\n            this.set(month, days);\n        }\n        days.addExpense(expense);\n    }\n\n    deleteExpense(expense: ExpenseModel) {\n        const {month} = expense;\n        const days = this.get(month);\n        if (days && days.deleteExpense(expense)) {\n            if (days.size === 0) {\n                this.delete(month);\n            }\n            return true;\n        }\n        return false;\n    }\n}\n\nexport class ExpensesDayMap extends Map<number, Map<string, ExpenseModel>> { \n\n    addExpense(expense: ExpenseModel) {\n        const {day} = expense;\n        let expenses = this.get(day);\n        if (expenses === undefined) {\n            expenses = new Map<string, ExpenseModel>();\n            this.set(day, expenses);\n        }\n        expenses.set(expense.identifier, expense);\n    }\n\n    deleteExpense(expense: ExpenseModel) {\n        const {day, identifier} = expense;\n        const expenses = this.get(day);\n        if (expenses && expenses.delete(identifier)) {\n            if (expenses.size === 0) {\n                this.delete(day);\n            }\n            return true;\n        }\n        return false;\n    }\n    \n}","import { Budget, Expense, CategoriesMap, CurrencyRates, ExpensesMap, ExportDataSet } from \"../api\";\nimport { dateDiff } from \"./date\";\nimport { NestedTotal } from \"./NestedTotal\";\nimport { ExpenseModel } from \"./ExpenseModel\";\nimport applyRate from \"./utils/applyRate\";\nimport { BudgetModel } from \"./BudgetModel\";\nimport { ExpensesYearMap, ExpensesDayMap } from \"./ExpensesYearMap\";\n\nexport class BudgetModelImpl implements BudgetModel {\n\n    private readonly _info: Budget;\n    private readonly _expenses: Map<string, ExpenseModel>;\n    private _expenseGroups?: ExpensesYearMap;\n\n    private _nestedTotalExpenses?: NestedTotal;\n\n    private _days?: number;\n    private _totalDays?: number;\n\n    constructor(info: Budget, expenses: Iterable<Expense> = []) {\n        this._info = info;\n        this._expenses = new Map();\n        for (const expense of expenses) {\n            this._expenses.set(\n                expense.identifier, \n                new ExpenseModel(expense));\n        }\n    }\n\n    get numberOfExpenses() {\n        return this._expenses.size;\n    }\n\n    get identifier() {\n        return this._info.identifier;\n    }\n\n    get currency() {\n        return this._info.currency;\n    }\n\n    get from() {\n        return this._info.from;\n    }\n\n    get name() {\n        return this._info.name;\n    }\n\n    get to() {\n        return this._info.to;\n    }\n\n    get total() {\n        return this._info.total;\n    }\n\n    get info() {\n        return this._info;\n    }\n\n    get expenses() {\n        return this._expenses.values();\n    }\n\n    get totalExpenses() {\n        return this.nestedTotalExpenses.total;\n    }\n\n    get nestedTotalExpenses() {\n        if (this._nestedTotalExpenses === undefined) {\n            this._nestedTotalExpenses = new NestedTotal();\n            this._expenses.forEach(e => this._addToTotal(e));\n        }\n        return this._nestedTotalExpenses;\n    }\n\n    getTotalExpenses(year: number, month?: number, day?: number) {\n        const keys = [year];\n        month !== undefined && keys.push(month);\n        day !== undefined && keys.push(day);\n        return this.nestedTotalExpenses.getSubtotal(keys);\n    }\n\n    getExpensesByDay (year?: number, month?: number, day?: number): ExpensesDayMap | undefined {\n        if (year === undefined) {\n            return ExpensesYearMap.addExpensesByDate(this._expenses.values());\n        } else {\n            return this.expenseGroups.getAllGroupedByDate(year, month, day);\n        }\n    }\n\n    private _updateTotalExpenses(newExpense: ExpenseModel, oldExpense?: ExpenseModel) {\n        if (oldExpense === undefined ||\n            oldExpense.splitInDays !== newExpense.splitInDays ||\n            oldExpense.amountBaseCurrency !== newExpense.amountBaseCurrency ||\n            oldExpense.when !== newExpense.when ||\n            oldExpense.categoryId !== newExpense.categoryId ||\n            oldExpense.countryCode !== newExpense.countryCode) {\n            if (oldExpense) {\n                this._subtractTotal(oldExpense);\n            }\n            this._addToTotal(newExpense);\n        }\n    }\n\n    setExpense(expense: Expense) {\n        const newExpense = new ExpenseModel(expense);\n        const oldExpense = this._expenses.get(expense.identifier);\n        if (oldExpense) {\n            const oldExpenses = oldExpense.split();\n            for (const oe of oldExpenses) {\n                this.expenseGroups.deleteExpense(oe);\n            }\n            this._updateTotalExpenses(newExpense, oldExpense);\n        } else {\n            this._updateTotalExpenses(newExpense);\n        }\n        for (const ne of newExpense.split()) {\n            this.expenseGroups.addExpense(ne);\n        }\n        this._expenses.set(expense.identifier, newExpense);\n    }\n\n    getExpense(expenseId: string): ExpenseModel {\n        const expense = this._expenses.get(expenseId);\n        if (expense) {\n            return expense;\n        }\n        throw new Error(`Expense with ID \"${expenseId}\" not found`);\n    }\n\n    get daysUntilToday() {\n        if (!this._days) {\n            this._days = dateDiff(this._info.from, Date.now());\n        }\n        return this._days;\n    }\n\n    get totalDays() {\n        if (!this._totalDays) {\n            this._totalDays = dateDiff(this._info.from, this._info.to);\n        }\n        return this._totalDays;\n    }\n\n    get average() {\n        if (this.daysUntilToday > 0 && this.totalExpenses > 0) {\n            return Math.round(this.totalExpenses / this.daysUntilToday);\n        } else {\n            return 0;\n        }\n    }\n\n    get expectedDailyExpensesAverage() {\n        return Math.round(this._info.total / this.totalDays);\n    }\n\n    deleteExpense(expenseId: string) {\n        const expense = this._expenses.get(expenseId);\n        if (expense && this._expenses.delete(expenseId)) {\n            this._subtractTotal(expense);\n            this.expenseGroups.deleteExpense(expense);\n            return true;\n        }\n        return false;\n    }\n\n    get expenseGroups() {\n        if (!this._expenseGroups) {\n            const eg = new ExpensesYearMap();\n            this._expenses\n                .forEach(expense => expense.split()\n                .forEach(splitExpense => eg.addExpense(splitExpense)));\n            this._expenseGroups = eg;\n        }\n        return this._expenseGroups;\n    }\n\n    private static _getBaseAmount(expense: Expense, rates: CurrencyRates) {\n        const {currency, amount} = expense;\n        if (rates.base === currency) {\n            return amount;\n        } else {\n            const rate = rates.rates[currency];\n            if (rate === undefined) {\n                throw new Error(`Cannot get currency exchange rate from ${rates.base} to ${currency}`);\n            }\n            return applyRate(amount, rate);\n        }\n    }\n\n    private _updateExpensesBaseAmount(rates: CurrencyRates) {\n        const newTotals = new NestedTotal();\n        for (const expense of this._expenses.values()) {\n            expense.amountBaseCurrency = BudgetModelImpl._getBaseAmount(expense, rates);\n            expense.addToTotals(newTotals);\n        }\n        this._nestedTotalExpenses = newTotals;\n    }\n\n    private _addToTotal(expense: ExpenseModel) {\n        if (expense.inBudgetDates(this._info)) {\n            expense.addToTotals(this.nestedTotalExpenses);\n        }\n    }\n\n    private _subtractTotal(expense: ExpenseModel) {\n        if (expense.inBudgetDates(this._info)) {\n            expense.subtractTotal(this.nestedTotalExpenses);\n        }\n    }\n\n    async setBudget(info: Budget, rates?: CurrencyRates) {\n        if (info.identifier !== this.identifier) {\n            throw new Error('Cannot update budget information with different IDs');\n        }\n\n        if (info.currency !== this._info.currency) {\n            if (!rates) {\n                throw new Error('Required conversion rates to update budget currency');\n            }\n            this._updateExpensesBaseAmount(rates);\n            this._info.currency = info.currency;\n        }\n\n        this._info.name = info.name;\n        this._info.total = info.total;\n\n        if (this._info.from !== info.from) {\n            this._days = this._totalDays = undefined;\n            this._info.from = info.from;\n        }\n\n        if (this._info.to !== info.to) {\n            this._days = this._totalDays = undefined;\n            this._info.to = info.to;\n        }\n\n        return Promise.resolve();\n    }\n\n    export(categories: CategoriesMap): ExportDataSet {\n        const expenses: ExpensesMap = {};\n        this._expenses.forEach((e, id) => (expenses[id] = e.info));\n        return {\n            budgets: { [this.identifier]: this.info },\n            expenses,\n            categories,\n            lastTimeSaved: Date.now()\n        };\n    }\n}\n","import { Budget, Expense, ExportDataSet, BudgetTracker, YMD } from \"../../api\";\nimport { BudgetModel } from \"../BudgetModel\";\nimport { BudgetsStore } from \"./interfaces\";\nimport { AppStorageApi, StorageObserver } from \"../../services/storage/StorageApi\";\nimport { BudgetModelImpl } from \"../BudgetModelImpl\";\n\nexport class BudgetsStoreImpl implements BudgetsStore, StorageObserver {\n\n    private _budgetModels: Map<string, BudgetModel>;\n    private readonly _app: BudgetTracker;\n    private readonly _storage: AppStorageApi;\n\n    constructor (app: BudgetTracker) {\n        this._budgetModels = new Map();\n        this._app = app;\n        this._storage = app.storage;\n        this._storage.addObserver(this);\n    }\n\n    onStorageDataChanged () {\n        this._budgetModels.clear();\n    }\n\n    async getBudgetsIndex(){\n        return this._storage.getBudgets();\n    }\n\n    async getBudgetModel(budgetId: string) {\n        let bm = this._budgetModels.get(budgetId);\n        if (bm === undefined) {\n            const budget = await this._storage.getBudget(budgetId);\n            const expenses = await this._storage.getExpenses(budgetId);\n            if (budget) {\n                bm = new BudgetModelImpl(budget, Object.values(expenses));\n                this._budgetModels.set(budgetId, bm);\n            } else {\n                throw new Error('Budget not found: ' + budgetId);\n            }\n        }\n        return bm;\n    }\n\n    async setBudget(budget: Budget) {\n        const budgetModel = this._budgetModels.get(budget.identifier);\n        if (budgetModel) {\n            let rates = undefined;\n            if (budgetModel.currency !== budget.currency) {\n                rates = await (await this._app.getCurrenciesStore()).getRates(budget.currency);\n            }\n            await budgetModel.setBudget(budget, rates);\n        } else {\n            this._budgetModels.set(budget.identifier, new BudgetModelImpl(budget));\n        }\n        return this._storage.setBudget(budget); \n    }\n\n    async getExpenses(budgetId: string) {\n        return (await this.getBudgetModel(budgetId)).expenses;\n    }\n\n    async getExpensesByDay(budgetId: string, date: YMD) {\n        const budgetModel = await this.getBudgetModel(budgetId);\n        if (budgetModel.expenseGroups) {\n            const expenses = budgetModel.expenseGroups.getExpenses(date);\n            if (expenses) {\n                return expenses;\n            }\n        }\n        throw new Error('No expenses found');\n    }\n\n    async setExpenses(budgetId: string, expenses: Expense[]) {\n        const model = await this.getBudgetModel(budgetId);\n        for (const expense of expenses) {\n            model.setExpense(expense);\n        }\n        return this._storage.setExpenses(expenses);\n    }\n\n    async getExpense(budgetId: string, expenseId: string){\n        return (await this.getBudgetModel(budgetId)).getExpense(expenseId);\n    }\n\n    async deleteBudget(budgetId: string) {\n        this._budgetModels.delete(budgetId);\n        return this._storage.deleteBudget(budgetId);\n    }\n\n    async deleteExpense(budgetId: string, expenseId: string) {\n        const model = await this.getBudgetModel(budgetId);\n        model.deleteExpense(expenseId);\n        return this._storage.deleteExpense(expenseId);\n    }\n\n    private async setBudgets(budgets: Budget[]) {\n        return Promise.all(budgets.map(b => this.setBudget(b)));\n    }\n\n    private async setExpensesList(expenses: Expense[]) {\n        return Promise.all(expenses.map(expense => this.setExpense(expense)));\n    }\n\n    private async setExpense(expense: Expense) {\n        const model = await this.getBudgetModel(expense.budgetId);\n        model.setExpense(expense);\n        return this._storage.setExpenses([expense]);\n    }\n\n    async import(data: ExportDataSet) {\n        const {budgets, expenses, categories} = data;\n        // Keep BC compatibility Category.id -> Category.identifier\n        const fixedCategories = Object\n            .entries(categories)\n            .map(([identifier, c]) => ({identifier, ...c}));\n        await Promise.all([\n            this.setBudgets(Object.values(budgets)), \n            this.setExpensesList(Object.values(expenses)), \n            (await this._app.getCategoriesStore()).setCategories(fixedCategories)\n        ]);\n    }\n\n    async export() {\n        const data: ExportDataSet = {\n            budgets: {},\n            expenses: {},\n            categories: await (await this._app.getCategoriesStore()).getCategories(),\n            lastTimeSaved: Date.now()\n        };\n        const budgets = await Promise.all(Object.keys(await this.getBudgetsIndex()).map(id => this.getBudgetModel(id)));\n        for (const bm of budgets) {\n            data.budgets[bm.identifier] = bm.info;\n            for (const e of bm.expenses) {\n                data.expenses[e.identifier] = e.info;\n            }\n        }\n        return data;\n    }\n}\n"],"sourceRoot":""}