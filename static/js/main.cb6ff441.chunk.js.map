{"version":3,"sources":["domain/paths/index.ts","domain/paths/BudgetPath.ts","domain/paths/CategoryPaths.ts","contexts/AppContext.ts","hooks/useLoc.tsx","components/snackbars.tsx","domain/utils/uuid.ts","domain/paths/ExpensePath.ts","serviceWorker.ts","components/Menu.tsx","components/Header.tsx","routes.tsx","api.ts","components/ErrorBoundary.tsx","App.tsx","services/storage/DataSync.ts","services/storage/AppStorageManager.ts","services/storage/IndexedDb.ts","services/LocalizationStoreImpl.ts","index.tsx","BudgetTrackerImpl.ts"],"names":["AppPaths","BudgetPath","budgetId","path","this","base","year","month","day","monthPart","undefined","dayPart","pathExpenses","categoryId","identifiers","usp","URLSearchParams","id","append","combined","toString","CategoryPaths","AppContext","createContext","AppProvider","Provider","Consumer","useAppContext","context","useContext","Error","useLoc","app","key","localization","get","SnackbarApp","props","React","useState","close","setClose","type","messageId","handleClose","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","ContentProps","message","action","aria-label","color","onClick","SnackbarError","SnackbarInfo","uuid","nanoid","ExpensePath","expenseId","budgetUrl","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","AppMenu","anchorEl","setAnchorEl","loc","AppMenuItem","ref","MenuItem","component","Link","to","name","IconButton","edge","event","currentTarget","keepMounted","List","ImportExport","Sync","About","Header","AppBar","position","Toolbar","Typography","variant","style","flexGrow","title","actions","routes","BudgetView","BudgetList","BudgetCombined","BudgetEdit","BudgetStats","BudgetExport","ExpenseView","ExpenseAdd","ExpensesView","CategoryList","AddCategory","Privacy","_render","ComponentType","parentProps","fallback","CircularProgress","SyncDirection","EntityNames","expenseUrl","Routes","exact","render","add","pathEdit","pathStats","pathExport","pathAddExpense","Add","ErrorBoundary","info","setState","children","App","setTitle","setActions","basename","value","btApp","CssBaseline","Container","maxWidth","Box","mt","marginBottom","onTitleChange","onActions","DataSync","from","constructor","debug","export","pending","import","AppStorageManager","local","remote","observers","Set","observer","delete","forEach","o","onStorageDataChanged","deviceId","localStorage","getItem","setItem","sync","Promise","all","getLastTimeSaved","remoteTime","localTime","notifyObservers","getBudget","getBudgets","getExpenses","budget","timestamp","Date","now","localPromise","setBudget","deleteBudget","getExpense","expenses","setExpenses","deleteExpense","getCategory","getCategories","categories","setCategories","identifier","deleteCategory","keyPath","IndexedDb","version","_db","openDB","upgrade","db","createObjectStore","Budgets","createIndex","Categories","Expenses","storage","persist","warn","enablePersistentStorage","createDb","getDb","bound","IDBKeyRange","upperBound","getAllFromIndex","budgetsResult","budgetMap","b","put","deleted","setLastTimeSaved","tx","transaction","store","done","expensesResult","e","getAll","expensesMap","expense","categoriesResult","c","category","objectStore","data","dbProps","lastTimeSaved","budgets","getAllExpenses","parseInt","DEFAULT_LANG","LANG_STRINGS","LocalizationImpl","lang","strings","slice","initStrings","loaded","default","Object","entries","k","v","_firestore","_auth","_authPromise","_budgetsStore","_categoriesStore","_iconsStore","_currenciesStore","_countriesStore","onAuth","uid","a","initFirestore","setRemote","initBgAuth","language","getAuth","getUserId","FirestoreApi","getAuthPromise","subscribe","auth","AuthApiImpl","bs","BudgetsStoreImpl","imported","CategoriesStoreImpl","IconsStoreImpl","currencies","CurrenciesStoreImpl","CountriesStoreImpl","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cb6ff441.chunk.js","sourcesContent":["\nexport enum AppPaths {\n    ImportExport = '/import-export',\n    About = '/about',\n    Sync = '/sync',\n    Privacy = '/privacy',\n}\n","\nexport class BudgetPath {\n\n    readonly path: string;\n\n    constructor(budgetId: string) {\n        this.path = `${BudgetPath.base}/${budgetId}`;\n    }\n\n    get pathEdit () {\n        return `${this.path}/edit`;   \n    }\n\n    get pathStats () {\n        return `${this.path}/stats`;   \n    }\n\n    get pathExport () {\n        return `${this.path}/export`;   \n    }\n\n    get pathExpenses () {\n        return `${this.path}/expenses`;   \n    }\n\n    get pathAddExpense () {\n        return `${this.path}/expenses/add`;   \n    }\n\n    static get base () {\n        return '/budgets';\n    }\n\n    static get add () {\n        return `${this.base}/add`;\n    }\n\n    get exportPath () {\n        return `${this.path}/export`;\n    }\n\n    pathExpensesByDay(year: number, month?: number, day?: number){\n        const monthPart = month === undefined ? '' : `&month=${month}`;\n        const dayPart = day === undefined ? '' : `&day=${day}`;\n        return `${this.pathExpenses}?year=${year}${monthPart}${dayPart}`;\n    }\n\n    pathExpensesByCategory(categoryId: string){\n        return `${this.pathExpenses}?category=${categoryId}`;\n    }\n\n    static pathCombinedWithQuery(identifiers: Iterable<string>) {\n        const usp = new URLSearchParams();\n        for (const id of identifiers) {\n            usp.append('identifiers[]', id);\n        }\n        return `${this.combined}?${usp.toString()}`;\n    }\n\n    static get combined() {\n        return `${this.base}/combined`;\n    }\n}\n","\nexport enum CategoryPaths {\n    List = '/categories',\n    Add = '/categories/add'\n}\n","import { createContext, useContext } from \"react\"\nimport { BudgetTracker } from \"../api\";\n\nconst AppContext = createContext<BudgetTracker|undefined>(undefined);\n\nexport const AppProvider = AppContext.Provider;\nexport const AppConsumer = AppContext.Consumer;\n\nexport function useAppContext() {\n    const context = useContext(AppContext)\n    if (context === undefined) {\n      throw new Error('useAppContext must be used within a AppProvider');\n    }\n    return context;\n}\n  ","\nimport { useAppContext } from '../contexts/AppContext';\n\nexport function useLoc() {\n    const app = useAppContext();\n    \n    return function loc(key: string) {\n        return app.localization.get(key);\n    };\n}","import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\n\ninterface SnackbarAppProps {\n    message: string;\n    type?: string;\n}\n\nexport const SnackbarApp: React.FC<SnackbarAppProps> = (props) => {\n    const [close, setClose] = React.useState();\n    const type = props.type || 'default';\n    const messageId = `${type}-message-id`;\n\n    function handleClose () {\n        setClose(true);\n    }\n\n    return (\n    <Snackbar\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'left', }}\n        open={!close}\n        autoHideDuration={6000}\n        onClose={handleClose}\n        ContentProps={{ 'aria-describedby': messageId }}\n        message={<span id={messageId}>{props.message}</span>}\n        action={[\n            <IconButton\n                key=\"close\"\n                aria-label=\"Close\"\n                color=\"inherit\"\n                onClick={handleClose}\n            >\n                <CloseIcon />\n            </IconButton>,\n        ]}\n    />);\n}\n\nexport const SnackbarError: React.FC<SnackbarAppProps> = (props) => (\n    <SnackbarApp type='error' {...props}/>\n); \n\nexport const SnackbarInfo: React.FC<SnackbarAppProps> = (props) => (\n    <SnackbarApp type='info' {...props}/>\n); \n","import nanoid from 'nanoid';\n\nexport function uuid() {\n    return nanoid();\n}\n","import { BudgetPath } from \"./BudgetPath\";\n\nexport class ExpensePath {\n    readonly path: string;\n\n    constructor(expenseId: string, budgetUrl: BudgetPath) {\n        this.path = `${budgetUrl.path}/expenses/${expenseId}`;\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport * as React from \"react\";\n\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Link } from 'react-router-dom';\nimport { useLoc } from \"../hooks/useLoc\";\nimport { BudgetPath } from \"../domain/paths/BudgetPath\";\nimport { CategoryPaths } from \"../domain/paths/CategoryPaths\";\nimport { AppPaths } from \"../domain/paths\";\n\nexport const AppMenu: React.FC = () => {\n\n    const [anchorEl, setAnchorEl] = React.useState<Element | null>(null);\n    const loc = useLoc();\n\n    const handleClick = (event: React.SyntheticEvent) => (setAnchorEl(event.currentTarget));\n\n    const handleClose = () => (setAnchorEl(null));\n\n    const AppMenuItem = React.forwardRef((props: {name: string, path: string}, ref) => {\n        return <MenuItem onClick={handleClose} component={Link} to={props.path}>\n                {props.name}\n            </MenuItem>;\n    });\n\n    return (\n        <React.Fragment>\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"Menu\" onClick={handleClick}>\n                <MenuIcon />\n            </IconButton>\n            <Menu\n                id='app-menu'\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <AppMenuItem name={loc('Budgets')} path={BudgetPath.base}/>\n                <AppMenuItem name={loc('Categories')} path={CategoryPaths.List} />\n                <AppMenuItem name={loc('Import & Export')} path={AppPaths.ImportExport} />\n                <AppMenuItem name={loc('Account sync')} path={AppPaths.Sync} />\n                <AppMenuItem name={loc('About')} path={AppPaths.About} />\n            </Menu>\n        </React.Fragment>\n    );\n}\n","import * as React from \"react\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from \"@material-ui/core/Typography\";\nimport { AppMenu } from \"./Menu\";\n\nexport interface HeaderProps {\n    title: string;\n    actions?: React.ReactNode;\n}\nexport const Header: React.FC<HeaderProps> = (props) => {\n\n    return (\n    <AppBar position='sticky'>\n        <Toolbar>\n            <AppMenu />\n            <Typography color='inherit' variant='h6' style={{flexGrow: 1}}>{props.title}</Typography>\n            { props.actions }\n        </Toolbar>\n    </AppBar>);\n}\n","import * as React from \"react\";\nimport { Route, Switch, RouteComponentProps } from \"react-router\";\nimport { BudgetPath } from \"./domain/paths/BudgetPath\";\nimport { ExpensePath } from \"./domain/paths/ExpensePath\";\nimport { CategoryPaths } from \"./domain/paths/CategoryPaths\";\nimport { AppPaths } from \"./domain/paths\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst routes = {\n    BudgetView: React.lazy(() => import('./views/budgets/Budget')),\n    BudgetList: React.lazy(() => import('./views/budgets/BudgetList')),\n    BudgetCombined: React.lazy(() => import('./views/budgets/BudgetCombined')),\n    BudgetEdit: React.lazy(() => import('./views/budgets/BudgetEdit')),\n    BudgetStats: React.lazy(() => import('./views/budgets/Stats')),\n    BudgetExport: React.lazy(() => import('./views/budgets/Export')),\n    ExpenseView: React.lazy(() => import('./views/expenses/ExpenseEdit')),\n    ExpenseAdd: React.lazy(() => import('./views/expenses/ExpenseAdd')),\n    ExpensesView: React.lazy(() => import('./views/expenses/Expenses')),\n    CategoryList: React.lazy(() => import('./views/categories/CategoryList')),\n    AddCategory: React.lazy(() => import('./views/categories/AddCategory')),\n    ImportExport: React.lazy(() => import('./views/ImportExport')),\n    About: React.lazy(() => import('./views/About')),\n    Sync: React.lazy(() => import('./views/Sync')),\n    Privacy: React.lazy(() => import('./views/PrivacyPolicy'))\n};\n\nexport interface HeaderNotifierProps {\n    onTitleChange: (title: string) => void;\n    onActions: (actions: React.ReactNode) => void;\n}\n\n// Function to inject properties to components rendered by router\nfunction _render(ComponentType: React.ComponentType<any>, parentProps: HeaderNotifierProps) {\n    return (props: RouteComponentProps<any>) => <React.Suspense fallback={<CircularProgress/>}>\n            <ComponentType {...props} {...parentProps}/>\n        </React.Suspense>;\n}\n\nconst budgetUrl = new BudgetPath(':budgetId');\nconst expenseUrl = new ExpensePath(':expenseId', budgetUrl);\n\nexport const Routes: React.FC<HeaderNotifierProps> = (props) => (\n    <Switch>\n        <Route exact path={BudgetPath.base} render={_render(routes.BudgetList, props)} />\n        <Route exact path={BudgetPath.add} render={_render(routes.BudgetEdit, props)} />\n        <Route exact path={BudgetPath.combined} render={_render(routes.BudgetCombined, props)} />\n        <Route exact path={budgetUrl.pathEdit} render={_render(routes.BudgetEdit, props)} />\n        <Route exact path={budgetUrl.pathStats} render={_render(routes.BudgetStats, props)} />\n        <Route exact path={budgetUrl.pathExport} render={_render(routes.BudgetExport, props)} />\n        <Route exact path={budgetUrl.path} render={_render(routes.BudgetView, props)} />\n        <Route exact path={budgetUrl.pathAddExpense} render={_render(routes.ExpenseAdd, props)} />\n        <Route exact path={expenseUrl.path} render={_render(routes.ExpenseView, props)} />\n        <Route exact path={budgetUrl.pathExpenses} render={_render(routes.ExpensesView, props)} />\n        <Route exact path={CategoryPaths.List} render={_render(routes.CategoryList, props)} />\n        <Route exact path={CategoryPaths.Add} render={_render(routes.AddCategory, props)} />\n        <Route exact path='/' render={_render(routes.BudgetList, props)} />\n        <Route exact path={AppPaths.ImportExport} render={_render(routes.ImportExport, props)} />\n        <Route exact path={AppPaths.About} render={_render(routes.About, props)} />\n        <Route exact path={AppPaths.Sync} render={_render(routes.Sync, props)} />\n        <Route exact path={AppPaths.Privacy} render={_render(routes.Privacy, props)} />\n    </Switch>\n);\n","import { AppStorageApi } from './services/storage/StorageApi';\nimport { AuthApi } from './services/AuthApi';\nimport { BudgetsStore, CategoriesStore, IconsStore, CurrenciesStore, CountriesStore } from './domain/stores/interfaces';\nimport { LocalizationApi } from './services';\n\n\nexport interface Budget {\n    identifier: string;\n    name: string;\n    total: number;\n    currency: string;\n    /** Timestamp for starting date */\n    from: number;\n    /** Timestamp for ending date */\n    to: number;\n}\n\nexport interface Expense {\n    amount: number;\n    amountBaseCurrency: number;\n    currency: string;\n    categoryId: string;\n    countryCode: string;\n    description?: string;\n    identifier: string;\n    /** Timestamp when the expense applies */\n    when: number;\n    budgetId: string;\n    splitInDays: number;\n}\n\nexport interface ObjectMap<T> {\n    [k: string]: T   \n}\n\nexport interface ExpensesMap extends ObjectMap<Expense> {}\n\nexport interface BudgetsMap extends ObjectMap<Budget> {}\n\nexport interface CurrencyRates {\n    readonly base: string;\n    readonly rates: ObjectMap<number>;\n    readonly date: Date;\n}\n\nexport interface Category {\n    identifier: string;\n    name: string;\n    icon: string;\n}\n\nexport interface CategoriesMap extends ObjectMap<Category> {}\n\nexport interface YMD {\n    year: number,\n    month: number,\n    day: number\n}\n\nexport interface CountryEntry {\n    code: string;\n    name: string;\n}\n\nexport interface User {\n    timestamp: number;\n}\n\nexport interface ExportDataSet {\n    budgets: BudgetsMap;\n    categories: CategoriesMap;\n    expenses: ExpensesMap;\n    lastTimeSaved: number;\n}\n\nexport enum SyncDirection {\n    RemoteToLocal = 'RemoteToLocal', LocalToRemote = 'LocalToRemote'\n}\n\nexport enum EntityNames {\n    Budgets = 'budgets',\n    Expenses = 'expenses',\n    Categories = 'categories',\n}\n\nexport interface Exporter {\n    export(): Promise<ExportDataSet>;\n}\n\nexport interface Importer {\n    import(data: ExportDataSet): Promise<void>;\n}\n\nexport interface BudgetTracker {\n\n    readonly storage: AppStorageApi;\n    readonly localization: LocalizationApi;\n    \n    getAuth (): Promise<AuthApi>;\n    getBudgetsStore(): Promise<BudgetsStore>;\n    getCategoriesStore(): Promise<CategoriesStore>\n    getIconsStore(): Promise<IconsStore>;\n    getCurrenciesStore(): Promise<CurrenciesStore>;\n    getCountriesStore (): Promise<CountriesStore>;\n}\n","import * as React from 'react';\nimport { SnackbarError } from './snackbars';\n\nexport class ErrorBoundary extends React.Component<{}, { error: string | null }> {\n\n    constructor(props: {}) {\n        super(props);\n        this.state = { error: null };\n    }\n\n    componentDidCatch(error: Error, info: React.ErrorInfo) {\n        console.error(error, info);\n        this.setState({ error: error.message });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <SnackbarError message={this.state.error}/>      \n        }\n        return this.props.children;\n    }\n}","import React from 'react';\nimport { Header } from \"./components/Header\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Routes } from \"./routes\";\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ErrorBoundary } from './components/ErrorBoundary';\nimport { BudgetTracker } from './api';\nimport { AppProvider } from './contexts/AppContext';\n\nconst App: React.FC<{btApp: BudgetTracker}> = (props) => {\n\n    const [title, setTitle] = React.useState('Budget tracker');\n    // maybe use callback effect is for this purpose\n    const [actions, setActions] = React.useState();\n\n    return (\n        <Router basename='/budget-tracker'>\n            <AppProvider value={props.btApp}>\n                <CssBaseline />\n                <Header title={title} actions={actions} />\n                <main>\n                    <Container maxWidth='lg'>\n                        <Box mt={2} marginBottom={8}>\n                            <ErrorBoundary>\n                                <Routes onTitleChange={setTitle} onActions={setActions}/>\n                            </ErrorBoundary>\n                        </Box>\n                    </Container>\n                </main>\n            </AppProvider>\n        </Router>);\n}\n\nexport default App;\n","\nimport { SubStorageApi } from \"./StorageApi\";\n\nexport class DataSync {\n\n    private readonly from: SubStorageApi;\n    private readonly to: SubStorageApi;\n    private readonly name: string;\n\n    // Creator should pass the correct storage depending on the action\n    constructor(from: SubStorageApi, to: SubStorageApi) {\n        this.from = from;\n        this.to = to;\n        this.name = `${this.from.constructor.name} > ${this.to.constructor.name}`;\n    }\n\n    async sync() {\n        // TODO implement a synchronization mechanism **to get only the pending changes**\n        // For now we are reading all the data from firestore, which is far to be optimal\n        // Saving synched device IDs per document would work if we could check that array does not\n        // contains current device ID, \"array not contains\" feature is not supported by firestore\n        console.debug(this.name);\n        const pending = await this.from.export();\n        if (pending) {\n            return this.to.import(pending);\n        }\n        console.info('Nothing to sync');\n    }\n}\n","import { SubStorageApi, AppStorageApi, StorageObserver } from \"./StorageApi\";\nimport { Budget, Expense, Category } from \"../../api\";\nimport { DataSync } from \"./DataSync\";\nimport { uuid } from \"../../domain/utils/uuid\";\n\nexport class AppStorageManager implements AppStorageApi {\n    private local: SubStorageApi;\n    private remote?: SubStorageApi;\n    private observers: Set<StorageObserver>;\n\n    constructor (local: SubStorageApi) {\n        console.log('Instantiated', this);\n        this.local = local;\n        this.observers = new Set();\n    }\n\n    addObserver(observer: StorageObserver) {\n        this.observers.add(observer);\n    }\n\n    deleteObserver(observer: StorageObserver) {\n        this.observers.delete(observer);\n    }\n\n    private notifyObservers () {\n        this.observers.forEach(o=>o.onStorageDataChanged());\n    }\n    \n    private loadDeviceId () {\n        const key = 'deviceId';\n        const deviceId = localStorage.getItem(key);\n        if (deviceId) {\n            return deviceId;\n        } else {\n            console.debug('First time app starts, generating device ID');\n            const deviceId = uuid();\n            localStorage.setItem(key, deviceId)\n            return deviceId;\n        }\n    }\n\n    async setRemote (remote?: SubStorageApi) {\n        if (this.remote !== remote) {\n            this.remote = remote;\n            if (this.remote) {\n                return this.sync();\n            }\n        }\n    }\n\n    async sync () {\n        if (this.remote) {\n            const [\n                remoteTime, \n                localTime\n            ] = await Promise.all([\n                this.remote.getLastTimeSaved(), \n                this.local.getLastTimeSaved()\n            ]);\n            \n            if (remoteTime > localTime) {\n                await new DataSync(this.remote, this.local).sync();\n            } else if (remoteTime < localTime) {\n                await new DataSync(this.local, this.remote).sync();\n            } else {\n                console.debug('Nothing to sync');\n                return;\n            }\n            this.notifyObservers();\n            console.debug('Sync done');\n        }\n    }\n\n    async getBudget(budgetId: string) {\n        return this.local.getBudget(budgetId);\n    }\n\n    async getBudgets() {\n        return this.local.getBudgets();\n    }\n\n    async getExpenses(budgetId: string) {\n        return this.local.getExpenses(budgetId);\n    }\n    \n    async setBudget(budget: Budget, timestamp = Date.now()) {\n        const localPromise = this.local.setBudget(budget, timestamp);\n        if (this.remote) {\n            this.remote.setBudget(budget, timestamp);\n        }\n        return localPromise;\n    }\n    \n    async deleteBudget(budgetId: string, timestamp = Date.now()) {\n        const localPromise = this.local.deleteBudget(budgetId, timestamp);\n        if (this.remote) {\n            this.remote.deleteBudget(budgetId, timestamp);\n        }\n        return localPromise;\n    }\n\n    async getExpense(expenseId: string) {\n        return this.local.getExpense(expenseId);\n    }\n    \n    async setExpenses(expenses: Expense[], timestamp = Date.now()) {\n        const localPromise = this.local.setExpenses(expenses, timestamp);\n        if (this.remote) {\n            this.remote.setExpenses(expenses, timestamp);\n        }\n        return localPromise;\n    }\n\n    async deleteExpense(expenseId: string, timestamp = Date.now()) {\n        const localPromise = this.local.deleteExpense(expenseId, timestamp);\n        if (this.remote) {\n            this.remote.deleteExpense(expenseId, timestamp);\n        }\n        return localPromise;\n    }\n\n    async getCategory(categoryId: string) {\n        return this.local.getCategory(categoryId);\n    }\n\n    async getCategories() {\n        return this.local.getCategories();\n    }\n\n    async setCategories(categories: Category[], timestamp = Date.now()) {\n        const localPromise = this.local.setCategories(categories, timestamp);\n        if (this.remote) {\n            this.remote.setCategories(categories, timestamp);\n        }\n        return localPromise;\n    }\n\n    async deleteCategory(identifier: string, timestamp = Date.now()) {\n        const localPromise = this.local.deleteCategory(identifier, timestamp);\n        if (this.remote) {\n            this.remote.deleteCategory(identifier, timestamp);\n        }\n        return localPromise;\n    }\n}\n","import { DbItem, SubStorageApi } from \"./StorageApi\";\nimport { openDB, IDBPDatabase, DBSchema } from 'idb';\nimport { Budget, Category, Expense, BudgetsMap, ExpensesMap, CategoriesMap, ExportDataSet, EntityNames } from \"../../api\";\n\ninterface ExpenseDb extends Expense, DbItem { }\ninterface BudgetDb extends Budget, DbItem { }\ninterface CategoryDb extends Category, DbItem { }\n\nconst keyPath = { keyPath: 'identifier' };\n\ninterface Schema extends DBSchema {\n    [EntityNames.Budgets]: {\n        key: string,\n        value: BudgetDb,\n        indexes: { 'deleted, to': string },\n    },\n    [EntityNames.Categories]: {\n        value: CategoryDb,\n        key: string,\n        indexes: { 'deleted, name': string },\n    },\n    [EntityNames.Expenses]: {\n        value: ExpenseDb,\n        key: string,\n        indexes: { 'deleted, budgetId, when': [number, string, number] },\n    }\n}\n\nexport class IndexedDb implements SubStorageApi {\n    private readonly name = 'budgetTrackerDb';\n    private readonly version = 1;\n    private _db?: IDBPDatabase<Schema>;\n\n    private async createDb() {\n        return openDB<Schema>(this.name, this.version, {\n            upgrade(db) {\n                const budgetsStore = db.createObjectStore(EntityNames.Budgets, keyPath);\n                budgetsStore.createIndex('deleted, to', ['deleted', 'to']);\n\n                const categoriesStore = db.createObjectStore(EntityNames.Categories, keyPath);\n                categoriesStore.createIndex('deleted, name', ['deleted', 'name']);\n\n                const expensesStore = db.createObjectStore(EntityNames.Expenses, keyPath);\n                expensesStore.createIndex('deleted, budgetId, when', ['deleted', 'budgetId', 'when']);\n            },\n        });\n    }\n\n    private async enablePersistentStorage(){\n        const {storage} = navigator;\n        const persistent = storage && storage.persist && await storage.persist();\n        if (persistent) {\n            console.info(\"Storage will not be cleared except by explicit user action\");\n        } else {\n            console.warn(\"Storage may be cleared by the UA under storage pressure.\")\n        }\n    }\n\n    async getDb() {\n        if (this._db === undefined) {\n            await this.enablePersistentStorage();\n            this._db = await this.createDb();\n        }\n        return this._db;\n    }\n\n    async getBudgets(): Promise<BudgetsMap> {\n        const db = await this.getDb();\n        const bound = IDBKeyRange.upperBound([1, 0]);\n        const budgetsResult = await db.getAllFromIndex(\n            EntityNames.Budgets,\n            'deleted, to',\n            bound\n        );\n        const budgetMap: BudgetsMap = {}; \n        budgetsResult.forEach(b => budgetMap[b.identifier] = b);\n        return budgetMap;\n    }\n\n    async getBudget(identifier: string) {\n        const db = await this.getDb();\n        return db.get(EntityNames.Budgets, identifier);\n    }\n\n    async setBudget(budget: Budget, timestamp: number) {\n        const db = await this.getDb();\n        await db.put(\n            EntityNames.Budgets,\n            {\n                deleted: 0,\n                timestamp,\n                ...budget\n            });\n        return this.setLastTimeSaved(timestamp);\n    }\n\n    async deleteBudget(budgetId: string, timestamp = Date.now()) {\n        const db = await this.getDb();\n        const tx = db.transaction(EntityNames.Budgets, 'readwrite');\n        const budget = await tx.store.get(budgetId);\n        if (budget) {\n            tx.store.put({\n                ...budget,\n                deleted: 1,\n                timestamp,\n            });\n        }\n        await tx.done;\n        this.setLastTimeSaved(timestamp);\n    }\n\n    async getExpenses(budgetId: string): Promise<ExpensesMap> {\n        const db = await this.getDb();\n        const budget = await db.get(EntityNames.Budgets, budgetId);\n        if (budget) {\n            const bound = IDBKeyRange.bound(\n                [0, budgetId, budget.from],\n                [0, budgetId, budget.to]);\n            const expensesResult = await db.getAllFromIndex(\n                EntityNames.Expenses,\n                'deleted, budgetId, when',\n                bound\n            );\n            const expenses: ExpensesMap = {};\n            expensesResult.forEach(e => expenses[e.identifier] = e);\n            return expenses;\n        }\n        throw new Error('There is no budget with id ' + budgetId);\n    }\n\n    private async getAllExpenses(): Promise<ExpensesMap> {\n        const db = await this.getDb();\n        const expenses = await db.getAll(EntityNames.Expenses);\n        const expensesMap: ExpensesMap = {};\n        expenses.forEach(e => expensesMap[e.identifier] = e);\n        return expensesMap;\n    }\n\n    async getExpense(expenseId: string) {\n        const db = await this.getDb();\n        return db.get(EntityNames.Expenses, expenseId);\n    }\n\n    async setExpenses(expenses: Expense[], timestamp: number) {\n        const db = await this.getDb();\n        const tx = db.transaction(EntityNames.Expenses, 'readwrite');\n        for (const expense of expenses) {\n            tx.store.put({\n                ...expense,\n                timestamp,\n                deleted: 0\n            });\n        }\n        await tx.done;\n        return this.setLastTimeSaved(timestamp);\n    }\n\n    async deleteExpense(expenseId: string, timestamp: number) {\n        const db = await this.getDb();\n        const tx = db.transaction(EntityNames.Expenses, 'readwrite');\n        const expense = await tx.store.get(expenseId);\n        if (expense) {\n            tx.store.put({ ...expense, deleted: 1, timestamp });\n        }\n        await tx.done;\n        return this.setLastTimeSaved(timestamp);\n    }\n\n    async getCategories(): Promise<CategoriesMap> {\n        const db = await this.getDb();\n        const bound = IDBKeyRange.upperBound([1,], true);\n        const categoriesResult = await db.getAllFromIndex(\n            EntityNames.Categories,\n            'deleted, name',\n            bound);\n        const categories: CategoriesMap = {};\n        if (categoriesResult) {\n            categoriesResult.forEach(c => categories[c.identifier] = c);\n        }\n        return categories;\n    }\n\n    async setCategories(categories: Category[], timestamp: number) {\n        const db = await this.getDb();\n        const tx = db.transaction(EntityNames.Categories, 'readwrite');\n        for (const category of categories) {\n            tx.store.put({\n                ...category,\n                timestamp,\n                deleted: 0\n            });\n        }\n        await tx.done;\n        return this.setLastTimeSaved(timestamp);\n    }\n\n    async getCategory(identifier: string) {\n        const db = await this.getDb();\n        return db.get(EntityNames.Categories, identifier);\n    }\n\n    async deleteCategory(identifier: string, timestamp: number) {\n        const db = await this.getDb();\n        const tx = db.transaction(EntityNames.Categories, 'readwrite');\n        const category = await tx.store.get(identifier);\n        if (category) {\n            tx.objectStore(EntityNames.Categories).put({ ...category, timestamp, deleted: 1 });\n        }\n        await tx.done;\n        return this.setLastTimeSaved(timestamp);\n    }\n\n    async import(data: ExportDataSet) {\n        const db = await this.getDb();\n        const tx = db.transaction(\n            [EntityNames.Budgets, EntityNames.Categories, EntityNames.Expenses],\n            'readwrite');\n\n        const dbProps: DbItem = {\n            deleted: 0,\n            timestamp: data.lastTimeSaved\n        };\n\n        for (const budgetId in data.budgets) {\n            tx.objectStore(EntityNames.Budgets).put(\n                { ...dbProps, ...data.budgets[budgetId] });\n        }\n        for (const expenseId in data.expenses) {\n            tx.objectStore(EntityNames.Expenses)\n                .put({ ...dbProps, ...data.expenses[expenseId] });\n        }\n        for (const categoryId in data.categories) {\n            tx.objectStore(EntityNames.Categories).put(\n                { ...dbProps, ...data.categories[categoryId] });\n        }\n        await tx.done;\n        return this.setLastTimeSaved(data.lastTimeSaved);\n    }\n\n    async export(): Promise<ExportDataSet> {\n        const [budgets, categories, expenses, lastTimeSaved] = await Promise.all([\n            this.getBudgets(),\n            this.getCategories(),\n            this.getAllExpenses(),\n            this.getLastTimeSaved()\n        ]);\n        return {\n            budgets,\n            expenses,\n            categories,\n            lastTimeSaved\n        };\n    }\n\n    async getLastTimeSaved(): Promise<number> {\n        return parseInt(localStorage.getItem('timestamp') || '0');\n    }\n    async setLastTimeSaved(timestamp: number): Promise<void> {\n        localStorage.setItem('timestamp', timestamp.toString());\n    }\n}\n","import { ObjectMap } from '../api';\nimport { LocalizationApi } from '.';\n\nconst DEFAULT_LANG = 'en';\n\nconst LANG_STRINGS: ObjectMap<Promise<any>> = {\n    [DEFAULT_LANG]: import('../constants/strings/en.json'),\n    'es': import('../constants/strings/es.json'),\n};\n\nexport class LocalizationImpl implements LocalizationApi {\n\n    readonly lang: string;\n    private strings: ObjectMap<string>;\n\n    constructor(lang: string) {\n        lang = lang.slice(0, 2);\n\n        this.lang = lang in LANG_STRINGS ? lang : DEFAULT_LANG;\n        this.strings = {};\n        this.initStrings();\n    }\n\n    private async initStrings() {\n        const loaded = (await LANG_STRINGS[this.lang]).default;\n        Object.entries(loaded).forEach(([k, v]) => this.strings[k] = v as string);\n    }\n\n    get(key: string) {\n        return this.strings[key] || key;\n    }\n}\n","\nimport * as serviceWorker from './serviceWorker';\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport App from './App';\nimport { BudgetTrackerImpl } from './BudgetTrackerImpl';\n\nconst btApp = new BudgetTrackerImpl();\n\nReactDOM.render(<App btApp={btApp}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import { SubStorageApi, AppStorageApi } from './services/storage/StorageApi';\nimport { \n    CategoriesStore, BudgetsStore, \n    IconsStore, CurrenciesStore, \n    CountriesStore} from './domain/stores/interfaces';\nimport { AuthApi } from './services/AuthApi';\nimport { AppStorageManager } from './services/storage/AppStorageManager';\nimport { IndexedDb } from './services/storage/IndexedDb';\nimport { BudgetTracker } from './api';\nimport { LocalizationApi } from './services';\nimport { LocalizationImpl } from './services/LocalizationStoreImpl';\n\nexport class BudgetTrackerImpl implements BudgetTracker {\n\n    readonly storage: AppStorageApi;\n    readonly localization: LocalizationApi;\n    private _firestore?: SubStorageApi;\n    private _auth?: AuthApi;\n    private _authPromise?: Promise<AuthApi>;\n    private _budgetsStore?: BudgetsStore;\n    private _categoriesStore?: CategoriesStore;\n    private _iconsStore?: IconsStore;\n    private _currenciesStore?: CurrenciesStore;\n    private _countriesStore?: CountriesStore;\n\n    constructor () {\n        // background initialization for auth\n        this.initBgAuth();\n        this.storage = new AppStorageManager(new IndexedDb());\n        this.localization = new LocalizationImpl(navigator.language);\n    }\n\n    private async initBgAuth () {\n        console.debug('Fetching auth info...');\n        console.debug('Auth: ', await (await this.getAuth()).getUserId());\n    }\n\n    private async initFirestore (uid?: string) {\n        if (uid) {\n            if (!this._firestore) {\n                try {\n                    const storage  = await import('./services/storage/FirestoreApi');\n                    this._firestore = new storage.FirestoreApi(uid, true);\n                } catch (error) {\n                    console.warn('Cannot get user ID: ', error);\n                }\n            }\n        } else {\n            this._firestore = undefined;\n        }\n        return this._firestore;\n    }\n\n    private onAuth = async (uid?: string) => {\n        this.storage.setRemote(await this.initFirestore(uid));\n    }\n\n    async getAuth () {\n        if (this._auth) {\n            return this._auth;\n        }\n        if (this._authPromise) {\n            return this._authPromise;\n        }\n        this._authPromise = this.getAuthPromise();\n        this._auth = await this._authPromise;\n        this._auth.subscribe(this.onAuth);\n        this._authPromise = undefined;\n        return this._auth;\n    }\n\n    private async getAuthPromise () {\n        const auth  = await import('./services/AuthApiImpl');\n        return new auth.AuthApiImpl();\n    }\n\n    async getBudgetsStore (): Promise<BudgetsStore> {\n        if (!this._budgetsStore) {\n            const bs = await import('./domain/stores/BudgetsStoreImpl');\n            this._budgetsStore = new bs.BudgetsStoreImpl(this);\n        }\n        return this._budgetsStore;\n    }\n\n    async getCategoriesStore () {\n        if (!this._categoriesStore) {\n            const imported = await import('./domain/stores/CategoriesStoreImpl');\n            this._categoriesStore = new imported.CategoriesStoreImpl(this.storage);\n        }\n        return this._categoriesStore;\n    }\n\n    async getIconsStore () {\n        if (!this._iconsStore) {\n            const imported  = await import('./domain/stores/IconsStoreImpl');\n            this._iconsStore = new imported.IconsStoreImpl();\n        }\n        return this._iconsStore;\n    }\n\n    async getCurrenciesStore () {\n        if (!this._currenciesStore) {\n            const [currencies, imported] = await Promise.all([\n                import('./constants/currencies.json'),\n                import('./domain/stores/CurrenciesStoreImpl')\n            ]);\n            this._currenciesStore = new imported.CurrenciesStoreImpl(currencies.default);\n        }\n        return this._currenciesStore;\n    }\n\n    async getCountriesStore () {\n        if (!this._countriesStore) {\n            const imported  = await import('./domain/stores/CountriesStoreImpl');\n            this._countriesStore = new imported.CountriesStoreImpl(\n                await import('./constants/countries.json'));\n        }\n        return this._countriesStore;\n    }\n}\n"],"sourceRoot":""}