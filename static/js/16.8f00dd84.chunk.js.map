{"version":3,"sources":["components/buttons/buttons.tsx","domain/DateDay.ts","hooks/useBudgetsStore.tsx","domain/date.ts","hooks/useBudgetModel.tsx","hooks/useCategoriesStore.tsx","components/buttons/AddButton.tsx","hooks/useCategories.tsx","components/categories/CategoryIcon.tsx","hooks/useIcon.tsx","components/VersusInfo.tsx","domain/utils/getCurrencyWithSymbol.ts","components/Link.tsx","components/expenses/ExpenseListItem.tsx","components/expenses/ExpenseListGroup.tsx","components/expenses/ExpenseList.tsx","components/expenses/ExpensesByCategory.tsx","components/expenses/ExpensesByDate.tsx","views/expenses/Expenses.tsx"],"names":["derivedProps","props","component","to","Link","undefined","onClick","console","warn","AppButton","color","icon","ButtonFab","style","position","bottom","zIndex","right","left","children","DateDay","date","Date","_date","this","getFullYear","getMonth","getDate","days","setDate","months","setMonth","years","setFullYear","getTime","isToday","Intl","DateTimeFormat","day","month","year","format","timestampMs","now","useBudgetsStore","useState","store","setStore","btApp","useAppContext","useEffect","a","getBudgetsStore","isSubscribed","fetchStore","observer","onStorageDataChanged","storage","addObserver","deleteObserver","DAY_MS","dateDiff","from","Math","floor","getISODateString","toISOString","slice","monthToString","monthYearToString","useBudgetModel","budgetId","budgetModel","setBudgetModel","getBudgetModel","fetchBudget","useCategoriesStore","getCategoriesStore","AddButton","aria-label","useCategories","categories","setCategories","getCategories","cs","fetchCategories","CategoryIcon","name","setIcon","getIconsStore","getIcon","fetchIcon","useIcon","fallback","Icon","percentage","spent","total","FieldDataView","variant","noWrap","text","secondary","VersusInfo","title","exceeded","container","justify","direction","round","value","formatters","getCurrencyWithSymbol","amount","currency","NumberFormat","getNumberFormatter","RouterLink","ExpenseListItem","expense","budget","categoryId","identifier","budgetPath","BudgetPath","expensePath","ExpensePath","React","redirect","setRedirect","category","push","ListItem","divider","button","path","id","ListItemAvatar","Avatar","backgroundColor","ListItemText","primary","pathExpensesByCategory","description","secondaryTypographyProps","textAlign","amountBaseCurrency","toLocaleString","ExpensesListGroup","ListSubheader","Array","expenses","map","key","ExpenseList","List","height","overflow","listStyleType","expensesByGroup","entries","group","values","ExpensesByCategory","setExpenses","setTotal","loc","useLoc","onTitleChange","expensesByDate","Map","sum","shortString","expensesMap","get","set","Box","padding","marginBottom","totalExpenses","info","Typography","ExpensesByDate","expectedDailyAvg","setExpectedDailyAvg","totalSpent","setTotalSpent","getNextUrl","increment","fromYMD","addYears","addMonths","addDays","getNextDate","pathExpensesByDay","dateTitle","toString","Error","getTitle","prevDate","nextDate","numberOfDays","expenseGroups","expensesByDay","getExpensesByDay","expensesByGroups","when","fromTimeMs","savedExpensesMap","getTotalExpenses","expectedDailyExpensesAverage","Grid","marginTop","NavigateBefore","replace","DateRange","NavigateNext","getParamInt","params","param","parseInt","ExpensesView","match","pathAddExpense","URLSearchParams","location","search","CircularProgress"],"mappings":"kyBAqBA,SAASA,EAAcC,GACnB,IAAMD,EAAe,CACjBE,UAAWD,EAAME,GAAKC,SAAOC,GAKjC,OAHIJ,EAAMK,SAAWL,EAAME,IACvBI,QAAQC,KAAK,2DAEVR,EAGJ,IAAMS,EAAsC,SAACR,GAAD,OAC/C,gBAAC,IAAD,eAAYS,MAAM,WAAcT,EAAWD,EAAaC,IAClDA,EAAMU,MAAQ,gBAACV,EAAMU,KAAP,QAmBjB,IAAMC,EAAY,SAACX,GAAD,OACrB,gBAAC,IAAD,eAAKY,MAAK,GAAGC,SAAU,QAASC,OAAQ,OAAQC,OAAQ,KAT5CN,EASyDT,EAAMS,MAR7D,YAAVA,QAAiCL,IAAVK,EAChB,CAACO,MAAO,QAER,CAACC,KAAM,UAMdR,MAAOT,EAAMS,OAAO,aAChBT,EACAD,EAAaC,IAEhBA,EAAMkB,UAdf,IAAgBT,I,uFC1CHU,EAAb,WAGI,aAAgC,IAApBC,EAAmB,uDAAZ,IAAIC,KAAQ,yBAFdC,WAEc,EAC3BC,KAAKD,MAAQ,IAAID,KACbD,EAAKI,cACLJ,EAAKK,WACLL,EAAKM,WAPjB,oDAWQ,OAAO,IAAIP,EAAQI,KAAKD,SAXhC,8BA6CaK,GAEL,OADAJ,KAAKD,MAAMM,QAAQL,KAAKD,MAAMI,UAAYC,GACnCJ,OA/Cf,gCAqDeM,GAEP,OADAN,KAAKD,MAAMQ,SAASP,KAAKD,MAAMG,WAAaI,GACrCN,OAvDf,+BA6DcQ,GAEN,OADAR,KAAKD,MAAMU,YAAYT,KAAKD,MAAME,cAAgBO,GAC3CR,OA/Df,6BAgFWH,GACH,OAAOG,KAAKD,MAAMW,YAAcb,EAAKE,MAAMW,YAjFnD,2BAeQ,OAAOV,KAAKD,MAAME,gBAf1B,4BAmBQ,OAAOD,KAAKD,MAAMG,aAnB1B,0BAuBQ,OAAOF,KAAKD,MAAMI,YAvB1B,6BAmCQ,OAAOH,KAAKD,MAAMW,YAnC1B,8BAuCQ,OAAOd,EAAQe,QAAQX,QAvC/B,kCA6EQ,OAHW,IAAIY,KAAKC,oBAChBhC,EACA,CAACiC,IAAK,UAAWC,MAAO,OAAQC,KAAM,YAChCC,OAAOjB,KAAKD,UA7E9B,kCA0BuBmB,GACf,OAAO,IAAItB,EAAQ,IAAIE,KAAKoB,MA3BpC,8BA8BoBrB,GACZ,OAAO,IAAID,EAAQ,IAAIE,KAAKD,EAAKmB,KAAMnB,EAAKkB,MAAOlB,EAAKiB,QA/BhE,8BAkEmBjB,GACX,IAAMsB,EAAM,IAAIrB,KAChB,OAAOD,EAAKiB,MAAQK,EAAIhB,WACpBN,EAAKkB,QAAUI,EAAIjB,YACnBL,EAAKmB,OAASG,EAAIlB,kBAtE9B,M,qHCGO,SAASmB,IAAmB,IAAD,EACJC,qBADI,mBACvBC,EADuB,KAChBC,EADgB,KAExBC,EAAQC,cAgCd,OA9BAC,qBAAU,WAAM,4CACZ,sBAAAC,EAAA,kEACIJ,EADJ,SACmBC,EAAMI,kBADzB,8EADY,sBAKZ,IAAIC,GAAe,EAKnB,OAJIA,GANS,WAAD,wBAORC,GAGG,WAAQD,GAAe,KAE/B,CAACP,EAAOE,IAEXE,qBAAU,WACN,IAAIG,GAAe,EACbE,EAA4B,CAACC,qBAAsB,WACrDT,OAAS1C,KAOb,OAJIgD,GACAL,EAAMS,QAAQC,YAAYH,GAGvB,WACHF,GAAe,EACfL,EAAMS,QAAQE,eAAeJ,MAElC,CAACP,IAEGF,I,iCCtCX,4IAAMc,EAAS,MAOR,SAASC,EAASC,EAAc3D,GACnC,OAAO4D,KAAKC,OAAO7D,EAAK2D,GAAMF,GAAU,EAMrC,SAASK,IACZ,OADiD,uDAAZ,IAAI3C,MAC7B4C,cAAcC,MAAM,EAAE,IAM/B,SAASC,EAAe7B,GAE3B,OADW,IAAIH,KAAKC,oBAAehC,EAAW,CAACkC,MAAO,SAC5CE,OAAO,IAAInB,KAAK,IAAMiB,EAAO,IAMpC,SAAS8B,EAAmB7B,EAAcD,GAE7C,OADW,IAAIH,KAAKC,oBAAehC,EAAW,CAACkC,MAAO,OAAQC,KAAM,YAC1DC,OAAO,IAAInB,KAAKkB,EAAMD,EAAO,M,sHC3BpC,SAAS+B,EAAeC,GAC3B,IAAMzB,EAAQF,cAD+B,EAEPC,qBAFO,mBAEtC2B,EAFsC,KAEzBC,EAFyB,KAuB7C,OAnBAvB,qBAAU,WAAM,4CACZ,WAA4BJ,GAA5B,SAAAK,EAAA,kEACIsB,EADJ,SACyB3B,EAAM4B,eAAeH,GAD9C,8EADY,sBAIZ,GAAIA,EAAU,CACV,IAAIlB,GAAe,EASnB,OAPIA,IACIP,EARC,SAAD,2BASA6B,CAAY7B,GAEZ2B,OAAepE,IAGhB,WAAOgD,GAAe,MAGlC,CAACkB,EAAUzB,IAEP0B,I,qHCxBJ,SAASI,IACZ,IAAM5B,EAAQC,cADoB,EAERJ,qBAFQ,mBAE3BC,EAF2B,KAEpBC,EAFoB,KAkBlC,OAdAG,qBAAU,WAAM,4CACZ,sBAAAC,EAAA,kEACIJ,EADJ,SACmBC,EAAM6B,qBADzB,8EADY,sBAKZ,IAAIxB,GAAe,EAKnB,OAJIA,GANS,WAAD,wBAORC,GAGG,WAAQD,GAAe,KAE/B,CAACL,EAAOF,IAEJA,I,iCCrBX,wEAIagC,EAAsC,SAAC7E,GAAD,OAC/C,gBAAC,IAAD,eAAW8E,aAAW,OAAU9E,EAAhC,CAAuCS,MAAM,YACzC,gBAAC,IAAD,S,sHCFD,SAASsE,IAAiB,IAAD,EACQnC,qBADR,mBACrBoC,EADqB,KACTC,EADS,KAEtBpC,EAAQ8B,cAYd,OAVA1B,qBAAU,WAAM,4CAEZ,WAAgCJ,GAAhC,eAAAK,EAAA,sEACqBL,EAAMqC,gBAD3B,OACUC,EADV,OAEIF,EAAcE,GAFlB,4CAFY,sBAOZtC,GAPa,SAAD,2BAOHuC,CAAgBvC,KAC1B,CAACA,IAEGmC,I,mFCAIK,IAZyC,SAACrF,GAAW,IAEzDsF,EAAQtF,EAARsF,KACD5E,ECNH,SAAiB4E,GAAe,IAAD,EACV1C,qBADU,mBAC3BlC,EAD2B,KACrB6E,EADqB,KAE5BxC,EAAQC,cAgBd,OAdAC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEACwBH,EAAMyC,gBAD9B,OACU3C,EADV,OAEI0C,EAAQ1C,EAAM4C,QAAQH,IAF1B,4CADY,sBAMZ,IAAIlC,GAAe,EAKnB,OAJIA,GAPS,WAAD,wBAQRsC,GAGG,WAAOtC,GAAe,KAC9B,CAACkC,EAAMvC,IAEHrC,EDZMiF,CAAQL,GAErB,OACI,gBAAC,WAAD,CAAgBM,SAAUN,GACpB5E,EAAO,gBAACA,EAAKmF,KAAN,CAAWjF,MAAO,CAACH,MAAOC,EAAKD,SAAY,Q,iCEdhE,wEAWA,SAASqF,EAAYC,EAAeC,GAChC,OAAIA,EACQD,EAAQC,EAAS,IAEtB,EAKX,IAAMC,EAA2D,SAACjG,GAAD,OACzD,gBAAC,IAAD,CAAYkG,QAAQ,QAAQC,QAAM,GAC7BnG,EAAMoG,KACLpG,EAAMqG,WACJ,gBAAC,IAAD,CAAYH,QAAQ,UAAUzF,MAAM,iBAC/BT,EAAMqG,aAKdC,EAAwC,SAACtG,GAAW,IACtD+F,EAAuB/F,EAAvB+F,MAAOC,EAAgBhG,EAAhBgG,MAAOO,EAASvG,EAATuG,MAEfC,EAAWT,EAAQC,EAEzB,OAAQ,gBAAC,WAAD,KACJ,gBAAC,IAAD,CAAMS,WAAS,EAACC,QAAQ,gBAAgBC,UAAU,OAC9C,gBAACV,EAAD,CAAeG,KAAMtC,KAAK8C,MAAMb,KAChC,gBAACE,EAAD,CAAeG,KAAMG,EAAOF,UAAS,YAAOvC,KAAK8C,MAAMZ,GAAlB,OACrC,gBAACC,EAAD,CAAeG,KAAMtC,KAAK8C,MAAMZ,EAAQD,MAE5C,gBAAC,IAAD,CACItF,MAAO+F,EAAW,YAAc,UAChCN,QAAQ,cACRW,MAAQL,EAAW,IAAMV,EAAWC,EAAOC,Q,iCC1CvD,sCAAMc,EAA2C,GAY1C,SAASC,EAAuBC,EAAgBC,GACnD,OAXJ,SAA4BA,GAOxB,OANMA,KAAYH,IACdA,EAAWG,GAAY,IAAI9E,KAAK+E,kBAAa9G,EAAW,CACpDQ,MAAO,WACPqG,cAGDH,EAAWG,GAIXE,CAAmBF,GAAUzE,OAAOwE,K,iCCf/C,uEAIa7G,EAA+B,SAACH,GAAD,OACxC,kBAAC,IAAD,CAASC,UAAWmH,IAAYlH,GAAIF,EAAME,IAAKF,EAAMkB,Y,4KCc5CmG,EAAkD,SAACrH,GAAW,IAChEsH,EAA+BtH,EAA/BsH,QAASC,EAAsBvH,EAAtBuH,OAAQvC,EAAchF,EAAdgF,WACjBwC,EAA0BF,EAA1BE,WAAYC,EAAcH,EAAdG,WACbC,EAAa,IAAIC,IAAW3H,EAAMuH,OAAOE,YACzCG,EAAc,IAAIC,IAAYJ,EAAYC,GAJsB,EAMtCI,aANsC,mBAM/DC,EAN+D,KAMrDC,EANqD,KAoBtE,IAEMC,EAAWH,WAAc,kBAAO9C,EAAWwC,KAAc,CAACA,EAAYxC,IAE5E,OAAI+C,EACO,gBAAC,IAAD,CAAUG,MAAI,EAAChI,GAAI6H,IAI1B,gBAACI,EAAA,EAAD,CAAUC,SAAO,EAACC,QAAM,EAAChI,QATT,kBAAQ2H,EAAYJ,EAAYU,OASCC,GAAId,GAE/CQ,GAAY,gBAACO,EAAA,EAAD,KACN,gBAACC,EAAA,EAAD,CAAQ7H,MAAO,CAAC8H,gBAAgB,SAC5B,gBAACrD,EAAA,EAAD,CAAcC,KAAM2C,EAASvH,SAGzC,gBAACiI,EAAA,EAAD,CACIC,QACIX,GAAY,gBAAC9H,EAAA,EAAD,CAAMD,GAAIwH,EAAWmB,uBAAuBZ,EAASR,aAAcQ,EAAS3C,MAC5Fe,UAAWiB,EAAQwB,YACnBC,yBAA0B,CAAE5C,QAAQ,KAExC,gBAACwC,EAAA,EAAD,CACI/H,MAAO,CAACoI,UAAW,SACnBJ,QAnCDtB,EAAQ2B,mBAAmBC,iBAoC1B7C,YA5BDkB,EAAON,WAAaK,EAAQL,WAJ5BF,YAAsBO,EAAQN,OAAQM,EAAQL,c,SCpBhDkC,EAAsD,SAACnJ,GAAD,OAC/D,gBAAC,WAAD,KACI,gBAACoJ,EAAA,EAAD,CACInJ,UAAU,MACVsI,GAAE,oBAAevI,EAAMsF,OACrBtF,EAAMsF,MAGR+D,MAAMxF,KAAK7D,EAAMsJ,UAAUC,KAAI,SAACjC,GAAD,OAC3B,gBAAC,EAAD,CACIkC,IAAG,kBAAalC,EAAQG,YACxBH,QAASA,EACTC,OAAQvH,EAAMuH,OACdvC,WAAYhF,EAAMgF,kBCdzByE,EAA0C,SAACzJ,GAEpD,OAAO,gBAAC0J,EAAA,EAAD,CAAM9I,MAAO,CAChB+I,OAAQ,OACRjB,gBAAiB,OACjB7H,SAAU,WACV+I,SAAU,OACVC,cAAe,SACd,YAAI7J,EAAM8J,gBAAgBC,WACtBR,KAAI,mCAAES,EAAF,KAASV,EAAT,YACD,gBAAC,EAAD,CACAE,IAAG,aAAQQ,GACX1E,KAAM0E,EACNzC,OAAQvH,EAAMuH,OACd+B,SAAUA,EAASW,SACnBjF,WAAYhF,EAAMgF,kB,mCCVrBkF,EAAwD,SAAClK,GAAW,IACtEuH,EAAkCvH,EAAlCuH,OAAQC,EAA0BxH,EAA1BwH,WAAYxC,EAAchF,EAAdgF,WADiD,EAE5C8C,aAF4C,mBAErEwB,EAFqE,KAE3Da,EAF2D,OAGlDrC,WAAe,GAHmC,mBAGrE9B,EAHqE,KAG9DoE,EAH8D,KAItEC,EAAMC,cA0BZ,OAxBAxC,aAAgB,WACZ9H,EAAMuK,cAAN,UAAuBF,EAAI,eAA3B,YAA6CrF,GAAcA,EAAWwC,GAAYlC,SAEnF,CAACkC,EAAYxC,IAEhB8C,aAAgB,WACZ,IAAM0C,EAAiB,IAAIC,IACvBC,EAAM,EAFQ,uBAGlB,YAAsBnD,EAAO+B,SAA7B,+CAAuC,CAAC,IAA7BhC,EAA4B,QACnC,GAAIA,EAAQE,aAAeA,EAAY,CACnC,IAAMgC,EAAMlC,EAAQlG,KAAKuJ,YACrBC,EAAcJ,EAAeK,IAAIrB,GAChCoB,IACDA,EAAc,IAAIH,IAClBD,EAAeM,IAAItB,EAAKoB,IAE5BA,EAAYE,IAAIxD,EAAQG,WAAYH,GACpCoD,GAAOpD,EAAQ2B,qBAZL,kFAelBkB,EAAYK,GACZJ,EAASM,KACV,CAACnD,EAAQC,IAER8B,EACO,gBAAC,WAAD,KACH,gBAACyB,EAAA,EAAD,CAAKC,QAAS,EAAGC,aAAc,GAC3B,gBAAC3E,EAAA,EAAD,CACIC,MAAO8D,EAAI,SACXtE,MAAOC,EACPA,MAAOuB,EAAO2D,iBAEtB,gBAAC,EAAD,CACI3D,OAAQA,EAAO4D,KACfrB,gBAAiBR,EACjBtE,WAAYA,KAGb,gBAACoG,EAAA,EAAD,KAAaf,EAAI,iB,0FCpCnBgB,EAAgD,SAACrL,GAAW,IAC9DuC,EAAuDvC,EAAvDuC,KAAMD,EAAiDtC,EAAjDsC,MAAOD,EAA0CrC,EAA1CqC,IAAKkF,EAAqCvH,EAArCuH,OAAQvC,EAA6BhF,EAA7BgF,WAAYuF,EAAiBvK,EAAjBuK,cACvCjC,EAAO,IAAIX,IAAWJ,EAAOE,YAC7B4C,EAAMC,cAHwD,EAIpCxC,aAJoC,mBAI7DwB,EAJ6D,KAInDa,EAJmD,OAKpBrC,aALoB,mBAK7DwD,EAL6D,KAK3CC,EAL2C,OAMhCzD,WAAe,GANiB,mBAM7D0D,EAN6D,KAMjDC,EANiD,OAQd3D,WAAc,WAiChE,SAAS4D,IAAyB,IACxBtK,EAfV,WAAmC,IAAduK,EAAa,uDAAH,EAC3B,YAAavL,IAATmC,OACA,OAEcnC,IAAVkC,EACOnB,IAAQyK,QAAQ,CAACrJ,OAAMD,MAAO,EAAGD,IAAK,IAAIwJ,SAASF,QAC3CvL,IAARiC,EACAlB,IAAQyK,QAAQ,CAACrJ,OAAMD,QAAOD,IAAK,IAAIyJ,UAAUH,GAEjDxK,IAAQyK,QAAQ,CAACrJ,OAAMD,QAAOD,QAAM0J,QAAQJ,GAM9CK,CADgB,uDAAH,GAE1B,GAAI5K,EACA,OAAOkH,EAAK2D,kBAAkB7K,EAAKmB,KAAMD,GAASlB,EAAKkB,MAAOD,GAAOjB,EAAKiB,KAclF,MAAO,CACH6J,UAlDJ,SAAkB3J,EAAeD,EAAgBD,GAC7C,QAAYjC,IAARiC,EAAmB,CACnB,QAAcjC,IAAVkC,EACA,YAAgBlC,IAATmC,EAAqB,MAAQA,EAAK4J,WAEzC,QAAa/L,IAATmC,EACA,MAAM,IAAI6J,MAAM,oBAEpB,OAAOhI,YAAkB7B,EAAMD,GAGnC,QAAalC,IAATmC,QAAgCnC,IAAVkC,EACtB,MAAM,IAAI8J,MAAM,+BAEpB,OAAOjL,IAAQyK,QAAQ,CAACrJ,OAAMD,QAAOD,QAAMsI,YAoCpC0B,CAAS9J,EAAMD,EAAOD,GACjCiK,SAAUZ,GAAY,GACtBa,SAAUb,EAAW,GACrBc,kBAbcpM,IAAVkC,EACO,SACQlC,IAARiC,EACA,GAEA,KAUhB,CAACE,EAAMD,EAAOD,EAAKiG,IAxDf4D,EAR6D,EAQ7DA,UAAWI,EARkD,EAQlDA,SAAUC,EARwC,EAQxCA,SAAUC,EAR8B,EAQ9BA,aAyFtC,OA/BA1E,aAAgB,WAEZ,GADsBP,EAAOkF,cACV,CACf,IAAMC,EAA0CnF,EAAOoF,iBAAiBpK,EAAMD,EAAOD,GACrF,GAAIqK,EAAe,CACf,IAAME,EAAmB,IAAInC,IADd,uBAEf,YAAkCiC,EAAlC,+CAAiD,CAAC,IAAD,6BAArCG,EAAqC,KAA/BjC,EAA+B,KACvCpB,EAAMrI,IAAQ2L,WAAWD,GAAMlC,YACjCoC,EAAmBH,EAAiB/B,IAAIrB,GACvCuD,IACDA,EAAmB,IAAItC,IACvBmC,EAAiB9B,IAAItB,EAAKuD,IALe,2BAO7C,YAAoCnC,EAApC,+CAAiD,CAAC,IAAD,6BAArCnD,EAAqC,KAAzBH,EAAyB,KAC7CyF,EAAiBjC,IAAIrD,EAAYH,IARQ,oFAFlC,kFAaf6C,EAAYyC,GACZnB,EAAclJ,EAAOgF,EAAOyF,iBAAiBzK,EAAMD,EAAOD,GAAOkF,EAAOvB,YAExEmE,OAAY/J,GACZqL,EAAc,GAElBF,EAAoBhE,EAAO0F,iCAGhC,CAAC1K,EAAMD,EAAOD,EAAKkF,IAGtBO,aAAgB,kBAAOyC,EAAc2B,KAAa,CAACA,IAG/C,gBAAC,WAAD,KACI,gBAACnB,EAAA,EAAD,CAAKC,QAAS,EAAGC,aAAc,GAC3B,gBAAC3E,EAAA,EAAD,CACIC,MAAO8D,EAAI,kBACXtE,MAAOyF,EACPxF,MAAOsF,EAAmBkB,IAC9B,gBAACU,EAAA,EAAD,CAAMzG,WAAS,EAACC,QAAQ,gBAAgBC,UAAU,MAAM/F,MAAO,CAACuM,UAAW,UACrEb,GAAY,gBAAC,IAAD,CAAWpM,GAAIoM,EAAU5L,KAAM0M,IAAgBC,SAAO,IACpE,gBAAC,IAAD,CAAWnN,GAAIoI,EAAKA,KAAM5H,KAAM4M,IAAWD,SAAO,IAChDd,GAAY,gBAAC,IAAD,CAAWrM,GAAIqM,EAAU7L,KAAM6M,IAAcF,SAAO,WAG7DjN,IAAXkJ,GAAwB,gBAAC8B,EAAA,EAAD,KAAaf,EAAI,gBACzCf,GAAY,gBAAC,EAAD,CACV/B,OAAQA,EACRuC,gBAAiBR,EAAUtE,WAAYA,M,2BCzHvD,SAASwI,EAAYlI,EAAcmI,GAC/B,IAAMC,EAAQD,EAAO5C,IAAIvF,GACzB,OAAOoI,EAAQC,SAASD,QAAStN,EAlBrC,6CAqBO,IAAMwN,EAA4C,SAAC5N,GAAW,IAE1DsE,EAAYtE,EAAM6N,MAAMJ,OAAxBnJ,SAEAwJ,EADK,IAAInG,IAAWrD,GACpBwJ,eAEDL,EAAS,IAAIM,gBAAgB/N,EAAMgO,SAASC,QAE5C1L,EAAOiL,EAAY,OAAQC,GAC3BnL,EAAQkL,EAAY,QAASC,GAC7BpL,EAAMmL,EAAY,MAAOC,GACzBxF,EAAWwF,EAAO5C,IAAI,YAEtBtG,EAAcF,YAAeC,GAC7BU,EAAaD,cAsBnB,OAAO,gBAAC,WAAD,KACDkD,EAAW,iBArBjB,WACI,OAAQ1D,GAAe0D,GAAYjD,EAC/B,gBAAC,EAAD,eACIuC,OAAQhD,EACRiD,WAAYS,EACZjD,WAAYA,GACRhF,IACR,gBAACkO,EAAA,EAAD,QAcS,MAAgB,iBAXjC,WACI,OAAQ3J,GAAeS,EAAc,gBAAC,EAAD,eACjCuC,OAAQhD,EACRhC,KAAMA,EACND,MAAOA,EACPD,IAAKA,EACL2C,WAAYA,GACRhF,IAAY,gBAACkO,EAAA,EAAD,QAIS,MAC7B,gBAACrJ,EAAA,EAAD,CAAW3E,GAAI4N,MAKRF","file":"static/js/16.8f00dd84.chunk.js","sourcesContent":["\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { SvgIconProps } from '@material-ui/core/SvgIcon';\nimport Fab from '@material-ui/core/Fab';\nimport IconButton from '@material-ui/core/IconButton';\n\ntype Color = 'inherit' | 'primary' | 'secondary' | 'default';\ntype Type = 'button' | 'submit' | 'reset';\n\nexport interface AppButtonProps {\n    to?: string;\n    icon?: React.ComponentType<SvgIconProps>;\n    color?: Color;\n    disabled?: boolean;\n    type?: 'button' | 'submit' | 'reset';\n    variant?: 'text' | 'outlined' | 'contained';\n    replace?: boolean;\n    onClick?: (e: React.SyntheticEvent) => void;\n}\n\nfunction derivedProps (props: AppButtonProps) {\n    const derivedProps = {\n        component: props.to ? Link : undefined,\n    };\n    if (props.onClick && props.to) {\n        console.warn('Button should not have both onClick and href properties');\n    }\n    return derivedProps;\n}\n\nexport const AppButton: React.FC<AppButtonProps> = (props) => (\n    <IconButton color='inherit' {...props} {...derivedProps(props)}>\n        { props.icon && <props.icon />}\n    </IconButton>\n);\n\nexport interface ButtonFabProps {\n    disabled?: boolean;\n    type?: Type;\n    color?: Color;\n    to?: string;\n}\n\nfunction style (color?: Color) {\n    if (color === 'primary' || color === undefined) {\n        return {right: '1rem'};\n    } else {\n        return {left: '1rem'};\n    }\n}\n\nexport const ButtonFab = (props: ButtonFabProps&{children: React.ReactNode}) => (\n    <Fab style={{position: 'fixed', bottom: '1rem', zIndex: 10, ...style(props.color)}} \n        color={props.color||'secondary'}\n        {...props}\n        {...derivedProps(props)}\n        >\n        {props.children}\n    </Fab>);\n\n","import { YMD } from \"../api\";\n\nexport class DateDay implements YMD {\n    private readonly _date: Date;\n\n    constructor(date = new Date()) {\n        this._date = new Date(\n            date.getFullYear(), \n            date.getMonth(), \n            date.getDate());\n    }\n\n    clone() {\n        return new DateDay(this._date);\n    }\n\n    get year () {\n        return this._date.getFullYear();\n    }\n\n    get month () {\n        return this._date.getMonth();\n    }\n\n    get day () {\n        return this._date.getDate();\n    }\n\n    static fromTimeMs (timestampMs: number) {\n        return new DateDay(new Date(timestampMs));\n    }\n\n    static fromYMD (date: YMD) {\n        return new DateDay(new Date(date.year, date.month, date.day));\n    }\n\n    get timeMs () {\n        return this._date.getTime();\n    }\n    \n    get isToday() {\n        return DateDay.isToday(this);\n    }\n\n    /**\n     * @returns current object instance with days added to previous date\n     */\n    addDays (days: number) {\n        this._date.setDate(this._date.getDate() + days);\n        return this;\n    }\n\n    /**\n     * @returns current object instance with months added to previous date\n     */\n    addMonths (months: number) {\n        this._date.setMonth(this._date.getMonth() + months);\n        return this;\n    }\n\n    /**\n     * @returns current object instance with years added to previous date\n     */\n    addYears (years: number) {\n        this._date.setFullYear(this._date.getFullYear() + years);\n        return this;\n    }\n\n    static isToday(date: YMD) {\n        const now = new Date();\n        return date.day === now.getDate() && \n            date.month === now.getMonth() && \n            date.year === now.getFullYear();\n    }\n\n    get shortString () {\n        const dt = new Intl.DateTimeFormat(\n            undefined, \n            {day: 'numeric', month: 'long', year: 'numeric'});\n        return dt.format(this._date);\n    }\n\n    equals(date: DateDay) {\n        return this._date.getTime() === date._date.getTime();\n    }\n}","import { useState, useEffect } from 'react';\nimport { BudgetsStore } from '../domain/stores/interfaces';\nimport { StorageObserver } from '../services/storage/StorageApi';\nimport { useAppContext } from '../contexts/AppContext';\n\nexport function useBudgetsStore() {\n    const [store, setStore] = useState<BudgetsStore>();\n    const btApp = useAppContext();\n\n    useEffect(() => {\n        async function fetchStore () {\n            setStore(await btApp.getBudgetsStore());\n        }\n\n        let isSubscribed = true;\n        if (isSubscribed) {\n            fetchStore();\n        }\n\n        return () => { isSubscribed = false };\n        \n    }, [store, btApp]);\n\n    useEffect(() => {\n        let isSubscribed = true;\n        const observer: StorageObserver = {onStorageDataChanged: () => {\n            setStore(undefined);\n        }};\n\n        if (isSubscribed) {\n            btApp.storage.addObserver(observer);\n        }\n\n        return () => {\n            isSubscribed = false;\n            btApp.storage.deleteObserver(observer);\n        };\n    }, [btApp]);\n\n    return store;\n}","\nconst DAY_MS = 1000*60*60*24;\n\n/**\n * Get difference between 2 dates in days, including from and to dates.\n * @param from - Starting period timestamp\n * @param to - Ending period timestamp\n */\nexport function dateDiff(from: number, to: number) {\n    return Math.floor((to - from)/DAY_MS) + 1;\n}\n\n/** \n * @returns Date (without time) as string type in ISO format\n */\nexport function getISODateString (date = new Date()) {\n    return date.toISOString().slice(0,10);\n}\n\n/** \n * @returns month name from Date input\n */\nexport function monthToString (month: number) {\n    const dt = new Intl.DateTimeFormat(undefined, {month: 'long'});\n    return dt.format(new Date(2000, month, 1));\n}\n\n/** \n * @returns month and year name from Date input\n */\nexport function monthYearToString (year: number, month: number) {\n    const dt = new Intl.DateTimeFormat(undefined, {month: 'long', year: 'numeric'});\n    return dt.format(new Date(year, month, 1));\n}\n","import { useState, useEffect } from 'react';\nimport { BudgetModel } from '../domain/BudgetModel';\nimport { useBudgetsStore } from './useBudgetsStore';\nimport { BudgetsStore } from '../domain/stores/interfaces';\n\nexport function useBudgetModel(budgetId: string) {\n    const store = useBudgetsStore();\n    const [budgetModel, setBudgetModel] = useState<BudgetModel>();\n\n    useEffect(() => {\n        async function fetchBudget (store: BudgetsStore) {\n            setBudgetModel(await store.getBudgetModel(budgetId));\n        }\n        if (budgetId) {\n            let isSubscribed = true;\n\n            if (isSubscribed) {\n                if (store) {\n                    fetchBudget(store);\n                } else {\n                    setBudgetModel(undefined);\n                }\n            }\n            return () => {isSubscribed = false};\n        }\n        \n    }, [budgetId, store]);\n\n    return budgetModel;\n}","import { useState, useEffect } from 'react';\nimport { CategoriesStore } from '../domain/stores/interfaces';\nimport { useAppContext } from '../contexts/AppContext';\n\nexport function useCategoriesStore () {\n    const btApp = useAppContext();\n    const [store, setStore] = useState<CategoriesStore>();\n\n    useEffect(() => {\n        async function fetchStore () {\n            setStore(await btApp.getCategoriesStore());\n        }\n\n        let isSubscribed = true;\n        if (isSubscribed) {\n            fetchStore();\n        }\n\n        return () => { isSubscribed = false };\n        \n    }, [btApp, store]);\n\n    return store;\n}\n","\nimport * as React from 'react';\nimport AddIcon from '@material-ui/icons/Add';\nimport { ButtonFabProps, ButtonFab } from './buttons';\n\nexport const AddButton: React.FC<ButtonFabProps> = (props) => (\n    <ButtonFab aria-label='Add' {...props} color='primary'>\n        <AddIcon />\n    </ButtonFab>);","import { useState, useEffect } from 'react';\nimport { CategoriesMap } from '../api';\nimport { useCategoriesStore } from './useCategoriesStore';\nimport { CategoriesStore } from '../domain/stores/interfaces';\n\nexport function useCategories() {\n    const [categories, setCategories] = useState<CategoriesMap>();\n    const store = useCategoriesStore();\n\n    useEffect(() => {\n        \n        async function fetchCategories (store: CategoriesStore) {\n            const cs = await store.getCategories();\n            setCategories(cs);\n        }\n\n        store && fetchCategories(store);\n    }, [store]);\n\n    return categories;\n}\n","import * as React from 'react';\nimport { useIcon } from '../../hooks/useIcon';\n\ninterface CategoryIconProp {\n    name: string;\n};\n\nexport const CategoryIcon: React.FC<CategoryIconProp> = (props) => {\n\n    const {name} = props;\n    const icon = useIcon(name);\n\n    return (\n        <React.Suspense fallback={name}>\n            { icon ? <icon.Icon style={{color: icon.color}}/> : null}\n        </React.Suspense>\n    );\n}\n\nexport default CategoryIcon;\n","import { useState, useEffect } from 'react';\nimport { ColoredLazyIcon } from '../domain/stores/interfaces';\nimport { useAppContext } from '../contexts/AppContext';\n\nexport function useIcon(name: string) {\n    const [icon, setIcon] = useState<ColoredLazyIcon>();\n    const btApp = useAppContext();\n\n    useEffect(() => {\n        async function fetchIcon () {\n            const store = await btApp.getIconsStore();\n            setIcon(store.getIcon(name));\n        }\n\n        let isSubscribed = true;\n        if (isSubscribed) {\n            fetchIcon();\n        }\n        \n        return () => {isSubscribed = false};\n    }, [name, btApp]);\n\n    return icon;\n}","import * as React from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\ninterface VersusInfoProps {\n    total: number;\n    spent: number;\n    title: string;\n}\n\nfunction percentage (spent: number, total: number) {\n    if (total) {\n        return (spent / total) * 100;\n    }\n    return 0;\n}\n\ndeclare type FType = number|string;\n\nconst FieldDataView: React.FC<{text:FType, secondary?: FType}> = (props) => (\n        <Typography variant='body2' noWrap>\n            {props.text} \n            { props.secondary && \n                <Typography variant='caption' color='textSecondary'>\n                    {props.secondary}</Typography> }\n        </Typography>\n\n);\n\nexport const VersusInfo: React.FC<VersusInfoProps> = (props) => {\n    const {spent, total, title} = props;\n\n    const exceeded = spent > total;\n\n    return (<React.Fragment>\n        <Grid container justify='space-between' direction='row'>\n            <FieldDataView text={Math.round(spent)}/>\n            <FieldDataView text={title} secondary={` (${Math.round(total)})`}/>\n            <FieldDataView text={Math.round(total - spent)}/>\n        </Grid>\n        <LinearProgress \n            color={exceeded ? 'secondary' : 'primary'}\n            variant='determinate' \n            value={ exceeded ? 100 : percentage(spent, total) }/>\n    </React.Fragment>);\n}\n","import { ObjectMap } from \"../../api\";\n\nconst formatters: ObjectMap<Intl.NumberFormat> = {};\n\nfunction getNumberFormatter(currency: string) {\n    if (!(currency in formatters)) {\n        formatters[currency] = new Intl.NumberFormat(undefined, { \n            style: 'currency', \n            currency,\n        });\n    }\n    return formatters[currency];\n}\n\nexport function getCurrencyWithSymbol (amount: number, currency: string) {\n    return getNumberFormatter(currency).format(amount);\n}\n","import React from 'react';\nimport {Link as RouterLink} from 'react-router-dom';\nimport MuiLink from '@material-ui/core/Link';\n\nexport const Link: React.FC<{to: string}> = (props) => (\n    <MuiLink component={RouterLink} to={props.to}>{props.children}</MuiLink>\n);\n","import * as React from \"react\";\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport { Budget, Expense, CategoriesMap } from \"../../api\";\nimport { Redirect } from 'react-router-dom';\nimport { ExpensePath } from \"../../domain/paths/ExpensePath\";\nimport CategoryIcon from \"../categories/CategoryIcon\";\nimport { BudgetPath } from \"../../domain/paths/BudgetPath\";\nimport { getCurrencyWithSymbol } from \"../../domain/utils/getCurrencyWithSymbol\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { Link } from \"../Link\";\n\ninterface ExpenseListItemProps {\n    budget: Budget;\n    expense: Expense;\n    categories: CategoriesMap;\n}\n\nexport const ExpenseListItem: React.FC<ExpenseListItemProps> = (props) => {\n    const {expense, budget, categories} = props;\n    const {categoryId, identifier} = expense;\n    const budgetPath = new BudgetPath(props.budget.identifier);\n    const expensePath = new ExpensePath(identifier, budgetPath);\n\n    const [redirect, setRedirect] = React.useState();\n\n    function amountBase () {\n        return expense.amountBaseCurrency.toLocaleString();\n    }\n\n    function amount () {\n        return getCurrencyWithSymbol(expense.amount, expense.currency);\n    }\n\n    function isBaseCurrency () {\n        return budget.currency === expense.currency;\n    }\n\n    const handleClick = () => ( setRedirect(expensePath.path) );\n\n    const category = React.useMemo(() => (categories[categoryId]), [categoryId, categories]);\n\n    if (redirect) {\n        return <Redirect push to={redirect} />\n    }\n\n    return (\n        <ListItem divider button onClick={ handleClick } id={identifier}\n            >\n            { category && <ListItemAvatar>\n                    <Avatar style={{backgroundColor:'#eee'}}>\n                        <CategoryIcon name={category.icon}/>\n                    </Avatar> \n                </ListItemAvatar> }\n            <ListItemText \n                primary={\n                    category && <Link to={budgetPath.pathExpensesByCategory(category.identifier)}>{category.name}</Link>} \n                secondary={expense.description}\n                secondaryTypographyProps={{ noWrap: true }}\n            />\n            <ListItemText \n                style={{textAlign: 'right'}}\n                primary={amountBase()} \n                secondary={!isBaseCurrency() && amount()}\n            />\n        </ListItem>\n    );\n}\n","import * as React from \"react\";\nimport { Expense, Budget, CategoriesMap } from \"../../api\";\nimport { ExpenseListItem } from \"./ExpenseListItem\";\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\n\ninterface ExpensesListGroupProps {\n    budget: Budget;\n    expenses: Iterable<Expense>;\n    name: string;\n    categories: CategoriesMap;\n}\n\nexport const ExpensesListGroup: React.FC<ExpensesListGroupProps> = (props) => (\n    <React.Fragment>\n        <ListSubheader \n            component='div' \n            id={`subheader-${props.name}`} >\n            { props.name }\n        </ListSubheader>\n        {\n            Array.from(props.expenses).map((expense) => (\n                <ExpenseListItem \n                    key={`expense-${expense.identifier}`}\n                    expense={expense}\n                    budget={props.budget}\n                    categories={props.categories}\n                    />\n            ))\n        }\n    </React.Fragment>);","import * as React from \"react\";\nimport List from '@material-ui/core/List';\nimport { Budget, Expense, CategoriesMap } from \"../../api\";\nimport { ExpensesListGroup } from \"./ExpenseListGroup\";\n\ninterface ExpenseListProps {\n    budget: Budget;\n    expensesByGroup: Map<string, Map<string, Expense>>;\n    categories: CategoriesMap;\n}\n\nexport const ExpenseList: React.FC<ExpenseListProps> = (props) => {\n\n    return <List style={{\n        height: '100%', \n        backgroundColor: '#fff', \n        position: 'relative', \n        overflow: 'auto', \n        listStyleType: 'none'}}>\n        {[...props.expensesByGroup.entries()]\n            .map(([group, expenses]) => (\n                <ExpensesListGroup\n                key={`lg-${group}`} \n                name={group}\n                budget={props.budget}\n                expenses={expenses.values()}\n                categories={props.categories}/>)\n        )}\n    </List>;\n}\n","import * as React from \"react\";\nimport { ExpenseList } from \"../../components/expenses/ExpenseList\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Expense, CategoriesMap } from \"../../api\";\nimport { BudgetModel } from \"../../domain/BudgetModel\";\nimport { useLoc } from \"../../hooks/useLoc\";\nimport { HeaderNotifierProps } from \"../../routes\";\nimport Box from \"@material-ui/core/Box\";\nimport { VersusInfo } from \"../VersusInfo\";\n\ninterface ExpensesByCategoryProps extends HeaderNotifierProps {\n    categoryId: string;\n    budget: BudgetModel;\n    categories: CategoriesMap;\n}\n\nexport const ExpensesByCategory: React.FC<ExpensesByCategoryProps> = (props) => {\n    const {budget, categoryId, categories} = props;\n    const [expenses, setExpenses] = React.useState<Map<string, Map<string, Expense>>>();\n    const [total, setTotal] = React.useState(0);\n    const loc = useLoc();\n    \n    React.useEffect(() => {\n        props.onTitleChange(`${loc('Expenses in')} ${categories && categories[categoryId].name}`);\n    // eslint-disable-next-line\n    }, [categoryId, categories]);\n\n    React.useEffect(() => {\n        const expensesByDate = new Map();\n        let sum = 0;\n        for (const expense of budget.expenses) {\n            if (expense.categoryId === categoryId) {\n                const key = expense.date.shortString;\n                let expensesMap = expensesByDate.get(key);\n                if (!expensesMap) {\n                    expensesMap = new Map();\n                    expensesByDate.set(key, expensesMap);\n                }\n                expensesMap.set(expense.identifier, expense);\n                sum += expense.amountBaseCurrency;\n            }\n        }\n        setExpenses(expensesByDate);\n        setTotal(sum);\n    }, [budget, categoryId]);\n\n    if (expenses) {\n        return <React.Fragment>\n            <Box padding={1} marginBottom={2} >\n                <VersusInfo \n                    title={loc('Spent')} \n                    spent={total}\n                    total={budget.totalExpenses}/>\n            </Box>\n            <ExpenseList \n                budget={budget.info}\n                expensesByGroup={expenses} \n                categories={categories} />\n        </React.Fragment>;\n    } else {\n        return <Typography>{loc('No expenses')}</Typography>;\n    }\n}\n","import * as React from \"react\";\nimport { ExpenseList } from \"./ExpenseList\";\nimport { HeaderNotifierProps } from \"../../routes\";\nimport { VersusInfo } from \"../VersusInfo\";\nimport Box from \"@material-ui/core/Box\";\nimport { BudgetPath } from \"../../domain/paths/BudgetPath\";\nimport { DateDay } from \"../../domain/DateDay\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { AppButton } from \"../buttons/buttons\";\nimport NavigateBefore from \"@material-ui/icons/NavigateBefore\";\nimport NavigateNext from \"@material-ui/icons/NavigateNext\";\nimport DateRange from \"@material-ui/icons/DateRange\";\nimport { monthYearToString } from \"../../domain/date\";\nimport { ExpensesDayMap } from \"../../domain/ExpensesYearMap\";\nimport { Expense, YMD, CategoriesMap } from \"../../api\";\nimport { BudgetModel } from \"../../domain/BudgetModel\";\nimport { useLoc } from \"../../hooks/useLoc\";\n\ninterface ExpensesByDateProps extends Partial<YMD>, HeaderNotifierProps {\n    budget: BudgetModel;\n    categories: CategoriesMap;\n}\n\nexport const ExpensesByDate: React.FC<ExpensesByDateProps> = (props) => {\n    const {year, month, day, budget, categories, onTitleChange} = props;\n    const path = new BudgetPath(budget.identifier);\n    const loc = useLoc();\n    const [expenses, setExpenses] = React.useState<Map<string, Map<string, Expense>>>();\n    const [expectedDailyAvg, setExpectedDailyAvg] = React.useState();\n    const [totalSpent, setTotalSpent] = React.useState(0);\n\n    const {dateTitle, prevDate, nextDate, numberOfDays} = React.useMemo(() => {\n        function getTitle(year?: number, month?: number, day?: number) {\n            if (day === undefined) {\n                if (month === undefined) {\n                    return year === undefined ? 'All' : year.toString();\n                } else {\n                    if (year === undefined) {\n                        throw new Error('Year is required');\n                    }\n                    return monthYearToString(year, month);\n                }\n            } else {\n                if (year === undefined || month === undefined) {\n                    throw new Error('Year and month are required');\n                }\n                return DateDay.fromYMD({year, month, day}).shortString;\n            }\n        }\n\n        function getNextDate(increment=1) {\n            if (year === undefined) {\n                return undefined;\n            } else {\n                if (month === undefined) {\n                    return DateDay.fromYMD({year, month: 0, day: 1}).addYears(increment)\n                } else if (day === undefined) {\n                    return DateDay.fromYMD({year, month, day: 1}).addMonths(increment)\n                } else {\n                    return DateDay.fromYMD({year, month, day}).addDays(increment)\n                }\n            }\n        }\n\n        function getNextUrl(increment=1) {\n            const date = getNextDate(increment);\n            if (date) {\n                return path.pathExpensesByDay(date.year, month && date.month, day && date.day);\n            }\n        }\n\n        function getNumberOfDays () {\n            if (month === undefined) {\n                return 365;\n            } else if (day === undefined) {\n                return 30\n            } else {\n                return 1;\n            }\n        }\n\n        return {\n            dateTitle: getTitle(year, month, day),\n            prevDate: getNextUrl(-1),\n            nextDate: getNextUrl(1),\n            numberOfDays: getNumberOfDays()\n        };\n    }, [year, month, day, path]);\n\n    React.useEffect(() => {\n        const expenseGroups = budget.expenseGroups;\n        if (expenseGroups) {\n            const expensesByDay: ExpensesDayMap|undefined = budget.getExpensesByDay(year, month, day);\n            if (expensesByDay) {\n                const expensesByGroups = new Map<string, Map<string, Expense>>();\n                for (const [when, expensesMap] of expensesByDay) {\n                    const key = DateDay.fromTimeMs(when).shortString;\n                    let savedExpensesMap = expensesByGroups.get(key);\n                    if (!savedExpensesMap) {\n                        savedExpensesMap = new Map();\n                        expensesByGroups.set(key, savedExpensesMap);\n                    }\n                    for (const [identifier, expense] of expensesMap) {\n                        savedExpensesMap.set(identifier, expense);\n                    }\n                }\n                setExpenses(expensesByGroups);\n                setTotalSpent(year ? budget.getTotalExpenses(year, month, day) : budget.total);\n            } else {\n                setExpenses(undefined);\n                setTotalSpent(0);\n            }\n            setExpectedDailyAvg(budget.expectedDailyExpensesAverage);\n        }\n    // eslint-disable-next-line\n    }, [year, month, day, budget]);\n\n    // eslint-disable-next-line\n    React.useEffect(() => (onTitleChange(dateTitle)), [dateTitle]);\n\n    return (\n        <React.Fragment>\n            <Box padding={1} marginBottom={2} >\n                <VersusInfo \n                    title={loc('Daily expenses')} \n                    spent={totalSpent}\n                    total={expectedDailyAvg * numberOfDays}/>\n                <Grid container justify='space-between' direction='row' style={{marginTop: '1.5em'}}>\n                    { prevDate && <AppButton to={prevDate} icon={NavigateBefore} replace/> }\n                    <AppButton to={path.path} icon={DateRange} replace/>\n                    { nextDate && <AppButton to={nextDate} icon={NavigateNext} replace/> }\n                </Grid>\n            </Box>\n            { expenses===undefined && <Typography>{loc('No expenses')}</Typography> }\n            { expenses && <ExpenseList \n                budget={budget}\n                expensesByGroup={expenses} categories={categories} /> }\n        </React.Fragment>);\n}\n","import * as React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { HeaderNotifierProps } from \"../../routes\";\nimport { BudgetPath } from \"../../domain/paths/BudgetPath\";\nimport { useBudgetModel } from \"../../hooks/useBudgetModel\";\nimport { ExpensesByCategory } from \"../../components/expenses/ExpensesByCategory\";\nimport { ExpensesByDate } from \"../../components/expenses/ExpensesByDate\";\nimport { AddButton } from \"../../components/buttons/AddButton\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useCategories } from \"../../hooks/useCategories\";\n\ninterface ExpensesViewProps extends\n    HeaderNotifierProps,\n    RouteComponentProps<{budgetId: string, year: string, month: string, day: string}> { \n}\n\nfunction getParamInt(name: string, params: URLSearchParams) {\n    const param = params.get(name);\n    return param ? parseInt(param) : undefined;\n}\n\nexport const ExpensesView: React.FC<ExpensesViewProps> = (props) => {\n\n    const {budgetId} = props.match.params;\n    const url = new BudgetPath(budgetId);\n    const {pathAddExpense} = url;\n    \n    const params = new URLSearchParams(props.location.search);\n\n    const year = getParamInt('year', params);\n    const month = getParamInt('month', params);\n    const day = getParamInt('day', params);\n    const category = params.get('category');\n\n    const budgetModel = useBudgetModel(budgetId);\n    const categories = useCategories();\n\n    function ByCategory () {\n        return (budgetModel && category && categories) ? \n            <ExpensesByCategory \n                budget={budgetModel} \n                categoryId={category} \n                categories={categories}\n                {...props}/> : \n            <CircularProgress/>;\n    }\n\n    function ByDate () {\n        return (budgetModel && categories) ? <ExpensesByDate \n            budget={budgetModel}\n            year={year}\n            month={month}\n            day={day}\n            categories={categories}\n            {...props} /> : <CircularProgress/>;\n    }\n    \n    return <React.Fragment>\n        { category ? <ByCategory/> : <ByDate/> }\n        <AddButton to={pathAddExpense}/>\n    </React.Fragment>;\n    \n}\n\nexport default ExpensesView;\n"],"sourceRoot":""}